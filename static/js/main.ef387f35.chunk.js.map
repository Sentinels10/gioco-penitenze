{"version":3,"sources":["actions lazy /^/.//.*$/ groupOptions: {} namespace object","translations.js","useGameLogic.js","GameUI.js","DrinkingGameApp.js","index.js","assets/pointing-glove.png"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","translations","it","appName","appDescription","startButton","backButton","nextButton","doneButton","payButton","enterButton","resetButton","startGameButton","playersScreenTitle","roomsScreenTitle","unlockGameTitle","leaderboardTitle","playerInputPlaceholder","addPlayerLabel","notEnoughPlayersError","gameOverMessage","actionsCompletedMessage","tapToContinueMessage","returnToRoomsMessage","unlockMoreGamesMessage","freeGameEndedTitle","freeGameEndedMessage","purchaseButton","processingPayment","leaderboardSubtitle","penaltiesLabel","continueButton","paymentOptions","name","price","description","loadingMessage","rooms","color","specialGames","bouncer","pointFinger","infamata","truthOrDare","choosing","truth","dare","debt","ilPezzoGrosso","cringeOrClassy","wouldYouRather","chatDetective","tuttoHaUnPrezzo","tuttiQuelliChe","penitenzeGruppo","penitenzaRandom","nonHoMai","chiEPiuProbabile","happyHour","oneVsOne","specialGamesTitles","wouldYouRatherExplanation","truthDareOptions","selectOption","debtExplanation","chooseOption","noActionAvailable","penaltyAlternatives","questions","statements","debts","buttonLabel","activeDebtsTitle","debtDescription","logMessages","neonRouletteStats","redRoomStats","darkRoomStats","coppieStats","partyStats","totalStats","noActionsInPool","missingSpecialGame","truthDareIntro","truthDareNextPlayerIntro","en","fr","de","useGameLogic","language","setLanguage","useState","gameState","setGameState","players","setPlayers","inputPlayers","setInputPlayers","currentPlayerIndex","setCurrentPlayerIndex","currentAction","setCurrentAction","selectedRoom","setSelectedRoom","previousAction","setPreviousAction","actionsCounter","setActionsCounter","playerPenalties","setPlayerPenalties","isLoading","setIsLoading","loadingProgress","setLoadingProgress","currentRoomIndex","setCurrentRoomIndex","roomActionsPool","setRoomActionsPool","redRoom","darkRoom","coppie","party","neonRoulette","currentActionIndex","setCurrentActionIndex","groupActionsPool","setGroupActionsPool","groupActionPositions","setGroupActionPositions","groupActionsShown","setGroupActionsShown","SPECIAL_GAMES","SPECIAL_GAME_TYPES","getAvailableSpecialGames","roomId","specialGamesUsed","setSpecialGamesUsed","newRule","specialGamesRound","setSpecialGamesRound","activeSpecialGame","setActiveSpecialGame","specialGamePlayer","setSpecialGamePlayer","lastSpecialGameRound","setLastSpecialGameRound","debtList","setDebtList","hasPlayedFreeGame","setHasPlayedFreeGame","hasPaid","setHasPaid","selectedPaymentOption","setSelectedPaymentOption","isProcessingPayment","setIsProcessingPayment","truthDarePlayers","setTruthDarePlayers","currentTruthDareChoice","setCurrentTruthDareChoice","truthDareContent","setTruthDareContent","truthDareState","setTruthDareState","truthDareContentPool","setTruthDareContentPool","cringeOrClassyState","setCringeOrClassyState","cringeOrClassyResult","setCringeOrClassyResult","wouldYouRatherContent","setWouldYouRatherContent","useEffect","storedHasPaid","localStorage","getItem","storedHasPlayedFreeGame","storedLanguage","firstLoadFlag","sessionStorage","setTimeout","updateCurrentAction","setItem","addPlayerInput","length","newId","Math","max","p","loadBackupActions","async","backupActionsFileName","backupActionsModule","console","log","default","error","warn","enError","itError","distributeSpecialGames","maxActions","availableGames","gameType","shuffledGames","sort","random","maxPosition","availableRange","segmentSize","MIN_SPACING","floor","positions","forEach","game","index","segmentStart","segmentEnd","min","prevGame","minValidPosition","includes","randomIndex","groupAction","updatedPool","splice","text","prev","MAX_ACTIONS_PER_GAME","gamesToCheck","nextGameToShow","nextGamePosition","Infinity","gamePosition","backupActions","replace","nextTurn","actionText","specialPlayerIndex","isClassy","playerIndices","Array","from","_","i","currentFirst","shuffledRemaining","filter","idx","truthPool","darePool","truthDareGame","push","wouldYouRatherQuestions","allQuestions","question","rules","selectedRule","challenges","allChallenges","chiEPiuProbabileQuestions","actions","penaltyCount","updatedPenalties","player","opponentIndex","handleSpecialGame","currentPool","fallbackTexts","adjustedIndex","attempts","tempAction","currentPlayer","otherPlayers","randomPlayerName","questionPenaltyRegex","match","randomQuestionAlt","penaltyRegex","randomAlt","afterSpecialAction","arguments","undefined","nextPlayerIndex","resetGame","resetUsedGames","resetGameRounds","room","reduce","acc","MIN_ACTIONS_BETWEEN_SPECIAL_GAMES","changeLanguage","newLanguage","newRooms","newRoomIndex","findIndex","openLanguageSelector","enterPlayerSetup","updatePlayerName","input","removePlayerInput","startGame","validPlayers","trim","alert","initialPenalties","handleKeyPress","key","nextInput","document","getElementById","focus","selectRoom","gamePositions","groupActions","shuffledGroupActions","slice","startPosition","interval","minSpacing","basePosition","maxOffset","randomOffset","redRoomActions","darkRoomActions","coppieActions","partyActions","specialGameActions","values","gameData","isArray","roomContent","maxPerCategory","selectedRedRoomActions","selectedDarkRoomActions","selectedCoppieActions","selectedPartyActions","selectedSpecialGameActions","shuffledActions","backupActionsForRoom","shuffledBackupActions","randomPlayerIndex","nextTurnAfterSpecialGame","updatedPlayers","shift","handleTruthDareChoice","choice","pool","content","newDebt","status","goBack","selectPaymentOption","option","processPayment","resetPaywallState","removeItem","getSpecialGameMessage","_t$specialGames$activ","choiceKey","handleDone","handlePay","getLeaderboard","entries","_ref","_ref2","penaltiesA","penaltiesB","_ref3","penalties","endGame","GameUI","props","React","createElement","className","style","backgroundColor","display","flexDirection","justifyContent","alignItems","height","padding","textAlign","maxWidth","fontSize","marginBottom","fontWeight","lineHeight","onClick","width","border","borderRadius","cursor","marginTop","opacity","background","gridTemplateColumns","margin","letterSpacing","flex","overflowY","gap","position","bottom","left","right","zIndex","overflow","type","value","onChange","target","onKeyPress","placeholder","disabled","minHeight","maxHeight","newIndex","toUpperCase","whiteSpace","item","borderBottom","animation","src","pointingGlove","alt","objectFit","jsx","transition","d","join","boxShadow","top","borderTopColor","DrinkingGameApp","gameLogic","ReactDOM","createRoot","render","StrictMode"],"mappings":"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AO,CACHF,EACAA,EACAA,EACAA,EACAA,GACAA,IAEN,IAAK,UAEH,MAAO,CACLA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GACAA,GACAA,IAEJ,IAAK,WAEH,MAAO,CACLA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GACAA,GACAA,IAEJ,IAAK,QAEH,MAAO,CACLA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GACAA,GACAA,GACAA,IAEJ,IAAK,eACL,QAEE,MAAO,CACLA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GACAA,GACAA,GACAA,OAMDG,GAAkBC,IAAuB7C,mBAAS,CACvD2B,QAAS,CACP9E,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,aAAa,EACbK,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBC,eAAe,EACfsF,SAAS,EACTrF,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,kBAAkB,EAClBC,WAAW,EACXC,UAAU,GAEZ4D,SAAU,CACR/E,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,aAAa,EACbK,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBC,eAAe,EACfsF,SAAS,EACTrF,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,kBAAkB,EAClBC,WAAW,EACXC,UAAU,GAEZ6D,OAAQ,CACNhF,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,aAAa,EACbK,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBC,eAAe,EACfsF,SAAS,EACTrF,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,kBAAkB,EAClBC,WAAW,EACXC,UAAU,GAEZ8D,MAAO,CACLjF,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,aAAa,EACbK,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBC,eAAe,EACfsF,SAAS,EACTrF,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,kBAAkB,EAClBC,WAAW,EACXC,UAAU,GAEZ+D,aAAc,CACZlF,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,aAAa,EACbK,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBC,eAAe,EACfsF,SAAS,EACTrF,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,kBAAkB,EAClBC,WAAW,EACXC,UAAU,MAKP+E,GAAmBC,IAAwBhD,mBAAS,CACzD2B,QAAS,CACP9E,QAAS,GACTC,YAAa,GACbC,SAAU,GACVC,YAAa,GACbK,cAAe,GACfC,eAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfsF,QAAS,EACTrF,gBAAiB,GACjBC,eAAgB,GAChBC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,iBAAkB,GAClBC,UAAW,GACXC,SAAU,IAEZ4D,SAAU,CACR/E,QAAS,GACTC,YAAa,GACbC,SAAU,GACVC,YAAa,GACbK,cAAe,GACfC,eAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfsF,QAAS,EACTrF,gBAAiB,GACjBC,eAAgB,GAChBC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,iBAAkB,GAClBC,UAAW,GACXC,SAAU,IAEZ6D,OAAQ,CACNhF,QAAS,GACTC,YAAa,GACbC,SAAU,GACVC,YAAa,GACbK,cAAe,GACfC,eAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfsF,QAAS,EACTrF,gBAAiB,GACjBC,eAAgB,GAChBC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,iBAAkB,GAClBC,UAAW,GACXC,SAAU,IAEZ8D,MAAO,CACLjF,QAAS,GACTC,YAAa,GACbC,SAAU,GACVC,YAAa,GACbK,cAAe,GACfC,eAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfsF,QAAS,EACTrF,gBAAiB,GACjBC,eAAgB,GAChBC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,iBAAkB,GAClBC,UAAW,GACXC,SAAU,IAEZ+D,aAAc,CACZlF,QAAS,GACTC,YAAa,GACbC,SAAU,GACVC,YAAa,GACbK,cAAe,GACfC,eAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfsF,QAAS,EACTrF,gBAAiB,GACjBC,eAAgB,GAChBC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,iBAAkB,GAClBC,UAAW,GACXC,SAAU,OAKPiF,GAAmBC,IAAwBlD,mBAAS,OAEpDmD,GAAmBC,IAAwBpD,mBAAS,OAGpDqD,GAAsBC,IAA2BtD,mBAAS,CAC/D2B,QAAS,EACTC,SAAU,EACVC,OAAQ,EACRC,MAAO,EACPC,aAAc,KAITwB,GAAUC,IAAexD,mBAAS,KAMlCyD,GAAmBC,IAAwB1D,oBAAS,IACpD2D,GAASC,IAAc5D,oBAAS,IAChC6D,GAAuBC,IAA4B9D,mBAAS,OAC5D+D,GAAqBC,IAA0BhE,oBAAS,IAGxDiE,GAAkBC,IAAuBlE,mBAAS,KAClDmE,GAAwBC,IAA6BpE,mBAAS,OAC9DqE,GAAkBC,IAAuBtE,mBAAS,OAClDuE,GAAgBC,IAAqBxE,mBAAS,OAC9CyE,GAAsBC,IAA2B1E,mBAAS,CAC/D9C,MAAO,GACPC,KAAM,MAIDwH,GAAqBC,IAA0B5E,mBAAS,OACxD6E,GAAsBC,IAA2B9E,mBAAS,OAG1D+E,GAAuBC,IAA4BhF,mBAAS,MAGnEiF,oBAAU,KAER,MAAMC,EAAoD,SAApCC,aAAaC,QAAQ,WACrCC,EAAwE,SAA9CF,aAAaC,QAAQ,qBAC/CE,EAAiBH,aAAaC,QAAQ,YAExCF,GACFtB,IAAW,GAGTyB,GACF3B,IAAqB,GAGnB4B,GAAkBhL,EAAagL,IACjCvF,EAAYuF,IAEb,IAGHL,oBAAU,KACR,GAAkB,YAAdhF,GAA2BU,EAAc,CAE3C,MAAM4E,EAAgB,qBAAuB5E,EAAa3G,GACrDwL,eAAeJ,QAAQG,IAC1BE,WAAW,KACTC,KACAF,eAAeG,QAAQJ,EAAe,SACrC,OAGN,CAACtF,EAAWU,IAGf,MAoCMiF,GAAiBA,KACrB,GAAIvF,EAAawF,OAAS,GAAI,CAC5B,MAAMC,EAAQzF,EAAawF,OAAS,EAChCE,KAAKC,OAAO3F,EAAajH,IAAI6M,GAAKA,EAAEjM,KAAO,EAC3C,EACJsG,EAAgB,IAAID,EAAc,CAAErG,GAAI8L,EAAOxJ,KAAM,QA2DrD4J,GAAoBC,UACxB,IAEE,MAAMC,EAAwB,iBAAiBtG,SAC/C,IAAIuG,EAGJ,IAIE,OAFAA,QAA4B,MAAO,KAAaD,GAChDE,QAAQC,IAAI,oCAAoCH,GACzCC,EAAoBG,QAC3B,MAAOC,GACPH,QAAQI,KAAK,uCAAuCN,KAA0BK,GAG9E,IAGE,OAFAJ,QAA4B,gCAC5BC,QAAQC,IAAI,4CACLF,EAAoBG,QAC3B,MAAOG,GACPL,QAAQI,KAAK,+CAAgDC,GAG7D,IAGE,OAFAN,QAA4B,gCAC5BC,QAAQC,IAAI,4CACLF,EAAoBG,QAC3B,MAAOI,GAEP,OADAN,QAAQG,MAAM,iDAAkDG,GACzD,MAIb,MAAOH,GAEP,OADAH,QAAQG,MAAM,0DAA2DA,GAClE,KA6SHI,GAAyBA,CAACC,EAAYnE,KAE1C,MAMMoE,EAHqBrE,GAAyBC,GAGVvJ,IAAI4N,GAAYxE,EAAcwE,IAGxE,IAAIC,EAAgB,GAGlBA,EAFa,iBAAXtE,EAEc,IAAIH,GAAe0E,KAAK,IAAMnB,KAAKoB,SAAW,IAG9C,IAAIJ,GAAgBG,KAAK,IAAMnB,KAAKoB,SAAW,IAIjE,MACMC,EAAcN,EAAa,EAC3BO,EAAiBD,EAFH,EAKyB,EAApBH,EAAcpB,OAxBnB,EAyBGwB,GACrBf,QAAQI,KAAK,6GAIf,MAAMY,EAAcvB,KAAKC,IAAIuB,EAAiBxB,KAAKyB,MAAMH,EAAiBJ,EAAcpB,SAGlF4B,EAAY,GAsClB,OApCAR,EAAcS,QAAQ,CAACC,EAAMC,KAE3B,MAAMC,EAlBY,EAkBkBD,EAAQN,EAEtCQ,EAAa/B,KAAKgC,IAAIX,EAAaS,EAAeP,EAAc,GAGtE,GAAc,IAAVM,EAEFH,EAAUE,GAAQE,EAAe9B,KAAKyB,MAAMzB,KAAKoB,UAAYW,EAAaD,EAAe,QACpF,CAEL,MAAMG,EAAWf,EAAcW,EAAQ,GAIjCK,EAHeR,EAAUO,GAhDf,EAuDdP,EAAUE,GADRM,EAAmBH,EACHG,EAGAA,EAAmBlC,KAAKyB,MAAMzB,KAAKoB,UAAYW,EAAaG,EAAmB,OAOvGzF,EAAckF,QAAQC,IACfF,EAAUE,KACbF,EAAUE,GAAqB,EAAbb,KAIfW,GA+iBH/B,GAAsBS,UAC1B,IAAKxF,EAAc,OAEnB,MAAMgC,EAAShC,EAAa3G,SAGAkM,KAG5B,GAAIhE,EAAiB2D,OAAS,GAC1BzD,EAAqB8F,SAASnH,IAC9BuB,EAAoB,EAAG,CAGzB,MAAM6F,EAAcpC,KAAKyB,MAAMzB,KAAKoB,SAAWjF,EAAiB2D,QAC1DuC,EAAclG,EAAiBiG,GAG/BE,EAAc,IAAInG,GAaxB,OAZAmG,EAAYC,OAAOH,EAAa,GAChChG,EAAoBkG,GAGpB3H,EAAiB,CAAE6H,KAAMH,EAAYG,OAGrChG,EAAqBiG,GAAQA,EAAO,QAGpCxH,EAAkBwH,GAAQA,EAAO,GAUnC,GAJgCzH,EAAiBsC,GAAqBV,IA5oC9B,GAgpCd5B,EAAiB0H,GAA0B,CAEnE,MAGM1B,EAHqBrE,GAAyBC,GAGVvJ,IAAI4N,GAAYxE,EAAcwE,IAGlE0B,EAA0B,iBAAX/F,EAA4BH,EAAgBuE,EAGjE,IAAI4B,EAAiB,KACjBC,EAAmBC,IAEvB,IAAK,MAAM7B,KAAY0B,EAAc,CACnC,MAAMI,EAAe/F,GAAkBJ,GAAQqE,IAG1CpE,GAAiBD,GAAQqE,IAAajG,GAAkB+H,GAAgBA,EAAeF,IAC1FD,EAAiB3B,EACjB4B,EAAmBE,GAKvB,GAAIH,EAEF,WAvhBoBxC,WACxB,IAAKxF,EAAc,OACnB,MAAMgC,EAAShC,EAAa3G,GAGtB+O,QAAsB7C,KAG5B,IAAK6C,EAAcnM,eAAiBmM,EAAcnM,aAAaoK,GAI7D,OAHAV,QAAQG,MAAMxM,EAAE8E,YAAYQ,mBAAmByJ,QAAQ,SAAUhC,SAEjEiC,KAKF,IAAIC,EAAaH,EAAcnM,aAAaoK,GAAUuB,KAGtD,OAAQvB,GACN,IAAK,UAEH,IAAImC,EACJ,GACEA,EAAqBpD,KAAKyB,MAAMzB,KAAKoB,SAAWhH,EAAQ0F,cACjDsD,IAAuB5I,GAEhC6C,GAAqBjD,EAAQgJ,IAG7BD,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQgJ,IACrD,MAEF,IAAK,cACL,IAAK,WACL,IAAK,gBACL,IAAK,iBACL,IAAK,gBACL,IAAK,WAQH,GANA/F,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGpC,mBAAbyG,EAA+B,CACjC,MAAMoC,EAAWrD,KAAKoB,SAAW,GACjCrC,GAAwBsE,EAAW,SAAW,UAC9CxE,GAAuB,UAEzB,MAEF,IAAK,cAEH,MAAMyE,EAAgBC,MAAMC,KAAK,CAAE1D,OAAQ1F,EAAQ0F,QAAU,CAAC2D,EAAGC,IAAMA,GAGjEC,EAAe,CAACnJ,GAEhBoJ,EADmBN,EAAcO,OAAOC,GAAOA,IAAQtJ,GAClB2G,KAAK,IAAMnB,KAAKoB,SAAW,IAGtEjD,GAAoB,IAAIwF,KAAiBC,IAGzCnF,GAAkB,YAClBJ,GAA0B,MAC1BE,GAAoB,MAGpB,IAAIwF,EAAY,GACZC,EAAW,GAEXhB,EAAciB,gBAEZjB,EAAciB,cAAc9M,OAAS6L,EAAciB,cAAc9M,MAAMyF,GACzEmH,EAAY,IAAIf,EAAciB,cAAc9M,MAAMyF,IAG3CoG,EAAciB,cAAc9M,QACnC4M,EAAY,IAAIf,EAAciB,cAAc9M,QAG1C6L,EAAciB,cAAc7M,MAAQ4L,EAAciB,cAAc7M,KAAKwF,GACvEoH,EAAW,IAAIhB,EAAciB,cAAc7M,KAAKwF,IAGzCoG,EAAciB,cAAc7M,OACnC4M,EAAW,IAAIhB,EAAciB,cAAc7M,OAI9B,iBAAXwF,IACFmH,EAAY,GACZC,EAAW,GAEPhB,EAAciB,cAAc9M,QAC1B6L,EAAciB,cAAc9M,MAAM4E,OAAOgI,EAAUG,QAAQlB,EAAciB,cAAc9M,MAAM4E,OAC7FiH,EAAciB,cAAc9M,MAAMyE,SAASmI,EAAUG,QAAQlB,EAAciB,cAAc9M,MAAMyE,SAC/FoH,EAAciB,cAAc9M,MAAM0E,UAAUkI,EAAUG,QAAQlB,EAAciB,cAAc9M,MAAM0E,UAChGmH,EAAciB,cAAc9M,MAAM2E,QAAQiI,EAAUG,QAAQlB,EAAciB,cAAc9M,MAAM2E,SAGhGkH,EAAciB,cAAc7M,OAC1B4L,EAAciB,cAAc7M,KAAK2E,OAAOiI,EAASE,QAAQlB,EAAciB,cAAc7M,KAAK2E,OAC1FiH,EAAciB,cAAc7M,KAAKwE,SAASoI,EAASE,QAAQlB,EAAciB,cAAc7M,KAAKwE,SAC5FoH,EAAciB,cAAc7M,KAAKyE,UAAUmI,EAASE,QAAQlB,EAAciB,cAAc7M,KAAKyE,UAC7FmH,EAAciB,cAAc7M,KAAK0E,QAAQkI,EAASE,QAAQlB,EAAciB,cAAc7M,KAAK0E,SAIxE,IAArBiI,EAAUjE,QAAgBkD,EAAciB,cAAc9M,QACxD4M,EAAY,IAAIf,EAAciB,cAAc9M,QAEtB,IAApB6M,EAASlE,QAAgBkD,EAAciB,cAAc7M,OACvD4M,EAAW,IAAIhB,EAAciB,cAAc7M,QAK/CuH,GAAwB,CACtBxH,MAAO4M,EAAU5C,KAAK,IAAMnB,KAAKoB,SAAW,IAC5ChK,KAAM4M,EAAS7C,KAAK,IAAMnB,KAAKoB,SAAW,OAK9C/D,GAAqBjD,EAAQI,IAG7B2I,EAAajP,EAAEuF,eAAewJ,QAAQ,WAAY7I,EAAQI,IAC1D,MAEF,IAAK,iBAEH6C,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGrD,IAAI2J,EAA0B,GAG9B,GAAInB,EAAcxL,gBAAkBwL,EAAcxL,eAAeoF,IAC7DoG,EAAcxL,eAAeoF,GAAQkD,OAAS,EAChDqE,EAA0BnB,EAAcxL,eAAeoF,QAGpD,GAAe,iBAAXA,EAA2B,CAElC,MAAMwH,EAAe,GACjBpB,EAAcxL,iBACZwL,EAAcxL,eAAeuE,OAAOqI,EAAaF,QAAQlB,EAAcxL,eAAeuE,OACtFiH,EAAcxL,eAAeoE,SAASwI,EAAaF,QAAQlB,EAAcxL,eAAeoE,SACxFoH,EAAcxL,eAAeqE,UAAUuI,EAAaF,QAAQlB,EAAcxL,eAAeqE,UACzFmH,EAAcxL,eAAesE,QAAQsI,EAAaF,QAAQlB,EAAcxL,eAAesE,SAE7FqI,EAA0BC,EAAatE,OAAS,EAAIsE,EAAgBpB,EAAcxL,gBAAkB,QAG7FwL,EAAcxL,gBAAkBwL,EAAcxL,eAAesI,OAAS,IAC7EqE,EAA0BnB,EAAcxL,gBAI1C,GAAI2M,EAAwBrE,OAAS,EAAG,CACtC,MACMuE,EAAWF,EADGnE,KAAKyB,MAAMzB,KAAKoB,SAAW+C,EAAwBrE,SACjB0C,KAGtDvD,GAAyBoF,GAGzBlB,GAAc,OAASkB,EAEzB,MAEF,IAAK,UAQH,GANAhH,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGjDwI,EAAcnM,aAAaoK,GAAUqD,OAAStB,EAAcnM,aAAaoK,GAAUqD,MAAMxE,OAAS,EAAG,CACvG,MAAMwE,EAAQtB,EAAcnM,aAAaoK,GAAUqD,MAE7CC,EAAeD,EADGtE,KAAKyB,MAAMzB,KAAKoB,SAAWkD,EAAMxE,SAIzDqD,EAAaA,EAAWF,QAAQ,cAAesB,QAG/CpB,EAAaA,EAAWF,QAAQ,cAAe,8BAEjD,MAEF,IAAK,kBAQH,GANA5F,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGjDwI,EAAcnM,cAAgBmM,EAAcnM,aAAaa,gBAAiB,CAC5E,IAAI8M,EAAa,GAEjB,GAAe,YAAX5H,GAAwBoG,EAAcnM,aAAaa,gBAAgBkE,QACrE4I,EAAaxB,EAAcnM,aAAaa,gBAAgBkE,aACnD,GAAe,UAAXgB,GAAsBoG,EAAcnM,aAAaa,gBAAgBqE,MAC1EyI,EAAaxB,EAAcnM,aAAaa,gBAAgBqE,WACnD,GAAe,iBAAXa,EAA2B,CAEpC,MAAM6H,EAAgB,GAClBzB,EAAcnM,aAAaa,gBAAgBkE,SAC7C6I,EAAcP,QAAQlB,EAAcnM,aAAaa,gBAAgBkE,SAC/DoH,EAAcnM,aAAaa,gBAAgBqE,OAC7C0I,EAAcP,QAAQlB,EAAcnM,aAAaa,gBAAgBqE,OAEnEyI,EAAaC,EAGf,GAAID,GAAcA,EAAW1E,OAAS,EAAG,CAMvCqD,GAAc,OAHIqB,EADExE,KAAKyB,MAAMzB,KAAKoB,SAAWoD,EAAW1E,UAO9D,MAEF,IAAK,iBAQH,GANAzC,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGjDwI,EAAcnM,cAAgBmM,EAAcnM,aAAac,eAAgB,CAC3E,IAAI6M,EAAa,GAEjB,GAAe,YAAX5H,GAAwBoG,EAAcnM,aAAac,eAAeiE,QACpE4I,EAAaxB,EAAcnM,aAAac,eAAeiE,aAClD,GAAe,aAAXgB,GAAyBoG,EAAcnM,aAAac,eAAekE,SAC5E2I,EAAaxB,EAAcnM,aAAac,eAAekE,cAClD,GAAe,UAAXe,GAAsBoG,EAAcnM,aAAac,eAAeoE,MACzEyI,EAAaxB,EAAcnM,aAAac,eAAeoE,WAClD,GAAe,iBAAXa,EAA2B,CAEpC,MAAM6H,EAAgB,GAClBzB,EAAcnM,aAAac,eAAeiE,SAC5C6I,EAAcP,QAAQlB,EAAcnM,aAAac,eAAeiE,SAC9DoH,EAAcnM,aAAac,eAAekE,UAC5C4I,EAAcP,QAAQlB,EAAcnM,aAAac,eAAekE,UAC9DmH,EAAcnM,aAAac,eAAeoE,OAC5C0I,EAAcP,QAAQlB,EAAcnM,aAAac,eAAeoE,OAElEyI,EAAaC,EAGf,GAAID,GAAcA,EAAW1E,OAAS,EAAG,CAMvCqD,GAAc,OAHIqB,EADExE,KAAKyB,MAAMzB,KAAKoB,SAAWoD,EAAW1E,UAO9D,MAEF,IAAK,kBAQH,GANAzC,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGjDwI,EAAcnM,cAAgBmM,EAAcnM,aAAae,gBAAiB,CAC5E,IAAI4M,EAAa,GAEjB,GAAe,YAAX5H,GAAwBoG,EAAcnM,aAAae,gBAAgBgE,QACrE4I,EAAaxB,EAAcnM,aAAae,gBAAgBgE,aACnD,GAAe,aAAXgB,GAAyBoG,EAAcnM,aAAae,gBAAgBiE,SAC7E2I,EAAaxB,EAAcnM,aAAae,gBAAgBiE,cACnD,GAAe,UAAXe,GAAsBoG,EAAcnM,aAAae,gBAAgBmE,MAC1EyI,EAAaxB,EAAcnM,aAAae,gBAAgBmE,WACnD,GAAe,iBAAXa,EAA2B,CAEpC,MAAM6H,EAAgB,GAClBzB,EAAcnM,aAAae,gBAAgBgE,SAC7C6I,EAAcP,QAAQlB,EAAcnM,aAAae,gBAAgBgE,SAC/DoH,EAAcnM,aAAae,gBAAgBiE,UAC7C4I,EAAcP,QAAQlB,EAAcnM,aAAae,gBAAgBiE,UAC/DmH,EAAcnM,aAAae,gBAAgBmE,OAC7C0I,EAAcP,QAAQlB,EAAcnM,aAAae,gBAAgBmE,OAEnEyI,EAAaC,EAGf,GAAID,GAAcA,EAAW1E,OAAS,EAAG,CAMvCqD,GAAc,OAHIqB,EADExE,KAAKyB,MAAMzB,KAAKoB,SAAWoD,EAAW1E,UAO9D,MAEF,IAAK,kBAQH,GANAzC,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGjDwI,EAAcnM,cAAgBmM,EAAcnM,aAAagB,gBAAiB,CAC5E,IAAI2M,EAAa,GAEjB,GAAe,YAAX5H,GAAwBoG,EAAcnM,aAAagB,gBAAgB+D,QACrE4I,EAAaxB,EAAcnM,aAAagB,gBAAgB+D,aACnD,GAAe,aAAXgB,GAAyBoG,EAAcnM,aAAagB,gBAAgBgE,SAC7E2I,EAAaxB,EAAcnM,aAAagB,gBAAgBgE,cACnD,GAAe,UAAXe,GAAsBoG,EAAcnM,aAAagB,gBAAgBkE,MAC1EyI,EAAaxB,EAAcnM,aAAagB,gBAAgBkE,WACnD,GAAe,iBAAXa,EAA2B,CAEpC,MAAM6H,EAAgB,GAClBzB,EAAcnM,aAAagB,gBAAgB+D,SAC7C6I,EAAcP,QAAQlB,EAAcnM,aAAagB,gBAAgB+D,SAC/DoH,EAAcnM,aAAagB,gBAAgBgE,UAC7C4I,EAAcP,QAAQlB,EAAcnM,aAAagB,gBAAgBgE,UAC/DmH,EAAcnM,aAAagB,gBAAgBkE,OAC7C0I,EAAcP,QAAQlB,EAAcnM,aAAagB,gBAAgBkE,OAEnEyI,EAAaC,EAGf,GAAID,GAAcA,EAAW1E,OAAS,EAAG,CAMvCqD,GAAc,OAHIqB,EADExE,KAAKyB,MAAMzB,KAAKoB,SAAWoD,EAAW1E,UAO9D,MAEF,IAAK,mBAEHzC,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGrD,IAAIkK,EAA4B,GAGhC,GAAI1B,EAAcnM,cAAgBmM,EAAcnM,aAAakB,iBAC3D,GAAIiL,EAAcnM,aAAakB,iBAAiB6E,IAC5CoG,EAAcnM,aAAakB,iBAAiB6E,GAAQkD,OAAS,EAC/D4E,EAA4B1B,EAAcnM,aAAakB,iBAAiB6E,QAGrE,GAAe,iBAAXA,EAA2B,CAClC,MAAMwH,EAAe,GACjBpB,EAAcnM,aAAakB,iBAAiBgE,OAC9CqI,EAAaF,QAAQlB,EAAcnM,aAAakB,iBAAiBgE,OAC/DiH,EAAcnM,aAAakB,iBAAiB6D,SAC9CwI,EAAaF,QAAQlB,EAAcnM,aAAakB,iBAAiB6D,SAC/DoH,EAAcnM,aAAakB,iBAAiB8D,UAC9CuI,EAAaF,QAAQlB,EAAcnM,aAAakB,iBAAiB8D,UAC/DmH,EAAcnM,aAAakB,iBAAiB+D,QAC9CsI,EAAaF,QAAQlB,EAAcnM,aAAakB,iBAAiB+D,QAEnE4I,EAA4BN,OAGrBpB,EAAcnM,aAAakB,iBAAiB4M,SAC5C3B,EAAcnM,aAAakB,iBAAiB4M,QAAQ7E,OAAS,IACpE4E,EAA4B1B,EAAcnM,aAAakB,iBAAiB4M,SAK5E,GAAID,EAA0B5E,OAAS,EAAG,CAKxCqD,GAAc,OAHGuB,EADG1E,KAAKyB,MAAMzB,KAAKoB,SAAWsD,EAA0B5E,SAM3E,MAEF,IAAK,YAEHzC,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAGrD,MAAMoK,EAAe5E,KAAKyB,MAAsB,EAAhBzB,KAAKoB,UAAgB,EAGrD+B,EAAaA,EAAWF,QAAQ,WAAY2B,GAG5C,MAAMC,EAAmB,IAAI3J,GAC7Bd,EAAQuH,QAAQmD,IACdD,EAAiBC,IAAWD,EAAiBC,IAAW,GAAKF,IAE/DzJ,EAAmB0J,GACnB,MAEF,IAAK,WAQH,IAAIE,EANJ1H,GAAqBjD,EAAQI,IAG7B2I,EAAaA,EAAWF,QAAQ,YAAa7I,EAAQI,IAIrD,GACEuK,EAAgB/E,KAAKyB,MAAMzB,KAAKoB,SAAWhH,EAAQ0F,cAC5CiF,IAAkBvK,GAG3B2I,EAAaA,EAAWF,QAAQ,cAAe7I,EAAQ2K,IAK3D5H,GAAqB8D,GAGrBnE,GAAoB2F,IAAI,IACnBA,EACH,CAAC7F,GAAS,IACL6F,EAAK7F,GACR,CAACqE,IAAW,MAKhBtG,EAAiB,CAAE6H,KAAMW,IAGzB5F,GAAwBkF,IAAI,IACvBA,EACH,CAAC7F,GAAS5B,MAsERgK,CAAkBpC,GAKtB,MAAMqC,EAAcvJ,EAAgBkB,GACpC,IAAIiF,EAAQ5F,EAAmBW,GAG/B,IAAKqI,GAAsC,IAAvBA,EAAYnF,OAAc,CAI5C,GAHAS,QAAQC,IAAItM,EAAE8E,YAAYO,iBAGX,iBAAXqD,EAA2B,CAE7B,MAAMsI,EAAgB,CACpB,CAAE1C,KAAMtO,EAAEsE,mBACV,CAAEgK,KAAMtO,EAAEsE,mBACV,CAAEgK,KAAMtO,EAAEsE,oBAGZ,GAAI0M,EAAcpF,OAAS,EAAG,CAC5B,MAAMsC,EAAcpC,KAAKyB,MAAMzB,KAAKoB,SAAW8D,EAAcpF,QAC7DnF,EAAiB,CAAE6H,KAAM0C,EAAc9C,GAAaI,YAEpD7H,EAAiB,CAAE6H,KAAMtO,EAAEsE,yBAK7BmC,EAAiB,CAAE6H,KAAMtO,EAAEsE,oBAM7B,YAFAyC,EAAkBwH,GAAQA,EAAO,GAMnC,IAAI0C,EAAgBtD,EAAQoD,EAAYnF,OAGxC,GAAuB,OAAnBhF,EAAyB,CAE3B,IAAIsK,EAAW,EACXC,EAAaJ,EAAYE,GAAe3C,KAE5C,KAAO6C,IAAevK,GAAkBsK,EAAW,GAAKH,EAAYnF,OAAS,GAE3E+B,GAASA,EAAQ,GAAKoD,EAAYnF,OAClCqF,EAAgBtD,EAChBwD,EAAaJ,EAAYE,GAAe3C,KACxC4C,IAIED,IAAkBlJ,EAAmBW,IACvCV,EAAsBuG,IAAI,IACrBA,EACH,CAAC7F,GAASuI,KAMhB,IAAIhC,EAAa8B,EAAYE,GAAe3C,KAGhD,GAAIW,EAAWhB,SAAS,aAAc,CAEpC,MAAMmD,EAAgBlL,EAAQI,GAG9B,IAAI+K,EAAenL,EAAQyJ,OAAOiB,GAAUA,IAAWQ,GAEvD,GAAIC,EAAazF,OAAS,EAAG,CAE3B,MACM0F,EAAmBD,EADCvF,KAAKyB,MAAMzB,KAAKoB,SAAWmE,EAAazF,SAIlEqD,EAAaA,EAAWF,QAAQ,aAAcuC,QAG9CrC,EAAaA,EAAWF,QAAQ,aAAc,iBAK9C,GAAIE,EAAWhB,SAAS,KAAM,CAG5B,MAAMsD,EAAuB,oCACvBC,EAAQvC,EAAWuC,MAAMD,GAE/B,GAAIC,EAAO,CACT,MAAMd,EAAec,EAAM,GAGrBC,EAAoBzR,EAAEuE,oBAAoBC,UAC9CsH,KAAKyB,MAAMzB,KAAKoB,SAAWlN,EAAEuE,oBAAoBC,UAAUoH,SAC3DmD,QAAQ,UAAW2B,GAGrBzB,EAAaA,EAAWF,QAAQ,sCAAoC0C,QAInE,CACH,MAAMC,EAAe,yDACfF,EAAQvC,EAAWuC,MAAME,GAE/B,GAAIF,EAAO,CACT,MAAMd,EAAec,EAAM,GAGrBG,EAAY3R,EAAEuE,oBAAoBE,WACtCqH,KAAKyB,MAAMzB,KAAKoB,SAAWlN,EAAEuE,oBAAoBE,WAAWmH,SAC5DmD,QAAQ,UAAW2B,GAGrBzB,EAAaA,EAAWF,QAAQ2C,EAAc,IAAIC,IAKtD9K,EAAkBkK,EAAYE,GAAe3C,MAG7C7H,EAAiB,CAAE6H,KAAMW,IAGzBlI,EAAkBwH,GAAQA,EAAO,IAuB7BS,GAAW,WAAiC,IAAhC4C,EAAkBC,UAAAjG,OAAA,QAAAkG,IAAAD,UAAA,IAAAA,UAAA,GAClC,MAAMnJ,EAAShC,EAAa3G,GAG5B,GAAI+G,GAAkB0H,GAOpB,OALA/E,IAAqB,GACrByB,aAAaQ,QAAQ,oBAAqB,aAG1CzF,EAAa,eAaf,GARK+C,KAAqB4I,GACxB5J,EAAsBuG,IAAI,IACrBA,EACH,CAAC7F,GAAS6F,EAAK7F,GAAU,KAKzBxC,EAAQ0F,QAAU,EACpBJ,WAAW,KACTC,MACC,QAHL,CASA,IAAKzC,IAAqB4I,EAAoB,CAE5C,IAAIG,EACJ,GACEA,EAAkBjG,KAAKyB,MAAMzB,KAAKoB,SAAWhH,EAAQ0F,cAC9CmG,IAAoBzL,GAE7BC,EAAsBwL,GAIxBvG,WAAW,KACTC,MACC,MA4CCuG,GAAYA,KAChB/L,EAAa,WACbE,EAAW,IACXE,EAAgB,CAAC,CAAEtG,GAAI,EAAGsC,KAAM,MAChCkE,EAAsB,GACtBE,EAAiB,MACjBE,EAAgB,MAChBE,EAAkB,MAClBE,EAAkB,GAGlBE,EAAmB,IAGnBgC,GAAqB,MACrBE,GAAqB,MACrB4B,GAAyB,MAGzB,MAAMkH,EAAiB,GACjBC,EAAkB,GAGxBlS,EAAEyC,MAAMgL,QAAQ0E,IACdF,EAAeE,EAAKpS,IAAMwI,EAAc6J,OAAO,CAACC,EAAK3E,KACnD2E,EAAI3E,IAAQ,EACL2E,GACN,IAEHH,EAAgBC,EAAKpS,IAAMwI,EAAc6J,OAAO,CAACC,EAAK3E,EAAMC,KAqB1D0E,EAAI3E,GAnBqB,CACvB9K,QAAS,GACTC,YAAa,GACbC,SAAU,GACVC,YAAa,GACbK,cAAe,GACfC,eAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfsF,QAAS,EACTrF,gBAAiB,GACjBC,eAAgB,GAChBC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,iBAAkB,GAClBC,UAAW,GACXC,SAAU,IAEiB2J,IAAS,GAAc,GAARC,EACrC0E,GACN,MAGLzJ,GAAoBqJ,GACpBlJ,GAAqBmJ,GAGrB3I,GAAY,IAGZF,GAAwB,CACtB3B,QAAS,EACTC,SAAU,EACVC,OAAQ,EACRC,MAAO,EACPC,aAAc,IAIhBmC,GAAoB,IACpBE,GAA0B,MAC1BE,GAAoB,MACpBE,GAAkB,MAGlBI,GAAuB,MACvBE,GAAwB,MAGxB3C,EAAoB,IACpBE,EAAwB,IACxBE,EAAqB,IA+DvB,MAAO,CAELkG,qBAv6D2B,GAw6D3B8D,kCApjDwC,EAujDxCzM,WACA7F,IACAgG,YACAE,UACAE,eACAE,qBACAE,gBACAE,eACAQ,YACAE,kBACAE,mBACA0B,qBACAE,qBACAI,YACAE,qBACAE,WACAE,yBACAE,uBACAE,oBACAE,0BACAE,oBACAE,kBACAI,uBACAE,wBACA5D,kBACA8D,yBAGAyH,eAvhDsBC,IACtB,GAAInS,EAAamS,KACf1M,EAAY0M,GACZtH,aAAaQ,QAAQ,WAAY8G,GAG7B9L,GAAgBY,GAAoB,GAAG,CAEzC,MAAMoB,EAAShC,EAAa3G,GACtB0S,EAAWpS,EAAamS,GAAa/P,MACrCiQ,EAAeD,EAASE,UAAUR,GAAQA,EAAKpS,KAAO2I,GAExDgK,GAAgB,IAClBnL,EAAoBmL,GACpB/L,EAAgB8L,EAASC,OA0gD/BE,qBAngD2BA,KAC3B3M,EAAa,sBAmgDb4M,iBA//CuBA,KAGrB5M,EADEuD,KAAsBE,GACX,UAEA,gBA2/CfiC,kBACAmH,iBA7+CuBA,CAAC/S,EAAIsC,KAC5BgE,EACED,EAAajH,IAAI4T,GACfA,EAAMhT,KAAOA,EAAK,IAAKgT,EAAO1Q,QAAS0Q,KA2+C3CC,kBAr+CyBjT,IACrBqG,EAAawF,OAAS,GACxBvF,EAAgBD,EAAauJ,OAAOoD,GAASA,EAAMhT,KAAOA,KAo+C5DkT,UA/9CgBA,KAEhB,MAAMC,EAAe9M,EAClBuJ,OAAOoD,GAA+B,KAAtBA,EAAM1Q,KAAK8Q,QAC3BhU,IAAI4T,GAASA,EAAM1Q,KAAK8Q,QAE3B,GAAID,EAAatH,OAAS,EAExB,YADAwH,MAAMpT,EAAEuB,uBAIV4E,EAAW+M,GAGX,MAAMG,EAAmB,GACzBH,EAAazF,QAAQmD,IACnByC,EAAiBzC,GAAU,IAE7B3J,EAAmBoM,GAEnBpN,EAAa,kBA48CbqN,eAx8CqBA,CAAC3T,EAAGI,EAAI4N,KAC7B,GAAc,UAAVhO,EAAE4T,IACJ,GAAI5F,IAAUvH,EAAawF,OAAS,EAElCD,SACK,CAEL,MAAM6H,EAAYC,SAASC,eAAe,iBAAgB/F,EAAQ,IAC9D6F,GAAWA,EAAUG,UAi8C7BC,WAl5CiB1H,UACjBvF,EAAgBwL,GAChBhL,GAAa,GAEb,IAEE,MAAM2H,QAAsB7C,KAG5B,IAAK,IAAIuD,EAAI,EAAGA,GAAK,IAAKA,GAAK,GAC7BnI,EAAmBmI,SACb,IAAIhQ,QAAQC,GAAW+L,WAAW/L,EAAS,MAInDsH,EAAkB,GAGlBkC,GAAqB,MACrBE,GAAqB,MACrBwB,GAAuB,MACvBE,GAAwB,MACxBE,GAAyB,MAGzB1B,GAAwBkF,IAAI,IACvBA,EACH,CAAC4D,EAAKpS,IAAK,KAIb,MAAM8T,EAAgBjH,GA5lBG,GA4lB0CuF,EAAKpS,IAwDxE,GArDA6I,GAAoB2F,IAAI,IACnBA,EACH,CAAC4D,EAAKpS,IAAK,CACT6C,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,aAAa,EACbK,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBC,eAAe,EACfsF,SAAS,EACTrF,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,kBAAkB,EAClBC,WAAW,EACXC,UAAU,MAKdgF,GAAqBwF,IAAI,IACpBA,EACH,CAAC4D,EAAKpS,IAAK,CACT6C,QAASiR,EAAcjR,SAAW,GAClCC,YAAagR,EAAchR,aAAe,GAC1CC,SAAU+Q,EAAc/Q,UAAY,GACpCC,YAAa8Q,EAAc9Q,aAAe,GAC1CK,cAAeyQ,EAAczQ,eAAiB,GAC9CC,eAAgBwQ,EAAcxQ,gBAAkB,GAChDC,eAAgBuQ,EAAcvQ,gBAAkB,GAChDC,cAAesQ,EAActQ,eAAiB,GAC9CsF,QAASgL,EAAchL,SAAW,EAClCrF,gBAAiBqQ,EAAcrQ,iBAAmB,GAClDC,eAAgBoQ,EAAcpQ,gBAAkB,GAChDC,gBAAiBmQ,EAAcnQ,iBAAmB,GAClDC,gBAAiBkQ,EAAclQ,iBAAmB,GAClDC,SAAUiQ,EAAcjQ,UAAY,GACpCC,iBAAkBgQ,EAAchQ,kBAAoB,GACpDC,UAAW+P,EAAc/P,WAAa,GACtCC,SAAU8P,EAAc9P,UAAY,OAKpCoO,EAAKpS,MAAmB,OAAZ2G,QAAY,IAAZA,OAAY,EAAZA,EAAc3G,KAC5BwJ,GAAY,IAIVuF,EAAcgF,cAAgBhF,EAAcgF,aAAalI,OAAS,EAAG,CAGvE,MAAMmI,EAAuB,IAAIjF,EAAcgF,cAC5C7G,KAAK,IAAMnB,KAAKoB,SAAW,IAC3B8G,MAAM,EAAG,IAEZ9L,EAAoB6L,GAIpB,MAAMvG,EAAY,GAIZyG,EAAgB,EAEhB7G,EADcoB,GACiByF,EAI/BC,EAAWpI,KAAKyB,MAAMH,EAAiB,GAGvC+G,EAAa,EAGnB,IAAK,IAAI3E,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,MAAM4E,EAAeH,EAAiBzE,EAAI0E,EAIpCG,EAAYvI,KAAKC,IAAI,EAAGD,KAAKgC,IAAIoG,EAAWC,EAAY,IACxDG,EAAexI,KAAKyB,MAAMzB,KAAKoB,SAAWmH,GAEhD7G,EAAUwC,KAAKoE,EAAeE,GAGhClM,EAAwBoF,GACxBlF,EAAqB,GAIvB,GAAgB,iBAAZ6J,EAAKpS,GAAuB,CAE9B,IAAIwU,EAAiB,GACjBC,EAAkB,GAClBC,EAAgB,GAChBC,EAAe,GACfC,EAAqB,GAGrB7F,EAAcpH,SAAWoH,EAAcpH,QAAQkE,OAAS,IAC1D2I,EAAiB,IAAIzF,EAAcpH,UAGjCoH,EAAcnH,UAAYmH,EAAcnH,SAASiE,OAAS,IAC5D4I,EAAkB,IAAI1F,EAAcnH,WAGlCmH,EAAclH,QAAUkH,EAAclH,OAAOgE,OAAS,IACxD6I,EAAgB,IAAI3F,EAAclH,SAGhCkH,EAAcjH,OAASiH,EAAcjH,MAAM+D,OAAS,IACtD8I,EAAe,IAAI5F,EAAcjH,QAI/BiH,EAAcnM,cAEhBzC,OAAO0U,OAAO9F,EAAcnM,cAAc8K,QAAQoH,IACxB,kBAAbA,GAAyBA,EAASvG,MAC3CqG,EAAmB3E,KAAK,CAAE1B,KAAMuG,EAASvG,OAInB,kBAAbuG,IACLA,EAASnN,SAAW2H,MAAMyF,QAAQD,EAASnN,WAC7CiN,EAAqB,IAAIA,KAAuBE,EAASnN,QAAQvI,IAAImP,IAAI,CAAOA,YAE9EuG,EAASlN,UAAY0H,MAAMyF,QAAQD,EAASlN,YAC9CgN,EAAqB,IAAIA,KAAuBE,EAASlN,SAASxI,IAAImP,IAAI,CAAOA,YAE/EuG,EAAShN,OAASwH,MAAMyF,QAAQD,EAAShN,SAC3C8M,EAAqB,IAAIA,KAAuBE,EAAShN,MAAM1I,IAAImP,IAAI,CAAOA,YAE5EuG,EAASzE,OAASf,MAAMyF,QAAQD,EAASzE,SAC3CuE,EAAqB,IAAIA,KAAuBE,EAASzE,MAAMjR,IAAImP,IAAI,CAAOA,YAE5EuG,EAASpE,SAAWpB,MAAMyF,QAAQD,EAASpE,WAC7CkE,EAAqB,IAAIA,KAAuBE,EAASpE,QAAQtR,IAAImP,IAAI,CAAOA,eAQxF,MAAMyG,EAAc,CAClBrN,QAAS,CAAE4G,KAAMtO,EAAEsE,mBACnBqD,SAAU,CAAE2G,KAAMtO,EAAEsE,mBACpBsD,OAAQ,CAAE0G,KAAMtO,EAAEsE,mBAClBuD,MAAO,CAAEyG,KAAMtO,EAAEsE,oBAGfiQ,EAAe3I,OAAS,GAAKmJ,EAAYrN,UAC3C6M,EAAiB,IAAIA,KAAmBQ,EAAYrN,UAGlD8M,EAAgB5I,OAAS,GAAKmJ,EAAYpN,WAC5C6M,EAAkB,IAAIA,KAAoBO,EAAYpN,WAGpD8M,EAAc7I,OAAS,GAAKmJ,EAAYnN,SAC1C6M,EAAgB,IAAIA,KAAkBM,EAAYnN,SAGhD8M,EAAa9I,OAAS,GAAKmJ,EAAYlN,QACzC6M,EAAe,IAAIA,KAAiBK,EAAYlN,QAIlD0M,EAAiBA,EAAetH,KAAK,IAAMnB,KAAKoB,SAAW,IAC3DsH,EAAkBA,EAAgBvH,KAAK,IAAMnB,KAAKoB,SAAW,IAC7DuH,EAAgBA,EAAcxH,KAAK,IAAMnB,KAAKoB,SAAW,IACzDwH,EAAeA,EAAazH,KAAK,IAAMnB,KAAKoB,SAAW,IACvDyH,EAAqBA,EAAmB1H,KAAK,IAAMnB,KAAKoB,SAAW,IAGnE,MAAM8H,EAAiB,GAGjBC,EAAyBV,EAAeP,MAAM,EAAGlI,KAAKgC,IAAIkH,EAAgBT,EAAe3I,SACzFsJ,EAA0BV,EAAgBR,MAAM,EAAGlI,KAAKgC,IAAIkH,EAAgBR,EAAgB5I,SAC5FuJ,EAAwBV,EAAcT,MAAM,EAAGlI,KAAKgC,IAAIkH,EAAgBP,EAAc7I,SACtFwJ,EAAuBV,EAAaV,MAAM,EAAGlI,KAAKgC,IAAIkH,EAAgBN,EAAa9I,SACnFyJ,EAA6BV,EAAmBX,MAAM,EAAGlI,KAAKgC,IAAIkH,EAAgBL,EAAmB/I,SAYrG0J,EATkB,IACnBL,KACAC,KACAC,KACAC,KACAC,GAImCpI,KAAK,IAAMnB,KAAKoB,SAAW,IAEnEb,QAAQC,IAAItM,EAAE8E,YAAYC,mBAC1BsH,QAAQC,IAAItM,EAAE8E,YAAYE,aAAa+J,QAAQ,UAAWkG,EAAuBrJ,SACjFS,QAAQC,IAAItM,EAAE8E,YAAYG,cAAc8J,QAAQ,UAAWmG,EAAwBtJ,SACnFS,QAAQC,IAAItM,EAAE8E,YAAYI,YAAY6J,QAAQ,UAAWoG,EAAsBvJ,SAC/ES,QAAQC,IAAItM,EAAE8E,YAAYK,WAAW4J,QAAQ,UAAWqG,EAAqBxJ,SAC7ES,QAAQC,IAAI,kBAAoB+I,EAA2BzJ,OAAS,WACpES,QAAQC,IAAItM,EAAE8E,YAAYM,WAAW2J,QAAQ,UAAWuG,EAAgB1J,SAGxEnE,EAAmB8G,IAAI,IAClBA,EACHzG,aAAcwN,SAIb,CAEH,MAAMC,EAAuBzG,EAAcqD,EAAKpS,KAAO,GAEvD,GAAIwV,EAAqB3J,OAAS,EAAG,CAEnC,MAAM4J,EAAwB,IAAID,GAC/BtI,KAAK,IAAMnB,KAAKoB,SAAW,IAC3B8G,MAAM,EAAGlI,KAAKC,IAAIyC,IAA0B,KAG/C/G,EAAmB8G,IAAI,IAClBA,EACH,CAAC4D,EAAKpS,IAAKyV,MAMjBxN,EAAsBuG,IAAI,IACrBA,EACH,CAAC4D,EAAKpS,IAAK,KAIb8G,EAAkB,MAGlB,MAAM4O,EAAoB3J,KAAKyB,MAAMzB,KAAKoB,SAAWhH,EAAQ0F,QAC7DrF,EAAsBkP,GAGtBxP,EAAa,WAEb,MAAOuG,GACPH,QAAQG,MAAM,UAAWA,GAC1B,QACCrF,GAAa,KAgnCf6H,YACA0G,yBA/hC+BA,KAC/B,IAAKhP,EAAc,OACnB,MAAMgC,EAAShC,EAAa3G,GAG5B,GAA0B,gBAAtBiJ,GAAqC,CAEvC,GAAIgB,GAAiB4B,OAAS,EAAG,CAC/B,MAAM+J,EAAiB,IAAI3L,IAK3B,GAJA2L,EAAeC,QACf3L,GAAoB0L,GAGhBA,EAAe/J,OAAS,EAAG,CAC7B,MAAMmG,EAAkB4D,EAAe,GAQvC,OAPAxM,GAAqBjD,EAAQ6L,IAC7B5H,GAA0B,MAC1BE,GAAoB,MACpBE,GAAkB,iBAClB9D,EAAiB,CACf6H,KAAMtO,EAAEwF,yBAAyBuJ,QAAQ,WAAY7I,EAAQ6L,OAOnExH,GAAkB,aAIpBlB,GAAwBkF,IAAI,IACvBA,EACH,CAAC7F,GAAS5B,KAIZmC,GAAqB,MACrBE,GAAqB,MACrBc,GAAoB,IACpBE,GAA0B,MAC1BE,GAAoB,MACpBE,GAAkB,MAClBI,GAAuB,MACvBE,GAAwB,MACxBE,GAAyB,MAGzBiE,IAAS,IAg/BT6G,sBA5+B6BC,IAG7B,GAFA3L,GAA0B2L,GAEX,UAAXA,GAAiC,SAAXA,EAAmB,CAE3C,MAAMC,EAAOvL,GAAqBsL,GAClC,GAAIC,GAAQA,EAAKnK,OAAS,EAAG,CAC3B,MACMoK,EAAUD,EADIjK,KAAKyB,MAAMzB,KAAKoB,SAAW6I,EAAKnK,SAEpDvB,GAAoB2L,QAGpB3L,GAA+B,UAAXyL,EAChB,oEACA,6DAED,CAELzL,GAAoB,MAGpB,MAAM4L,EAAU,CACdrF,OAAQ1H,GACRgN,OAAQ,SACR3T,YAAavC,EAAE0E,MAAMG,iBAEvB0E,GAAY,IAAID,GAAU2M,IAI5B1L,GAAkB,cA+8BlB4L,OAlOaA,KACb,OAAQnQ,GACN,IAAK,cACHC,EAAa,WACb,MACF,IAAK,gBACHA,EAAa,eACb,MACF,IAAK,UACHA,EAAa,iBACb,MACF,IAAK,cACHA,EAAa,YACb,MACF,IAAK,WAGDA,EADEuD,KAAsBE,GACX,UAEA,iBAEf,MACF,IAAK,UAGL,IAAK,oBACHzD,EAAa,aAyMjB+L,aACAoE,oBA3G2BC,IAC3BxM,GAAyBwM,IA2GzBC,eAvGqBA,KAChB1M,KAELG,IAAuB,GAGvByB,WAAW,KAET7B,IAAW,GACXuB,aAAaQ,QAAQ,UAAW,QAEhC3B,IAAuB,GACvBF,GAAyB,MAGzB5D,EAAa,gBACZ,OAwFHsQ,kBApFwBA,KACxBrL,aAAasL,WAAW,WACxBtL,aAAasL,WAAW,qBACxB7M,IAAW,GACXF,IAAqB,GACrBuI,MAgFAyE,sBA5E4BA,KAAO,IAADC,EAClC,IAAK1N,KAAsBE,GAAmB,OAAO,KAGrD,GAA0B,gBAAtBF,GAAqC,CACvC,GAAuB,aAAnBsB,GACF,OAAOtK,EAAE2C,aAAaI,YAAYC,SAAS+L,QAAQ,WAAY7F,IAC1D,CACL,MAAMyN,EAAYzM,IAA0B,QAC5C,OAAOlK,EAAE2C,aAAaI,YAAY4T,GAAW5H,QAAQ,WAAY7F,KAKrE,OAAwC,QAAjCwN,EAAA1W,EAAE2C,aAAaqG,WAAkB,IAAA0N,OAAA,EAAjCA,EAAmC3H,QAAQ,WAAY7F,MAAsB,MA+DpF0N,WAlTiBA,KAEjB5H,MAiTA6H,UA7SgBA,KAEhB,MAAMzF,EAAgBlL,EAAQI,GAC9BW,EAAmBsH,IAAI,IAClBA,EACH,CAAC6C,IAAiB7C,EAAK6C,IAAkB,GAAK,KAIhDpC,MAqSA8H,eA7DqBA,IACd5W,OAAO6W,QAAQ/P,GACnBiG,KAAK,CAAA+J,EAAAC,KAAA,IAAE,CAAEC,GAAWF,GAAG,CAAEG,GAAWF,EAAA,OAAKE,EAAaD,IACtD/X,IAAIiY,IAAA,IAAExG,EAAQyG,GAAUD,EAAA,MAAM,CAAExG,SAAQyG,eA2D3CC,QAjPcA,KAEdrR,EAAa,aAkPbsB,sBACAtB,iB,gBClhBWsR,MA39CCC,IACd,MAAM,EAEJxX,EAAC,SACD6F,EAAQ,UAGRG,EAAS,QACTE,EAAO,aACPE,EAAY,mBACZE,EAAkB,cAClBE,EAAa,aACbE,EAAY,UACZQ,EAAS,iBACTI,EAAgB,kBAGhB0B,EAAiB,kBACjBE,EAAiB,SACjBI,EAAQ,iBACRU,EAAgB,uBAChBE,EAAsB,iBACtBE,EAAgB,eAChBE,EAAc,sBAGdQ,EAAqB,kBAGrBtB,EAAiB,QACjBE,EAAO,sBACPE,EAAqB,oBACrBE,EAAmB,gBAGnB9C,EAAe,eAGfuL,EAAc,qBACdK,EAAoB,iBACpBC,EAAgB,eAChBlH,EAAc,iBACdmH,EAAgB,kBAChBE,EAAiB,UACjBC,EAAS,eACTK,EAAc,WACdM,EAAU,SACV5E,EAAQ,yBACR0G,EAAwB,sBACxBG,EAAqB,OACrBM,EAAM,kBACNI,EAAiB,sBACjBE,EAAqB,WAGrBG,EAAU,UACVC,EAAS,eACTC,EAAc,QACdQ,GACEE,EAGJ,OACEC,IAAAC,cAAA,OAAKC,UAAU,iBAEE,YAAd3R,GACCyR,IAAAC,cAAA,OAAKC,UAAU,wBAAwBC,MAAO,CAC5CC,gBAAiB,UACjBnV,MAAO,UACPoV,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRC,QAAS,SAETV,IAAAC,cAAA,OAAKE,MAAO,CACVQ,UAAW,SACXC,SAAU,UAEVZ,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACVC,aAAc,OACdC,WAAY,SACVxY,EAAEO,SACNkX,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACVC,aAAc,OACd7V,MAAO,UACP+V,WAAY,QACVzY,EAAEQ,gBAENiX,IAAAC,cAAA,UACEgB,QAAS7F,EACT+E,MAAO,CACLe,MAAO,OACPd,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,OACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,UACRP,aAAc,SAGfvY,EAAES,aAGLgX,IAAAC,cAAA,UACEgB,QAAS9F,EACTgF,MAAO,CACLe,MAAO,OACPd,gBAAiB,cACjBnV,MAAO,UACPkW,OAAQ,oBACRC,aAAc,OACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGI,OAAbjT,EAAoB,oCACP,OAAbA,EAAoB,mCACP,OAAbA,EAAoB,uCACpB,mCAAe,MAAiB,OAAbA,EAAoB,gBACR,OAAbA,EAAoB,kBACP,OAAbA,EAAoB,oBACpB,qBAIrB4R,IAAAC,cAAA,OAAKE,MAAO,CAAEmB,UAAW,OAAQC,QAAS,KACxCvB,IAAAC,cAAA,UACEgB,QAASnC,EACTqB,MAAO,CACLqB,WAAY,OACZL,OAAQ,iBACRlW,MAAO,OACPyV,QAAS,WACTG,SAAU,OACVO,aAAc,MACdC,OAAQ,YAGT9Y,EAAEe,gBAQE,sBAAdiF,GACCyR,IAAAC,cAAA,OAAKC,UAAU,mCAAmCC,MAAO,CACvDC,gBAAiB,UACjBnV,MAAO,UACPyV,QAAS,aACTL,QAAS,OACTC,cAAe,SACfG,OAAQ,UAERT,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACToB,oBAAqB,gBACrBjB,WAAY,SACZE,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQE,eAAgB,WAC7CP,IAAAC,cAAA,UACEgB,QAASvC,EACTyB,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,QAEZ,WAKHV,IAAAC,cAAA,MAAIE,MAAO,CACTuB,OAAQ,EACRf,UAAW,SACXI,WAAY,SACZF,SAAU,OACVc,cAAe,QAED,OAAbvT,EAAoB,SACP,OAAbA,EAAoB,WACP,OAAbA,EAAoB,SACpB,WAGH4R,IAAAC,cAAA,aAGFD,IAAAC,cAAA,OAAKE,MAAO,CACVyB,KAAM,EACNvB,QAAS,OACTC,cAAe,SACfI,QAAS,SACTI,aAAc,OACde,UAAW,SAEX7B,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTC,cAAe,SACfwB,IAAK,OACLR,UAAW,SAEXtB,IAAAC,cAAA,UACEgB,QAASA,IAAMnG,EAAe,MAC9BqF,MAAO,CACLC,gBAA8B,OAAbhS,EAAoB,UAAY,UACjD+S,OAAQ,OACRC,aAAc,OACdV,QAAS,OACTL,QAAS,OACTC,cAAe,MACfE,WAAY,SACZsB,IAAK,OACLT,OAAQ,YAGVrB,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,SAAU,4BACnCb,IAAAC,cAAA,OAAKE,MAAO,CACVQ,UAAW,OACXiB,KAAM,IAEN5B,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,EACRZ,aAAc,QACb,YAGHd,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,IACP,sBAIS,OAAbtT,GACC4R,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,OAAQ5V,MAAO,YAAa,WAIzD+U,IAAAC,cAAA,UACEgB,QAASA,IAAMnG,EAAe,MAC9BqF,MAAO,CACLC,gBAA8B,OAAbhS,EAAoB,UAAY,UACjD+S,OAAQ,OACRC,aAAc,OACdV,QAAS,OACTL,QAAS,OACTC,cAAe,MACfE,WAAY,SACZsB,IAAK,OACLT,OAAQ,YAGVrB,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,SAAU,4BACnCb,IAAAC,cAAA,OAAKE,MAAO,CACVQ,UAAW,OACXiB,KAAM,IAEN5B,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,EACRZ,aAAc,QACb,WAGHd,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,IACP,oBAIS,OAAbtT,GACC4R,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,OAAQ5V,MAAO,YAAa,WAKzD+U,IAAAC,cAAA,UACEgB,QAASA,IAAMnG,EAAe,MAC9BqF,MAAO,CACLC,gBAA8B,OAAbhS,EAAoB,UAAY,UACjD+S,OAAQ,OACRC,aAAc,OACdV,QAAS,OACTL,QAAS,OACTC,cAAe,MACfE,WAAY,SACZsB,IAAK,OACLT,OAAQ,YAGVrB,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,SAAU,4BACnCb,IAAAC,cAAA,OAAKE,MAAO,CACVQ,UAAW,OACXiB,KAAM,IAEN5B,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,EACRZ,aAAc,QACb,eAGHd,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,IACP,yBAIS,OAAbtT,GACC4R,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,OAAQ5V,MAAO,YAAa,WAKzD+U,IAAAC,cAAA,UACEgB,QAASA,IAAMnG,EAAe,MAC9BqF,MAAO,CACLC,gBAA8B,OAAbhS,EAAoB,UAAY,UACjD+S,OAAQ,OACRC,aAAc,OACdV,QAAS,OACTL,QAAS,OACTC,cAAe,MACfE,WAAY,SACZsB,IAAK,OACLT,OAAQ,YAGVrB,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,SAAU,4BACnCb,IAAAC,cAAA,OAAKE,MAAO,CACVQ,UAAW,OACXiB,KAAM,IAEN5B,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,EACRZ,aAAc,QACb,WAGHd,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,UACPyW,OAAQ,IACP,wBAIS,OAAbtT,GACC4R,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,OAAQ5V,MAAO,YAAa,aAM7D+U,IAAAC,cAAA,OAAKE,MAAO,CACVO,QAAS,IACTqB,SAAU,QACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACP9B,gBAAiB,cACjB+B,OAAQ,KAERnC,IAAAC,cAAA,UACEgB,QAASvC,EACTyB,MAAO,CACLe,MAAO,OACPd,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,IACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGI,OAAbjT,EAAoB,WACP,OAAbA,EAAoB,UACP,OAAbA,EAAoB,YACpB,mBAOM,gBAAdG,GACCyR,IAAAC,cAAA,OAAKC,UAAU,6BAA6BC,MAAO,CACjDC,gBAAiB,UACjBnV,MAAO,UACPyV,QAAS,IACTL,QAAS,OACTC,cAAe,SACfG,OAAQ,UAERT,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACToB,oBAAqB,gBACrBjB,WAAY,SACZE,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQE,eAAgB,WAC7CP,IAAAC,cAAA,UACEgB,QAASvC,EACTyB,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,QAEZ,WAKHV,IAAAC,cAAA,MAAIE,MAAO,CACTuB,OAAQ,EACRf,UAAW,SACXI,WAAY,SACZF,SAAU,OACVc,cAAe,QAEdpZ,EAAEiB,oBAGLwW,IAAAC,cAAA,YAAW,KAGbD,IAAAC,cAAA,OAAKE,MAAO,CACVyB,KAAM,EACNlB,QAAS,IACTL,QAAS,OACTC,cAAe,SACfE,WAAY,SACZ4B,SAAU,OACVtB,aAAc,SAEbnS,EAAajH,IAAI,CAAC4T,EAAOpF,IACxB8J,IAAAC,cAAA,OAAKnE,IAAKR,EAAMhT,GAAI6X,MAAO,CACzBE,QAAS,OACTG,WAAY,SACZsB,IAAK,OACLZ,MAAO,OACPN,SAAU,QACVE,aAAc,OACdJ,QAAS,WAETV,IAAAC,cAAA,SACE3X,GAAI,gBAAgB4N,EACpBmM,KAAK,OACLC,MAAOhH,EAAM1Q,KACb2X,SAAWra,GAAMmT,EAAiBC,EAAMhT,GAAIJ,EAAEsa,OAAOF,OACrDG,WAAava,GAAM2T,EAAe3T,EAAGoT,EAAMhT,GAAI4N,GAC/CwM,YAAana,EAAEqB,uBACfuW,MAAO,CACLyB,KAAM,EACNxB,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,OACdV,QAAS,YACTG,SAAU,UAGdb,IAAAC,cAAA,UACEgB,QAASA,IAAM1F,EAAkBD,EAAMhT,IACvCqa,SAAUhU,EAAawF,QAAU,EACjCgM,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,OACTa,QAAS5S,EAAawF,QAAU,EAAI,GAAM,IAE7C,wBAML6L,IAAAC,cAAA,UACEgB,QAAS/M,EACTyO,SAAUhU,EAAawF,QAAU,GACjCgM,MAAO,CACLuB,OAAQ,eACRtB,gBAAiB,cACjBnV,MAAO,UACPkW,OAAQ,qBACRC,aAAc,OACdV,QAAS,OACTL,QAAS,OACTG,WAAY,SACZD,eAAgB,SAChBuB,IAAK,OACLT,OAAQ,UACRR,SAAU,OACVK,MAAO,UAGTlB,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,SAAU,UAAQ,IAAEtY,EAAEsB,iBAInDmW,IAAAC,cAAA,OAAKE,MAAO,CACV4B,SAAU,QACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACP9B,gBAAiB,gBAEjBJ,IAAAC,cAAA,UACEgB,QAASzF,EACT2E,MAAO,CACLe,MAAO,OACPd,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,IACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,UACRhB,QAAS,OACTG,WAAY,SACZD,eAAgB,SAChBuB,IAAK,SAGP9B,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,SAAU,UAAQ,IAAEtY,EAAEgB,mBAOxC,kBAAdgF,GACCyR,IAAAC,cAAA,OAAKC,UAAU,+BAA+BC,MAAO,CACnDC,gBAAiB,UACjBnV,MAAO,UACPyV,QAAS,IACTL,QAAS,OACTC,cAAe,SACfG,OAAQ,QACRoB,UAAW,SAEX7B,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACToB,oBAAqB,gBACrBjB,WAAY,SACZE,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQE,eAAgB,WAC7CP,IAAAC,cAAA,UACEgB,QAASvC,EACTyB,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,QAEZ,WAKHV,IAAAC,cAAA,MAAIE,MAAO,CACTuB,OAAQ,EACRf,UAAW,SACXI,WAAY,SACZF,SAAU,OACVc,cAAe,QAEdpZ,EAAEkB,kBAGLuW,IAAAC,cAAA,aAGFD,IAAAC,cAAA,OAAKE,MAAO,CACVyB,KAAM,EACNvB,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZE,QAAS,SACTkC,UAAW,QACX9B,aAAc,SAEdd,IAAAC,cAAA,OAAKE,MAAO,CACVe,MAAO,QACPT,OAAQ,OACRmC,UAAW,QACXC,UAAW,OACXzC,gBAAiB7X,EAAEyC,MAAM6E,GAAkB5E,MAC3CmW,aAAc,OACdf,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAChBC,WAAY,SACZE,QAAS,OACTI,aAAc,SAEdd,IAAAC,cAAA,OAAKE,MAAO,CAAEyB,KAAM,EAAGvB,QAAS,OAAQG,WAAY,SAAUD,eAAgB,WAC5EP,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACVE,WAAY,OACZJ,UAAW,SACX1V,MAA2C,YAApC1C,EAAEyC,MAAM6E,GAAkB5E,OACS,YAApC1C,EAAEyC,MAAM6E,GAAkB5E,OACU,YAApC1C,EAAEyC,MAAM6E,GAAkB5E,MAAsB,UAAY,YAEjE1C,EAAEyC,MAAM6E,GAAkBjF,OAI/BoV,IAAAC,cAAA,OAAKE,MAAO,CAAEW,aAAc,SAC1Bd,IAAAC,cAAA,UACEgB,QAASA,IAAM9E,EAAW5T,EAAEyC,MAAM6E,IAClCsQ,MAAO,CACLC,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,OACdV,QAAS,YACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGT9Y,EAAEc,cAIP2W,IAAAC,cAAA,OAAKE,MAAO,CAAEyC,UAAW,OAAQvC,QAAS,OAAQG,WAAY,WAC5DR,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACVF,UAAW,SACX1V,MAA2C,YAApC1C,EAAEyC,MAAM6E,GAAkB5E,MAAsB,UACb,YAApC1C,EAAEyC,MAAM6E,GAAkB5E,MAAsB,wBACZ,YAApC1C,EAAEyC,MAAM6E,GAAkB5E,MAAsB,UAChD,oBAEL1C,EAAEyC,MAAM6E,GAAkB/E,eAKjCkV,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTG,WAAY,SACZsB,IAAK,OACLhB,aAAc,SAEdd,IAAAC,cAAA,UACEgB,QAASA,KAEP,MAAM6B,EAAgC,IAArBjT,EAAyBtH,EAAEyC,MAAMmJ,OAAS,EAAItE,EAAmB,EAClFkQ,EAAMjQ,oBAAoBgT,IAE5B3C,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,SAEZ,UAIDV,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTyB,IAAK,QAEJvZ,EAAEyC,MAAMtD,IAAI,CAACoQ,EAAG5B,IACf8J,IAAAC,cAAA,OACEnE,IAAK5F,EACL+K,QAASA,IAAMlB,EAAMjQ,oBAAoBoG,GACzCiK,MAAO,CACLe,MAAO,OACPT,OAAQ,OACRW,aAAc,MACdhB,gBAAiBlK,IAAUrG,EAAmB,UAAY,UAC1DwR,OAAQ,eAMhBrB,IAAAC,cAAA,UACEgB,QAASA,KAEP,MAAM6B,EAAWjT,IAAqBtH,EAAEyC,MAAMmJ,OAAS,EAAI,EAAItE,EAAmB,EAClFkQ,EAAMjQ,oBAAoBgT,IAE5B3C,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,SAEZ,aASM,YAAdnS,GAA2BU,GAC1B+Q,IAAAC,cAAA,OAAKC,UAAU,wBAAwBC,MAAO,CAC5CC,gBAAiB,UACjBnV,MAAO,UACPyV,QAAS,aACTL,QAAS,OACTC,cAAe,SACfG,OAAQ,UAERT,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACToB,oBAAqB,gBACrBjB,WAAY,SACZE,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQE,eAAgB,WAC7CP,IAAAC,cAAA,UACEgB,QAASvC,EACTyB,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,QAEZ,WAKHV,IAAAC,cAAA,MAAIE,MAAO,CACTuB,OAAQ,EACRf,UAAW,SACXI,WAAY,SACZF,SAAU,OACVc,cAAe,QAEd1S,EAAarE,KAAKmY,eAGrB/C,IAAAC,cAAA,YAAW,KAGbD,IAAAC,cAAA,OAAKE,MAAO,CACVyB,KAAM,EACNvB,QAAS,OACTC,cAAe,SACfI,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACVE,WAAY,OACZJ,UAAW,SACXe,OAAQ,kBAEPnQ,EAAoBhJ,EAAEgE,mBAAmBgF,GAAqB9C,EAAQI,IAGzEmR,IAAAC,cAAA,OAAKE,MAAO,CACVC,gBAAiB,UACjBgB,aAAc,OACdV,QAAS,YACTI,aAAc,OACd8B,UAAW,QACXvC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WAEXzR,GACCiR,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACVG,WAAY,MACZL,UAAW,SACXqC,WAAY,aAEXjU,EAAc8H,MAKlBtF,GAA2C,mBAAtBA,GACpByO,IAAAC,cAAA,KAAGE,MAAO,CACRmB,UAAW,OACXT,SAAU,OACV5V,MAAO,UACP0V,UAAW,WAEV3B,KAKkB,gBAAtBzN,GAA0D,aAAnBsB,GACtCmN,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTC,cAAe,SACfE,WAAY,SACZsB,IAAK,OACLR,UAAW,SAEXtB,IAAAC,cAAA,KAAGE,MAAO,CAAEU,SAAU,OAAQ5V,MAAO,YAClC1C,EAAEkE,iBAAiBC,cAEtBsT,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTyB,IAAK,OACLvB,eAAgB,WAEhBP,IAAAC,cAAA,UACEgB,QAASA,IAAM7C,EAAsB,SACrC+B,MAAO,CACLC,gBAAiB,UACjBnV,MAAO,QACPkW,OAAQ,OACRC,aAAc,MACdV,QAAS,YACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGT9Y,EAAEkE,iBAAiBjB,OAEtBwU,IAAAC,cAAA,UACEgB,QAASA,IAAM7C,EAAsB,QACrC+B,MAAO,CACLC,gBAAiB,UACjBnV,MAAO,QACPkW,OAAQ,OACRC,aAAc,MACdV,QAAS,YACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGT9Y,EAAEkE,iBAAiBhB,MAEtBuU,IAAAC,cAAA,UACEgB,QAASA,IAAM7C,EAAsB,QACrC+B,MAAO,CACLC,gBAAiB,UACjBnV,MAAO,QACPkW,OAAQ,OACRC,aAAc,MACdV,QAAS,YACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGT9Y,EAAEkE,iBAAiBf,QAOL,gBAAtB6F,GAA0D,cAAnBsB,GACtCmN,IAAAC,cAAA,OAAKE,MAAO,CACVmB,UAAW,OACXZ,QAAS,OACTN,gBAA4C,UAA3B3N,EAAqC,YACb,SAA3BA,EAAoC,YACpC,YACd2O,aAAc,OACdT,UAAW,WAEXX,IAAAC,cAAA,MAAIE,MAAO,CACTW,aAAc,OACd7V,MAAkC,UAA3BwH,EAAqC,UACb,SAA3BA,EAAoC,UACpC,YAEwB,UAA3BA,EAAqClK,EAAEkE,iBAAiBjB,MAC9B,SAA3BiH,EAAoClK,EAAEkE,iBAAiBhB,KACvDlD,EAAEkE,iBAAiBf,MAGpBiH,GACCqN,IAAAC,cAAA,KAAGE,MAAO,CAAEU,SAAU,SACnBlO,GAIuB,SAA3BF,GACCuN,IAAAC,cAAA,KAAGE,MAAO,CAAEU,SAAU,OAAQ5V,MAAO,UAAWqW,UAAW,SACxD/Y,EAAEkE,iBAAiBE,oBAQhCqT,IAAAC,cAAA,OAAKE,MAAO,CACVO,QAAS,IACTqB,SAAU,QACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACP9B,gBAAiB,cACjB+B,OAAQ,KAGe,gBAAtB5Q,GAA0D,aAAnBsB,EAEtCmN,IAAAC,cAAA,UACEE,MAAO,CACLe,MAAO,OACPd,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,IACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,cACRE,QAAS,KAGVhZ,EAAEkE,iBAAiBG,cAItBoT,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTa,MAAO,SAEPlB,IAAAC,cAAA,UACEgB,QAASA,KACH1P,EACF0M,IAEAkB,KAGJgB,MAAO,CACLyB,KAAM,EACNxB,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,IACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGT9Y,EAAEY,YAEL6W,IAAAC,cAAA,UACEgB,QAASA,KACH1P,EACF0M,IAEAmB,KAGJe,MAAO,CACLyB,KAAM,EACNxB,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,IACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGT9Y,EAAEa,cASA,gBAAdmF,GACCyR,IAAAC,cAAA,OAAKC,UAAU,4BAA4BC,MAAO,CAChDC,gBAAiB,UACjBnV,MAAO,UACPyV,QAAS,aACTL,QAAS,OACTC,cAAe,SACfG,OAAQ,UAERT,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACToB,oBAAqB,gBACrBjB,WAAY,SACZE,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,YAEAD,IAAAC,cAAA,MAAIE,MAAO,CACTuB,OAAQ,EACRf,UAAW,SACXI,WAAY,OACZF,SAAU,OACVc,cAAe,QAEdpZ,EAAEoB,kBAGLqW,IAAAC,cAAA,aAGFD,IAAAC,cAAA,OAAKE,MAAO,CACVyB,KAAM,EACNvB,QAAS,OACTC,cAAe,SACfI,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACVF,UAAW,SACX1V,MAAO,UACP6V,aAAc,SAEbvY,EAAEiC,qBAGLwV,IAAAC,cAAA,OAAKE,MAAO,CACVC,gBAAiB,UACjBgB,aAAc,OACdV,QAAS,OACTI,aAAc,SAEbzB,IAAiB3X,IAAI,CAACub,EAAM/M,IAC3B8J,IAAAC,cAAA,OAAKnE,IAAK5F,EAAOiK,MAAO,CACtBE,QAAS,OACTE,eAAgB,gBAChBC,WAAY,SACZE,QAAS,YACTwC,aAAchN,EAAQmJ,IAAiBlL,OAAS,EAAI,iBAAmB,SAEvE6L,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTG,WAAY,SACZsB,IAAK,SAEL9B,IAAAC,cAAA,OAAKE,MAAO,CACVe,MAAO,OACPT,OAAQ,OACRW,aAAc,MACdhB,gBAA2B,IAAVlK,EAAc,UAAsB,IAAVA,EAAc,UAAsB,IAAVA,EAAc,UAAY,OAC/FmK,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZO,WAAY,OACZF,SAAU,SAET3K,EAAQ,GAEX8J,IAAAC,cAAA,OAAKE,MAAO,CACVU,SAAU,OACVE,WAAY7K,EAAQ,EAAI,OAAS,WAEhC+M,EAAK9J,SAGV6G,IAAAC,cAAA,OAAKE,MAAO,CACVU,SAAU,OACVE,WAAY,OACZ9V,MAAiB,IAAViL,EAAc,UAAsB,IAAVA,EAAc,UAAsB,IAAVA,EAAc,UAAY,YAEpF+M,EAAKrD,UAAU,IAACI,IAAAC,cAAA,QAAME,MAAO,CAAEU,SAAU,OAAQE,WAAY,SAAUQ,QAAS,KAAQhZ,EAAEkC,oBAMnGuV,IAAAC,cAAA,OAAKE,MAAO,CACVmB,UAAW,OACXX,UAAW,WAEXX,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,UACP6V,aAAc,SAEbvY,EAAEyB,wBAAwBsN,QAAQ,UAAWyI,EAAMhJ,yBAK1DiJ,IAAAC,cAAA,OAAKE,MAAO,CACVO,QAAS,IACTqB,SAAU,QACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACP9B,gBAAiB,cACjB+B,OAAQ,KAERnC,IAAAC,cAAA,UACEgB,QAASpB,EACTM,MAAO,CACLe,MAAO,OACPd,gBAAiB,UACjBnV,MAAO,UACPkW,OAAQ,OACRC,aAAc,IACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQ,YAGT9Y,EAAEmC,kBAOI,aAAd6D,GACCyR,IAAAC,cAAA,OACEC,UAAU,0BACVe,QAASA,KAGLvC,KAKJyB,MAAO,CACLC,gBAAiB,UACjBnV,MAAO,UACPoV,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRC,QAAS,OACTW,OAAQ,YAGVrB,IAAAC,cAAA,OAAKE,MAAO,CACVQ,UAAW,SACXC,SAAU,UAEVZ,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACVC,aAAc,OACdC,WAAY,SAEXxY,EAAEwB,iBAGLiW,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACVC,aAAc,OACd7V,MAAO,UACP+V,WAAY,QAEXzY,EAAEyB,wBAAwBsN,QAAQ,UAAWyI,EAAMhJ,uBAGtDiJ,IAAAC,cAAA,OAAKE,MAAO,CACVe,MAAO,QACPT,OAAQ,QACRiB,OAAQ,cACRyB,UAAW,kCAEXnD,IAAAC,cAAA,OACEmD,IAAKC,IACLC,IAAI,mBACJnD,MAAO,CACLe,MAAO,OACPT,OAAQ,OACR8C,UAAW,UACXrL,OAAQ,8BAKd8H,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,YAEN1C,EAAE0B,qBAAqBqN,QACtB,WACAvF,IAAsBE,EAClB1J,EAAE4B,uBACF5B,EAAE2B,wBAMZ8V,IAAAC,cAAA,SAAOuD,IAAI,QAAQ,2NAWR,YAAdjV,GACCyR,IAAAC,cAAA,OAAKC,UAAU,wBAAwBC,MAAO,CAC5CC,gBAAiB,UACjBnV,MAAO,UACPyV,QAAS,aACTL,QAAS,OACTC,cAAe,SACfG,OAAQ,UAERT,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACToB,oBAAqB,gBACrBjB,WAAY,SACZE,QAAS,SACTI,aAAc,SAEdd,IAAAC,cAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQE,eAAgB,WAC7CP,IAAAC,cAAA,UACEgB,QAASvC,EACTyB,MAAO,CACLqB,WAAY,OACZL,OAAQ,OACRlW,MAAO,UACP4V,SAAU,OACVQ,OAAQ,UACRX,QAAS,QAEZ,WAKHV,IAAAC,cAAA,MAAIE,MAAO,CACTuB,OAAQ,EACRf,UAAW,SACXI,WAAY,SACZF,SAAU,OACVc,cAAe,QAEdpZ,EAAEmB,iBAGLsW,IAAAC,cAAA,YAAW,KAGbD,IAAAC,cAAA,OAAKE,MAAO,CACVyB,KAAM,EACNvB,QAAS,OACTC,cAAe,SACfI,QAAS,WAETV,IAAAC,cAAA,OAAKE,MAAO,CACVC,gBAAiB,UACjBgB,aAAc,OACdV,QAAS,YACTI,aAAc,OACdH,UAAW,WAEXX,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACVE,WAAY,OACZD,aAAc,SAEbvY,EAAE6B,oBAEL4V,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,UACP+V,WAAY,MACZF,aAAc,SAEbvY,EAAE8B,sBAGL2V,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTC,cAAe,SACfwB,IAAK,OACLR,UAAW,SAEV/Y,EAAEoC,eAAejD,IAAIkX,GACpBoB,IAAAC,cAAA,OACEnE,IAAK8C,EAAOtW,GACZ2Y,QAASA,IAAMlB,EAAMpB,oBAAoBC,GACzCuB,MAAO,CACLC,iBAAsC,OAArBjO,QAAqB,IAArBA,OAAqB,EAArBA,EAAuB7J,MAAOsW,EAAOtW,GAAK,YAAc,UACzE6Y,QAA6B,OAArBhP,QAAqB,IAArBA,OAAqB,EAArBA,EAAuB7J,MAAOsW,EAAOtW,GAAK,oBAAsB,wBACxE8Y,aAAc,OACdV,QAAS,OACTL,QAAS,OACTC,cAAe,SACfe,OAAQ,UACRoC,WAAY,aAGdzD,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTE,eAAgB,gBAChBC,WAAY,SACZM,aAAc,SAEdd,IAAAC,cAAA,MAAIE,MAAO,CACTU,SAAU,OACVE,WAAY,SAEXnC,EAAOhU,MAEVoV,IAAAC,cAAA,OAAKE,MAAO,CACVU,SAAU,OACVE,WAAY,OACZ9V,MAAO,YACN,SACC2T,EAAO/T,QAGbmV,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,OACV5V,MAAO,UACP0V,UAAW,SAEV/B,EAAO9T,kBAQpBkV,IAAAC,cAAA,OAAKE,MAAO,CACVO,QAAS,IACTqB,SAAU,QACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACP9B,gBAAiB,cACjB+B,OAAQ,KAERnC,IAAAC,cAAA,UACEgB,QAASlB,EAAMlB,eACf8D,UAAWxQ,GAAyBE,EACpC8N,MAAO,CACLe,MAAO,OACPd,gBAAiBjO,EAAwB,UAAY,UACrDlH,MAAO,UACPkW,OAAQ,OACRC,aAAc,IACdV,QAAS,OACTG,SAAU,OACVE,WAAY,OACZM,OAAQlP,EAAwB,UAAY,cAC5CoP,QAASlP,EAAsB,GAAM,EACrCgO,QAAS,OACTG,WAAY,SACZD,eAAgB,SAChBuB,IAAK,SAGNzP,EAAsB9J,EAAEgC,kBAAoBhC,EAAE+B,kBAOxC,YAAdiE,GAA2BsD,EAASsC,OAAS,GAC5C6L,IAAAC,cAAA,OAAKE,MAAO,CACV4B,SAAU,QACVC,OAAQ,OACRE,MAAO,OACPC,OAAQ,MAERnC,IAAAC,cAAA,UACEgB,QAASA,IAAMtF,MAAM,GAAGpT,EAAE0E,MAAME,qBAAqB0E,EAASqG,OAAOwL,GAAkB,WAAbA,EAAEjF,QAAqB/W,IAAIgc,GAAK,KAAKA,EAAEvK,WAAWuK,EAAE5Y,eAAe6Y,KAAK,SAClJxD,MAAO,CACLC,gBAAiB,UACjBnV,MAAO,QACPkW,OAAQ,OACRC,aAAc,MACdF,MAAO,OACPT,OAAQ,OACRJ,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZK,SAAU,OACV+C,UAAW,6BACXvC,OAAQ,YAGT9Y,EAAE0E,MAAMC,cAMduC,GACCuQ,IAAAC,cAAA,OAAKE,MAAO,CACV4B,SAAU,QACV8B,IAAK,EACL5B,KAAM,EACNC,MAAO,EACPF,OAAQ,EACR5B,gBAAiB,qBACjBC,QAAS,OACTE,eAAgB,SAChBC,WAAY,SACZ2B,OAAQ,MAERnC,IAAAC,cAAA,OAAKE,MAAO,CACVE,QAAS,OACTC,cAAe,SACfE,WAAY,SACZvV,MAAO,YAEP+U,IAAAC,cAAA,OAAKE,MAAO,CACVe,MAAO,OACPT,OAAQ,OACRW,aAAc,MACdD,OAAQ,kCACR2C,eAAgB,UAChBX,UAAW,+BACXrC,aAAc,UAEhBd,IAAAC,cAAA,KAAGE,MAAO,CACRU,SAAU,SACRtY,EAAEwC,gBAENiV,IAAAC,cAAA,SAAOuD,IAAI,QAAQ,2HCx8ChBO,MARSA,KAEtB,MAAMC,EAAY7V,IAGlB,OAAO6R,IAAAC,cAACH,EAAWkE,ICVRC,IAASC,WAAWlI,SAASC,eAAe,SACpDkI,OACHnE,IAAAC,cAACD,IAAMoE,WAAU,KACfpE,IAAAC,cAAC8D,EAAe,S,sCCRpBrb,EAAOC,QAAU,IAA0B,4C","file":"static/js/main.ef387f35.chunk.js","sourcesContent":["var map = {\n\t\"./backupActions_en\": [\n\t\t6,\n\t\t0\n\t],\n\t\"./backupActions_en.json\": [\n\t\t6,\n\t\t0\n\t],\n\t\"./backupActions_fr\": [\n\t\t8,\n\t\t2\n\t],\n\t\"./backupActions_fr.json\": [\n\t\t8,\n\t\t2\n\t],\n\t\"./backupActions_it\": [\n\t\t7,\n\t\t1\n\t],\n\t\"./backupActions_it.json\": [\n\t\t7,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 18;\nmodule.exports = webpackAsyncContext;","// translations.js - File che contiene tutte le traduzioni per l'app\r\n\r\nconst translations = {\r\n  it: {\r\n    // Testi generali dell'app\r\n    appName: \"FRIENZ\",\r\n    appDescription: \"Questo club è gestito da un AI. Lei formulerà domande sempre nuove e inaspettate.\",\r\n    \r\n    // Pulsanti e azioni comuni\r\n    startButton: \"INIZIA\",\r\n    backButton: \"Indietro\",\r\n    nextButton: \"NEXT\",\r\n    doneButton: \"FATTO\", // NUOVO: Pulsante per completare l'azione\r\n    payButton: \"PAGA\", // NUOVO: Pulsante per pagare la penalità\r\n    enterButton: \"ENTRA\",\r\n    resetButton: \"Reset (Solo Test)\",\r\n    startGameButton: \"START\",\r\n    \r\n    // Titoli delle schermate\r\n    playersScreenTitle: \"PLAYERS\",\r\n    roomsScreenTitle: \"ROOMS\",\r\n    unlockGameTitle: \"SBLOCCA IL GIOCO\",\r\n    leaderboardTitle: \"CLASSIFICA\", // NUOVO: Titolo per la schermata di classifica\r\n    \r\n    // Placeholder e label\r\n    playerInputPlaceholder: \"Enter player name\",\r\n    addPlayerLabel: \"Add Player\",\r\n    \r\n    // Messaggi\r\n    notEnoughPlayersError: \"Inserisci almeno 2 giocatori per iniziare!\",\r\n    gameOverMessage: \"PARTITA FINITA!\",\r\n    actionsCompletedMessage: \"Avete completato {count} azioni!\",\r\n    tapToContinueMessage: \"Tocca per {action}\",\r\n    returnToRoomsMessage: \"tornare alla selezione delle stanze\",\r\n    unlockMoreGamesMessage: \"sbloccare altre partite\",\r\n    \r\n    // Schermata paywall\r\n    freeGameEndedTitle: \"Partita gratuita terminata!\",\r\n    freeGameEndedMessage: \"Hai utilizzato la tua partita gratuita. Sblocca l'app per giocare illimitatamente con tutti i tuoi amici!\",\r\n    purchaseButton: \"ACQUISTA\",\r\n    processingPayment: \"ELABORAZIONE...\",\r\n    \r\n    // NUOVO: Schermata di classifica (leaderboard)\r\n    leaderboardSubtitle: \"Penalità accumulate\",\r\n    penaltiesLabel: \"penalità\",\r\n    continueButton: \"CONTINUA\",\r\n    \r\n    // Opzioni di pagamento\r\n    paymentOptions: [\r\n      { id: 'premium', name: 'Premium', price: '4.99', description: 'Sblocca tutte le stanze per sempre' },\r\n      { id: 'prive', name: 'Privè', price: '9.99', description: \"L'AI ricorderà te e i tuoi amici, i vostri gusti, le vostre paure e vi farà domande sempre più personali\" }\r\n    ],\r\n    \r\n    // Loading\r\n    loadingMessage: \"Caricamento in corso...\",\r\n    \r\n    // Stanze\r\n    rooms: [\r\n      { \r\n        id: 'party', \r\n        name: 'Party', \r\n        description: 'Domande divertenti per animare la festa',\r\n        color: '#2563EB'\r\n      },\r\n      { \r\n        id: 'redRoom', \r\n        name: 'Red Room', \r\n        description: 'Domande piccanti e provocanti',\r\n        color: '#DC2626'\r\n      },\r\n      { \r\n        id: 'darkRoom', \r\n        name: 'Dark Room', \r\n        description: 'Non entrare se hai qualcosa da nascondere',\r\n        color: '#1F2937'\r\n      },\r\n      { \r\n        id: 'coppie', \r\n        name: 'Coppie', \r\n        description: 'Domande e sfide romantiche per innamorati',\r\n        color: '#EAB308'\r\n      },\r\n      { \r\n        id: 'neonRoulette', \r\n        name: 'Neon Roulette', \r\n        description: 'Mix casuale di tutte le modalità',\r\n        color: '#D946EF'\r\n      }\r\n    ],\r\n    \r\n    // Giochi speciali\r\n    specialGames: {\r\n      bouncer: \"{player} è il buttafuori e sta decidendo...\",\r\n      pointFinger: \"{player} sta scegliendo una caratteristica e tutti voteranno...\",\r\n      infamata: \"{player} sta decidendo a chi assegnare la domanda o sfida...\",\r\n      truthOrDare: {\r\n        choosing: \"{player} deve scegliere tra Verità, Obbligo o Debito!\",\r\n        truth: \"{player} ha scelto Verità!\",\r\n        dare: \"{player} ha scelto Obbligo!\",\r\n        debt: \"{player} ha scelto Debito!\"\r\n      },\r\n      ilPezzoGrosso: \"{player} deve fare un'affermazione e tutti voteranno se è vero o falso...\",\r\n      cringeOrClassy: \"{player} deve confessare una sua passione segreta\",\r\n      wouldYouRather: \"{player} ha posto la domanda: Preferiresti? Tutti devono votare! La minoranza riceve penalità\",\r\n      chatDetective: \"{player} è il detective di WhatsApp!\",\r\n      tuttoHaUnPrezzo: \"{player} ha avviato il gioco TUTTO HA UN PREZZO!\",\r\n      tuttiQuelliChe: \"{player} ha attivato il gioco TUTTI QUELLI CHE!\",\r\n      penitenzeGruppo: \"{player} ha attivato PENITENZE DI GRUPPO!\",\r\n      penitenzaRandom: \"{player} ha attivato le PENITENZE RANDOM!\",\r\n      nonHoMai: \"{player} ha iniziato il gioco NON HO MAI! Dopo di lui tocca al giocatore alla sua destra, finché non lo fanno tutti\",\r\n      chiEPiuProbabile: \"{player} ha attivato il gioco CHI È PIÙ PROBABILE CHE! Tutti votano contemporaneamente puntando il dito. Chi riceve più voti fa le penalità!\",\r\n      happyHour: \"{player} ha attivato HAPPY HOUR! Tutti ricevono {count} penalità! 🎉\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Terminologia giochi speciali\r\n    specialGamesTitles: {\r\n      pointFinger: \"PUNTARE IL DITO\",\r\n      bouncer: \"BUTTAFUORI\",\r\n      infamata: \"INFAMATA\",\r\n      truthOrDare: \"OBBLIGO VERITÀ O DEBITO\",\r\n      ilPezzoGrosso: \"IL PEZZO GROSSO\",\r\n      cringeOrClassy: \"CRINGE OR CLASSY\",\r\n      wouldYouRather: \"PREFERIRESTI\",\r\n      chatDetective: \"CHAT DETECTIVE\",\r\n      tuttoHaUnPrezzo: \"TUTTO HA UN PREZZO\",\r\n      tuttiQuelliChe: \"TUTTI QUELLI CHE\",\r\n      penitenzeGruppo: \"PENITENZE DI GRUPPO\",\r\n      penitenzaRandom: \"PENITENZE RANDOM\",\r\n      nonHoMai: \"NON HO MAI\",\r\n      chiEPiuProbabile: \"CHI È PIÙ PROBABILE CHE\",\r\n      happyHour: \"HAPPY HOUR\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Spiegazione del gioco \"preferiresti\"\r\n    wouldYouRatherExplanation: \"Tutti votano: alza la mano per la prima opzione, tienila abbassata per la seconda. Chi è in minoranza fa penalità!\",\r\n    \r\n    // Opzioni gioco Verità o Obbligo\r\n    truthDareOptions: {\r\n      selectOption: \"Seleziona un'opzione:\",\r\n      truth: \"VERITÀ\",\r\n      dare: \"OBBLIGO\",\r\n      debt: \"DEBITO\",\r\n      debtExplanation: \"Hai scelto di prendere un debito! Il gruppo deciderà quando riscattarlo.\",\r\n      chooseOption: \"SCEGLI UN'OPZIONE\"\r\n    },\r\n    \r\n    // Fallback\r\n    noActionAvailable: \"Nessuna azione disponibile\",\r\n    \r\n    // Alternanze penalità\r\n    penaltyAlternatives: {\r\n      questions: [\r\n        \"? Se non rispondi {count} penalità\",\r\n        \"? Se eviti la domanda {count} penalità\",\r\n        \"? Il silenzio costa {count} penalità\"\r\n      ],\r\n      statements: [\r\n        \"se ti rifiuti {count} penalità\",\r\n        \"se non lo fai {count} penalità\",\r\n        \"altrimenti sono {count} penalità\",\r\n        \"in caso contrario {count} penalità\",\r\n        \"o saranno {count} penalità\",\r\n        \"o riceverai {count} penalità\",\r\n        \"se non hai coraggio {count} penalità\",\r\n        \"o dovrai fare {count} penalità\",\r\n        \"rifiutare costa {count} penalità\"\r\n      ]\r\n    },\r\n    \r\n    // Debiti\r\n    debts: {\r\n      buttonLabel: \"💸\",\r\n      activeDebtsTitle: \"Debiti attivi:\",\r\n      debtDescription: \"Debito assegnato durante il gioco Obbligo Verità Debito\"\r\n    },\r\n    \r\n    // Messaggi di log\r\n    logMessages: {\r\n      neonRouletteStats: \"Neon Roulette stats:\",\r\n      redRoomStats: \"Red Room: {count} azioni\",\r\n      darkRoomStats: \"Dark Room: {count} azioni\",\r\n      coppieStats: \"Coppie: {count} azioni\",\r\n      partyStats: \"Party: {count} azioni\",\r\n      totalStats: \"Totale: {count} azioni\",\r\n      noActionsInPool: \"Nessuna azione nel pool, uso il fallback\",\r\n      missingSpecialGame: \"Manca la sezione specialGames.{type} nel backupActions.json!\"\r\n    },\r\n    \r\n    // Testi dinamici per ObligoVeritàDebito\r\n    truthDareIntro: \"OBBLIGO VERITÀ O DEBITO: È il turno di {player}. Se scegli Debito, eviti la penalità ma ti viene assegnato un debito che potrà essere riscattato in qualsiasi momento da chi dirige il gioco (es. \\\"Vai a prendermi da bere\\\" o \\\"Posta una storia imbarazzante\\\"). Scegli una delle opzioni!\",\r\n    truthDareNextPlayerIntro: \"OBBLIGO VERITÀ O DEBITO: È il turno di {player}. Scegli una delle opzioni!\"\r\n  },\r\n  \r\n  en: {\r\n    // General app texts\r\n    appName: \"FRIENZ\",\r\n    appDescription: \"This club is run by an AI. It will formulate new and unexpected questions.\",\r\n    \r\n    // Buttons and common actions\r\n    startButton: \"START\",\r\n    backButton: \"Back\",\r\n    nextButton: \"NEXT\",\r\n    doneButton: \"DONE\", // NUOVO: Button to complete the action\r\n    payButton: \"PAY\", // NUOVO: Button to pay the penalty\r\n    enterButton: \"ENTER\",\r\n    resetButton: \"Reset (Test Only)\",\r\n    startGameButton: \"START\",\r\n    \r\n    // Screen titles\r\n    playersScreenTitle: \"PLAYERS\",\r\n    roomsScreenTitle: \"ROOMS\",\r\n    unlockGameTitle: \"UNLOCK THE GAME\",\r\n    leaderboardTitle: \"LEADERBOARD\", // NUOVO: Title for the leaderboard screen\r\n    \r\n    // Placeholders and labels\r\n    playerInputPlaceholder: \"Enter player name\",\r\n    addPlayerLabel: \"Add Player\",\r\n    \r\n    // Messages\r\n    notEnoughPlayersError: \"Enter at least 2 players to start!\",\r\n    gameOverMessage: \"GAME OVER!\",\r\n    actionsCompletedMessage: \"You completed {count} actions!\",\r\n    tapToContinueMessage: \"Tap to {action}\",\r\n    returnToRoomsMessage: \"return to room selection\",\r\n    unlockMoreGamesMessage: \"unlock more games\",\r\n    \r\n    // Paywall screen\r\n    freeGameEndedTitle: \"Free game ended!\",\r\n    freeGameEndedMessage: \"You've used your free game. Unlock the app to play unlimited games with all your friends!\",\r\n    purchaseButton: \"PURCHASE\",\r\n    processingPayment: \"PROCESSING...\",\r\n    \r\n    // NUOVO: Leaderboard screen\r\n    leaderboardSubtitle: \"Penalties accumulated\",\r\n    penaltiesLabel: \"penalties\",\r\n    continueButton: \"CONTINUE\",\r\n    \r\n    // Payment options\r\n    paymentOptions: [\r\n      { id: 'premium', name: 'Premium', price: '4.99', description: 'Unlock all rooms forever' },\r\n      { id: 'prive', name: 'VIP', price: '9.99', description: \"The AI will remember you and your friends, your tastes, your fears, and will ask increasingly personal questions\" }\r\n    ],\r\n    \r\n    // Loading\r\n    loadingMessage: \"Loading...\",\r\n    \r\n    // Rooms\r\n    rooms: [\r\n      { \r\n        id: 'party', \r\n        name: 'Party', \r\n        description: 'Fun questions to liven up the party',\r\n        color: '#2563EB'\r\n      },\r\n      { \r\n        id: 'redRoom', \r\n        name: 'Red Room', \r\n        description: 'Spicy and provocative questions',\r\n        color: '#DC2626'\r\n      },\r\n      { \r\n        id: 'darkRoom', \r\n        name: 'Dark Room', \r\n        description: \"Don't enter if you have something to hide\",\r\n        color: '#1F2937'\r\n      },\r\n      { \r\n        id: 'coppie', \r\n        name: 'Couples', \r\n        description: 'Romantic questions and challenges for lovers',\r\n        color: '#EAB308'\r\n      },\r\n      { \r\n        id: 'neonRoulette', \r\n        name: 'Neon Roulette', \r\n        description: 'Random mix of all modes',\r\n        color: '#D946EF'\r\n      }\r\n    ],\r\n    \r\n    // Special games\r\n    specialGames: {\r\n      bouncer: \"{player} is the bouncer and is deciding...\",\r\n      pointFinger: \"{player} is choosing a characteristic and everyone will vote...\",\r\n      infamata: \"{player} is deciding who to assign the question or challenge to...\",\r\n      truthOrDare: {\r\n        choosing: \"{player} must choose between Truth, Dare, or Debt!\",\r\n        truth: \"{player} chose Truth!\",\r\n        dare: \"{player} chose Dare!\",\r\n        debt: \"{player} chose Debt!\"\r\n      },\r\n      ilPezzoGrosso: \"{player} must make a statement and everyone will vote if it's true or false...\",\r\n      cringeOrClassy: \"{player} must confess a secret passion\",\r\n      wouldYouRather: \"{player} asked the question: Would You Rather? Everyone must vote! The minority gets penalties\",\r\n      chatDetective: \"{player} is the WhatsApp detective!\",\r\n      tuttoHaUnPrezzo: \"{player} has started the EVERYTHING HAS A PRICE game!\",\r\n      tuttiQuelliChe: \"{player} has activated the ALL THOSE WHO game!\",\r\n      penitenzeGruppo: \"{player} has activated GROUP PENALTIES!\",\r\n      penitenzaRandom: \"{player} has activated RANDOM PENALTIES!\",\r\n      nonHoMai: \"{player} has started the I HAVE NEVER game! After them, it's the player on their right's turn, until everyone has played.\",\r\n      chiEPiuProbabile: \"{player} has activated the WHO IS MOST LIKELY TO game! Everyone votes simultaneously by pointing a finger. Whoever gets the most votes takes the penalties!\",\r\n      happyHour: \"{player} has activated HAPPY HOUR! Everyone receives {count} penalties! 🎉\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Special games terminology\r\n    specialGamesTitles: {\r\n      pointFinger: \"POINT THE FINGER\",\r\n      bouncer: \"BOUNCER\",\r\n      infamata: \"SNITCH\",\r\n      truthOrDare: \"TRUTH, DARE OR DEBT\",\r\n      ilPezzoGrosso: \"THE BIG SHOT\",\r\n      cringeOrClassy: \"CRINGE OR CLASSY\",\r\n      wouldYouRather: \"WOULD YOU RATHER\",\r\n      chatDetective: \"CHAT DETECTIVE\",\r\n      tuttoHaUnPrezzo: \"EVERYTHING HAS A PRICE\",\r\n      tuttiQuelliChe: \"ALL THOSE WHO\",\r\n      penitenzeGruppo: \"GROUP PENALTIES\",\r\n      penitenzaRandom: \"RANDOM PENALTIES\",\r\n      nonHoMai: \"I HAVE NEVER\",\r\n      chiEPiuProbabile: \"WHO IS MOST LIKELY TO\",\r\n      happyHour: \"HAPPY HOUR\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Would You Rather game explanation\r\n    wouldYouRatherExplanation: \"Everyone votes: raise your hand for the first option, keep it down for the second. Those in the minority get penalties!\",\r\n    \r\n    // Truth or Dare game options\r\n    truthDareOptions: {\r\n      selectOption: \"Select an option:\",\r\n      truth: \"TRUTH\",\r\n      dare: \"DARE\",\r\n      debt: \"DEBT\",\r\n      debtExplanation: \"You chose to take a debt! The group will decide when to redeem it.\",\r\n      chooseOption: \"CHOOSE AN OPTION\"\r\n    },\r\n    \r\n    // Fallback\r\n    noActionAvailable: \"No action available\",\r\n    \r\n    // Penalty alternatives\r\n    penaltyAlternatives: {\r\n      questions: [\r\n        \"? If you don't answer, {count} penalties\",\r\n        \"? If you avoid the question, {count} penalties\",\r\n        \"? Silence costs {count} penalties\"\r\n      ],\r\n      statements: [\r\n        \"if you refuse, {count} penalties\",\r\n        \"if you don't do it, {count} penalties\",\r\n        \"otherwise it's {count} penalties\",\r\n        \"or else {count} penalties\",\r\n        \"or you'll get {count} penalties\",\r\n        \"if you don't have the courage, {count} penalties\",\r\n        \"or you'll have to do {count} penalties\",\r\n        \"refusing costs {count} penalties\"\r\n      ]\r\n    },\r\n    \r\n    // Debts\r\n    debts: {\r\n      buttonLabel: \"💸\",\r\n      activeDebtsTitle: \"Active debts:\",\r\n      debtDescription: \"Debt assigned during the Truth, Dare or Debt game\"\r\n    },\r\n    \r\n    // Log messages\r\n    logMessages: {\r\n      neonRouletteStats: \"Neon Roulette stats:\",\r\n      redRoomStats: \"Red Room: {count} actions\",\r\n      darkRoomStats: \"Dark Room: {count} actions\",\r\n      coppieStats: \"Couples: {count} actions\",\r\n      partyStats: \"Party: {count} actions\",\r\n      totalStats: \"Total: {count} actions\",\r\n      noActionsInPool: \"No actions in the pool, using fallback\",\r\n      missingSpecialGame: \"Missing specialGames.{type} section in backupActions.json!\"\r\n    },\r\n    \r\n    // Dynamic texts for Truth/Dare/Debt\r\n    truthDareIntro: \"TRUTH, DARE OR DEBT: It's {player}'s turn. If you choose Debt, you avoid the penalty but you're assigned a debt that can be redeemed at any time by whoever is running the game (e.g., \\\"Get me a drink\\\" or \\\"Post an embarrassing story\\\"). Choose one of the options!\",\r\n    truthDareNextPlayerIntro: \"TRUTH, DARE OR DEBT: It's {player}'s turn. Choose one of the options!\"\r\n  },\r\n  \r\n  fr: {\r\n    // Textes généraux de l'application\r\n    appName: \"FRIENZ\",\r\n    appDescription: \"Ce club est géré par une IA. Elle formulera des questions nouvelles et inattendues.\",\r\n    \r\n    // Boutons et actions communes\r\n    startButton: \"COMMENCER\",\r\n    backButton: \"Retour\",\r\n    nextButton: \"SUIVANT\",\r\n    doneButton: \"TERMINÉ\",\r\n    payButton: \"PAYER\",\r\n    enterButton: \"ENTRER\",\r\n    resetButton: \"Réinitialiser (Test Uniquement)\",\r\n    startGameButton: \"DÉMARRER\",\r\n    \r\n    // Titres des écrans\r\n    playersScreenTitle: \"JOUEURS\",\r\n    roomsScreenTitle: \"SALLES\",\r\n    unlockGameTitle: \"DÉBLOQUER LE JEU\",\r\n    leaderboardTitle: \"CLASSEMENT\",\r\n    \r\n    // Placeholders et labels\r\n    playerInputPlaceholder: \"Nom du joueur\",\r\n    addPlayerLabel: \"Ajouter Joueur\",\r\n    \r\n    // Messages\r\n    notEnoughPlayersError: \"Entrez au moins 2 joueurs pour commencer!\",\r\n    gameOverMessage: \"JEU TERMINÉ!\",\r\n    actionsCompletedMessage: \"Vous avez complété {count} actions!\",\r\n    tapToContinueMessage: \"Touchez pour {action}\",\r\n    returnToRoomsMessage: \"retourner à la sélection des salles\",\r\n    unlockMoreGamesMessage: \"débloquer plus de jeux\",\r\n    \r\n    // Écran paywall\r\n    freeGameEndedTitle: \"Partie gratuite terminée!\",\r\n    freeGameEndedMessage: \"Vous avez utilisé votre partie gratuite. Débloquez l'application pour jouer de façon illimitée avec tous vos amis!\",\r\n    purchaseButton: \"ACHETER\",\r\n    processingPayment: \"TRAITEMENT...\",\r\n    \r\n    // Écran de classement\r\n    leaderboardSubtitle: \"Pénalités accumulées\",\r\n    penaltiesLabel: \"pénalités\",\r\n    continueButton: \"CONTINUER\",\r\n    \r\n    // Options de paiement\r\n    paymentOptions: [\r\n      { id: 'premium', name: 'Premium', price: '4.99', description: 'Débloque toutes les salles pour toujours' },\r\n      { id: 'prive', name: 'VIP', price: '9.99', description: \"L'IA se souviendra de vous et de vos amis, de vos goûts, de vos peurs, et posera des questions de plus en plus personnelles\" }\r\n    ],\r\n    \r\n    // Chargement\r\n    loadingMessage: \"Chargement en cours...\",\r\n    \r\n    // Salles\r\n    rooms: [\r\n      { \r\n        id: 'party', \r\n        name: 'Party', \r\n        description: 'Questions amusantes pour animer la fête',\r\n        color: '#2563EB'\r\n      },\r\n      { \r\n        id: 'redRoom', \r\n        name: 'Red Room', \r\n        description: 'Questions épicées et provocantes',\r\n        color: '#DC2626'\r\n      },\r\n      { \r\n        id: 'darkRoom', \r\n        name: 'Dark Room', \r\n        description: \"N'entrez pas si vous avez quelque chose à cacher\",\r\n        color: '#1F2937'\r\n      },\r\n      { \r\n        id: 'coppie', \r\n        name: 'Couples', \r\n        description: 'Questions et défis romantiques pour les amoureux',\r\n        color: '#EAB308'\r\n      },\r\n      { \r\n        id: 'neonRoulette', \r\n        name: 'Neon Roulette', \r\n        description: 'Mélange aléatoire de tous les modes',\r\n        color: '#D946EF'\r\n      }\r\n    ],\r\n    \r\n    // Jeux spéciaux\r\n    specialGames: {\r\n      bouncer: \"{player} est le videur et est en train de décider...\",\r\n      pointFinger: \"{player} choisit une caractéristique et tout le monde va voter...\",\r\n      infamata: \"{player} décide à qui attribuer la question ou le défi...\",\r\n      truthOrDare: {\r\n        choosing: \"{player} doit choisir entre Vérité, Action ou Dette!\",\r\n        truth: \"{player} a choisi Vérité!\",\r\n        dare: \"{player} a choisi Action!\",\r\n        debt: \"{player} a choisi Dette!\"\r\n      },\r\n      ilPezzoGrosso: \"{player} doit faire une déclaration et tout le monde va voter si c'est vrai ou faux...\",\r\n      cringeOrClassy: \"{player} doit confesser une passion secrète\",\r\n      wouldYouRather: \"{player} a posé la question: Préférerais-tu? Tout le monde doit voter! La minorité reçoit des pénalités\",\r\n      chatDetective: \"{player} est le détective WhatsApp !\",\r\n      tuttoHaUnPrezzo: \"{player} a lancé le jeu TOUT A UN PRIX !\",\r\n      tuttiQuelliChe: \"{player} a activé le jeu TOUS CEUX QUI!\",\r\n      penitenzeGruppo: \"{player} a activé PÉNALITÉS DE GROUPE!\",\r\n      penitenzaRandom: \"{player} a activé les PÉNALITÉS ALÉATOIRES!\",\r\n      nonHoMai: \"{player} a commencé le jeu JE N'AI JAMAIS! Après lui, c'est au tour du joueur à sa droite, jusqu'à ce que tout le monde ait joué.\",\r\n      chiEPiuProbabile: \"{player} a activé le jeu QUI EST LE PLUS SUSCEPTIBLE DE! Tout le monde vote simultanément en pointant du doigt. Celui qui reçoit le plus de votes reçoit les pénalités!\",\r\n      happyHour: \"{player} a activé l'HAPPY HOUR ! Tout le monde reçoit {count} pénalités ! 🎉\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Terminologie des jeux spéciaux\r\n    specialGamesTitles: {\r\n      pointFinger: \"POINTER DU DOIGT\",\r\n      bouncer: \"VIDEUR\",\r\n      infamata: \"BALANCE\",\r\n      truthOrDare: \"VÉRITÉ, ACTION OU DETTE\",\r\n      ilPezzoGrosso: \"LE GROS BONNET\",\r\n      cringeOrClassy: \"GÊNANT OU CLASSE\",\r\n      wouldYouRather: \"PRÉFÉRERAIS-TU\",\r\n      chatDetective: \"DÉTECTIVE DE CHAT\",\r\n      tuttoHaUnPrezzo: \"TOUT A UN PRIX\",\r\n      tuttiQuelliChe: \"TOUS CEUX QUI\",\r\n      penitenzeGruppo: \"PÉNALITÉS DE GROUPE\",\r\n      penitenzaRandom: \"PÉNALITÉS ALÉATOIRES\",\r\n      nonHoMai: \"JE N'AI JAMAIS\",\r\n      chiEPiuProbabile: \"QUI EST LE PLUS SUSCEPTIBLE DE\",\r\n      happyHour: \"HAPPY HOUR\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Explication du jeu Préférerais-tu\r\n    wouldYouRatherExplanation: \"Tout le monde vote: levez la main pour la première option, gardez-la baissée pour la seconde. Ceux en minorité reçoivent des pénalités!\",\r\n    \r\n    // Options du jeu Vérité ou Action\r\n    truthDareOptions: {\r\n      selectOption: \"Sélectionnez une option:\",\r\n      truth: \"VÉRITÉ\",\r\n      dare: \"ACTION\",\r\n      debt: \"DETTE\",\r\n      debtExplanation: \"Vous avez choisi de prendre une dette! Le groupe décidera quand la racheter.\",\r\n      chooseOption: \"CHOISISSEZ UNE OPTION\"\r\n    },\r\n    \r\n    // Fallback\r\n    noActionAvailable: \"Aucune action disponible\",\r\n    \r\n    // Alternatives de pénalité\r\n    penaltyAlternatives: {\r\n      questions: [\r\n        \"? Si vous ne répondez pas, {count} pénalités\",\r\n        \"? Si vous évitez la question, {count} pénalités\",\r\n        \"? Le silence coûte {count} pénalités\"\r\n      ],\r\n      statements: [\r\n        \"si vous refusez, {count} pénalités\",\r\n        \"si vous ne le faites pas, {count} pénalités\",\r\n        \"sinon c'est {count} pénalités\",\r\n        \"ou alors {count} pénalités\",\r\n        \"ou vous recevrez {count} pénalités\",\r\n        \"si vous n'avez pas le courage, {count} pénalités\",\r\n        \"ou vous devrez faire {count} pénalités\",\r\n        \"refuser coûte {count} pénalités\"\r\n      ]\r\n    },\r\n    \r\n    // Dettes\r\n    debts: {\r\n      buttonLabel: \"💸\",\r\n      activeDebtsTitle: \"Dettes actives:\",\r\n      debtDescription: \"Dette assignée pendant le jeu Vérité, Action ou Dette\"\r\n    },\r\n    \r\n    // Messages de log\r\n    logMessages: {\r\n      neonRouletteStats: \"Statistiques Neon Roulette:\",\r\n      redRoomStats: \"Red Room: {count} actions\",\r\n      darkRoomStats: \"Dark Room: {count} actions\",\r\n      coppieStats: \"Couples: {count} actions\",\r\n      partyStats: \"Party: {count} actions\",\r\n      totalStats: \"Total: {count} actions\",\r\n      noActionsInPool: \"Pas d'actions dans le pool, utilisation du fallback\",\r\n      missingSpecialGame: \"Section specialGames.{type} manquante dans backupActions.json!\"\r\n    },\r\n    \r\n    // Textes dynamiques pour Vérité/Action/Dette\r\n    truthDareIntro: \"VÉRITÉ, ACTION OU DETTE: C'est le tour de {player}. Si vous choisissez Dette, vous évitez la pénalité mais une dette vous est assignée qui peut être rachetée à tout moment par celui qui dirige le jeu (ex., \\\"Va me chercher à boire\\\" ou \\\"Poste une histoire embarrassante\\\"). Choisissez une des options!\",\r\n    truthDareNextPlayerIntro: \"VÉRITÉ, ACTION OU DETTE: C'est le tour de {player}. Choisissez une des options!\"\r\n  },\r\n  \r\n  de: {\r\n    // Allgemeine App-Texte\r\n    appName: \"FRIENZ\",\r\n    appDescription: \"Dieser Club wird von einer KI geleitet. Sie wird neue und unerwartete Fragen formulieren.\",\r\n    \r\n    // Buttons und häufige Aktionen\r\n    startButton: \"STARTEN\",\r\n    backButton: \"Zurück\",\r\n    nextButton: \"WEITER\",\r\n    doneButton: \"ERLEDIGT\",\r\n    payButton: \"ZAHLEN\",\r\n    enterButton: \"EINTRETEN\",\r\n    resetButton: \"Zurücksetzen (Nur Test)\",\r\n    startGameButton: \"START\",\r\n    \r\n    // Bildschirmtitel\r\n    playersScreenTitle: \"SPIELER\",\r\n    roomsScreenTitle: \"RÄUME\",\r\n    unlockGameTitle: \"SPIEL FREISCHALTEN\",\r\n    leaderboardTitle: \"BESTENLISTE\",\r\n    \r\n    // Platzhalter und Labels\r\n    playerInputPlaceholder: \"Spielername eingeben\",\r\n    addPlayerLabel: \"Spieler hinzufügen\",\r\n    \r\n    // Nachrichten\r\n    notEnoughPlayersError: \"Geben Sie mindestens 2 Spieler ein, um zu beginnen!\",\r\n    gameOverMessage: \"SPIEL BEENDET!\",\r\n    actionsCompletedMessage: \"Sie haben {count} Aktionen abgeschlossen!\",\r\n    tapToContinueMessage: \"Tippen Sie, um {action}\",\r\n    returnToRoomsMessage: \"zur Raumauswahl zurückzukehren\",\r\n    unlockMoreGamesMessage: \"mehr Spiele freizuschalten\",\r\n    \r\n    // Paywall-Bildschirm\r\n    freeGameEndedTitle: \"Kostenloses Spiel beendet!\",\r\n    freeGameEndedMessage: \"Sie haben Ihr kostenloses Spiel verwendet. Schalten Sie die App frei, um unbegrenzt mit all Ihren Freunden zu spielen!\",\r\n    purchaseButton: \"KAUFEN\",\r\n    processingPayment: \"VERARBEITUNG...\",\r\n    \r\n    // Bestenliste-Bildschirm\r\n    leaderboardSubtitle: \"Angesammelte Strafen\",\r\n    penaltiesLabel: \"Strafen\",\r\n    continueButton: \"FORTFAHREN\",\r\n    \r\n    // Zahlungsoptionen\r\n    paymentOptions: [\r\n      { id: 'premium', name: 'Premium', price: '4.99', description: 'Schaltet alle Räume für immer frei' },\r\n      { id: 'prive', name: 'VIP', price: '9.99', description: \"Die KI wird sich an Sie und Ihre Freunde, Ihre Vorlieben, Ihre Ängste erinnern und immer persönlichere Fragen stellen\" }\r\n    ],\r\n    \r\n    // Laden\r\n    loadingMessage: \"Wird geladen...\",\r\n    \r\n    // Räume\r\n    rooms: [\r\n      { \r\n        id: 'party', \r\n        name: 'Party', \r\n        description: 'Lustige Fragen, um die Party zu beleben',\r\n        color: '#2563EB'\r\n      },\r\n      { \r\n        id: 'redRoom', \r\n        name: 'Red Room', \r\n        description: 'Pikante und provokante Fragen',\r\n        color: '#DC2626'\r\n      },\r\n      { \r\n        id: 'darkRoom', \r\n        name: 'Dark Room', \r\n        description: \"Betreten Sie nicht, wenn Sie etwas zu verbergen haben\",\r\n        color: '#1F2937'\r\n      },\r\n      { \r\n        id: 'coppie', \r\n        name: 'Paare', \r\n        description: 'Romantische Fragen und Herausforderungen für Verliebte',\r\n        color: '#EAB308'\r\n      },\r\n      { \r\n        id: 'neonRoulette', \r\n        name: 'Neon Roulette', \r\n        description: 'Zufällige Mischung aller Modi',\r\n        color: '#D946EF'\r\n      }\r\n    ],\r\n    \r\n    // Spezielle Spiele\r\n    specialGames: {\r\n      bouncer: \"{player} ist der Türsteher und entscheidet...\",\r\n      pointFinger: \"{player} wählt ein Merkmal aus und alle werden abstimmen...\",\r\n      infamata: \"{player} entscheidet, wem die Frage oder Herausforderung zugewiesen wird...\",\r\n      truthOrDare: {\r\n        choosing: \"{player} muss zwischen Wahrheit, Pflicht oder Schuld wählen!\",\r\n        truth: \"{player} hat Wahrheit gewählt!\",\r\n        dare: \"{player} hat Pflicht gewählt!\",\r\n        debt: \"{player} hat Schuld gewählt!\"\r\n      },\r\n      ilPezzoGrosso: \"{player} muss eine Aussage machen und alle werden abstimmen, ob sie wahr oder falsch ist...\",\r\n      cringeOrClassy: \"{player} muss eine geheime Leidenschaft gestehen\",\r\n      wouldYouRather: \"{player} stellte die Frage: Was hättest du lieber? Alle müssen abstimmen! Die Minderheit erhält Strafen\",\r\n      chatDetective: \"{player} ist der WhatsApp-Detektiv!\",\r\n      tuttoHaUnPrezzo: \"{player} hat das Spiel ALLES HAT SEINEN PREIS gestartet!\",\r\n      tuttiQuelliChe: \"{player} hat das Spiel ALLE, DIE aktiviert!\",\r\n      penitenzeGruppo: \"{player} hat GRUPPENSTRAFEN aktiviert!\",\r\n      penitenzaRandom: \"{player} hat ZUFÄLLIGE STRAFEN aktiviert!\",\r\n      nonHoMai: \"{player} hat das Spiel ICH HABE NIE gestartet! Nach ihm ist der Spieler zu seiner Rechten an der Reihe, bis alle dran waren.\",\r\n      chiEPiuProbabile: \"{player} hat das Spiel WER WÜRDE AM EHESTEN aktiviert! Alle stimmen gleichzeitig ab, indem sie mit dem Finger zeigen. Wer die meisten Stimmen erhält, bekommt die Strafen!\",\r\n      happyHour: \"{player} hat die HAPPY HOUR aktiviert! Jeder erhält {count} Strafen! 🎉\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Spezielle Spiele Terminologie\r\n    specialGamesTitles: {\r\n      pointFinger: \"MIT DEM FINGER ZEIGEN\",\r\n      bouncer: \"TÜRSTEHER\",\r\n      infamata: \"PETZE\",\r\n      truthOrDare: \"WAHRHEIT, PFLICHT ODER SCHULD\",\r\n      ilPezzoGrosso: \"DER GROSSE BOSS\",\r\n      cringeOrClassy: \"PEINLICH ODER STILVOLL\",\r\n      wouldYouRather: \"WAS HÄTTEST DU LIEBER\",\r\n      chatDetective: \"CHAT-DETEKTIV\",\r\n      tuttoHaUnPrezzo: \"ALLES HAT SEINEN PREIS\",\r\n      tuttiQuelliChe: \"ALLE, DIE\",\r\n      penitenzeGruppo: \"GRUPPENSTRAFEN\",\r\n      penitenzaRandom: \"ZUFÄLLIGE STRAFEN\",\r\n      nonHoMai: \"ICH HABE NIE\",\r\n      chiEPiuProbabile: \"WER WÜRDE AM EHESTEN\",\r\n      happyHour: \"HAPPY HOUR\",\r\n      oneVsOne: \"1V1!\"\r\n    },\r\n    \r\n    // Erklärung des Spiels \"Was hättest du lieber\"\r\n    wouldYouRatherExplanation: \"Alle stimmen ab: Hand heben für die erste Option, unten lassen für die zweite. Wer in der Minderheit ist, erhält Strafen!\",\r\n    \r\n    // Wahrheit oder Pflicht Spieloptionen\r\n    truthDareOptions: {\r\n      selectOption: \"Wählen Sie eine Option:\",\r\n      truth: \"WAHRHEIT\",\r\n      dare: \"PFLICHT\",\r\n      debt: \"SCHULD\",\r\n      debtExplanation: \"Sie haben sich entschieden, eine Schuld zu übernehmen! Die Gruppe wird entscheiden, wann sie eingelöst wird.\",\r\n      chooseOption: \"WÄHLEN SIE EINE OPTION\"\r\n    },\r\n    \r\n    // Fallback\r\n    noActionAvailable: \"Keine Aktion verfügbar\",\r\n    \r\n    // Strafenalternativen\r\n    penaltyAlternatives: {\r\n      questions: [\r\n        \"? Wenn Sie nicht antworten, {count} Strafen\",\r\n        \"? Wenn Sie der Frage ausweichen, {count} Strafen\",\r\n        \"? Schweigen kostet {count} Strafen\"\r\n      ],\r\n      statements: [\r\n        \"wenn Sie sich weigern, {count} Strafen\",\r\n        \"wenn Sie es nicht tun, {count} Strafen\",\r\n        \"ansonsten sind es {count} Strafen\",\r\n        \"oder es sind {count} Strafen\",\r\n        \"oder Sie bekommen {count} Strafen\",\r\n        \"wenn Sie nicht den Mut haben, {count} Strafen\",\r\n        \"oder Sie müssen {count} Strafen machen\",\r\n        \"Weigerung kostet {count} Strafen\"\r\n      ]\r\n    },\r\n    \r\n    // Schulden\r\n    debts: {\r\n      buttonLabel: \"💸\",\r\n      activeDebtsTitle: \"Aktive Schulden:\",\r\n      debtDescription: \"Schuld, die während des Wahrheit, Pflicht oder Schuld-Spiels zugewiesen wurde\"\r\n    },\r\n    \r\n    // Log-Nachrichten\r\n    logMessages: {\r\n      neonRouletteStats: \"Neon Roulette Statistiken:\",\r\n      redRoomStats: \"Red Room: {count} Aktionen\",\r\n      darkRoomStats: \"Dark Room: {count} Aktionen\",\r\n      coppieStats: \"Paare: {count} Aktionen\",\r\n      partyStats: \"Party: {count} Aktionen\",\r\n      totalStats: \"Gesamt: {count} Aktionen\",\r\n      noActionsInPool: \"Keine Aktionen im Pool, verwende Fallback\",\r\n      missingSpecialGame: \"Fehlender specialGames.{type} Abschnitt in backupActions.json!\"\r\n    },\r\n    \r\n    // Dynamische Texte für Wahrheit/Pflicht/Schuld\r\n    truthDareIntro: \"WAHRHEIT, PFLICHT ODER SCHULD: {player} ist an der Reihe. Wenn Sie Schuld wählen, vermeiden Sie die Strafe, aber Ihnen wird eine Schuld zugewiesen, die jederzeit von demjenigen, der das Spiel leitet, eingelöst werden kann (z.B. \\\"Hol mir ein Getränk\\\" oder \\\"Poste eine peinliche Geschichte\\\"). Wählen Sie eine der Optionen!\",\r\n    truthDareNextPlayerIntro: \"WAHRHEIT, PFLICHT ODER SCHULD: {player} ist an der Reihe. Wählen Sie eine der Optionen!\"\r\n  }\r\n};\r\n\r\nexport default translations;","// useGameLogic.js - Custom hook per gestire lo stato e la logica del gioco\r\nimport { useState, useEffect } from 'react';\r\nimport translations from './translations';\r\n\r\n/**\r\n * Custom hook per gestire tutta la logica e lo stato del gioco\r\n */\r\nconst useGameLogic = () => {\r\n  // Stato per la lingua selezionata (default: italiano)\r\n  const [language, setLanguage] = useState('it');\r\n  // Riferimento alle traduzioni nella lingua corrente\r\n  const t = translations[language];\r\n  \r\n  // Game states: 'welcome', 'playerSetup', 'roomSelection', 'playing', 'gameOver', 'paywall', 'languageSelection', 'leaderboard'\r\n  const [gameState, setGameState] = useState('welcome');\r\n  const [players, setPlayers] = useState([]);\r\n  const [inputPlayers, setInputPlayers] = useState([{ id: 1, name: '' }]);\r\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\r\n  const [currentAction, setCurrentAction] = useState(null);\r\n  const [selectedRoom, setSelectedRoom] = useState(null);\r\n  const [previousAction, setPreviousAction] = useState(null);\r\n  // Contatore per le azioni giocate in una partita (nascosto dall'UI)\r\n  const [actionsCounter, setActionsCounter] = useState(0);\r\n  // Costante per il numero massimo di azioni per partita\r\n  const MAX_ACTIONS_PER_GAME = 50;\r\n  \r\n  // NUOVO: Sistema di punteggio\r\n  const [playerPenalties, setPlayerPenalties] = useState({});\r\n  \r\n  // State for the loading\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loadingProgress, setLoadingProgress] = useState(0);\r\n  \r\n  // State for selected room index (for swiper)\r\n  const [currentRoomIndex, setCurrentRoomIndex] = useState(0);\r\n  \r\n  // Generated actions for each room\r\n  const [roomActionsPool, setRoomActionsPool] = useState({\r\n    redRoom: [],\r\n    darkRoom: [],\r\n    coppie: [],\r\n    party: [],\r\n    neonRoulette: []\r\n  });\r\n  \r\n  // Current index for tracking which action to use from the pool\r\n  const [currentActionIndex, setCurrentActionIndex] = useState({\r\n    redRoom: 0,\r\n    darkRoom: 0,\r\n    coppie: 0,\r\n    party: 0,\r\n    neonRoulette: 0\r\n  });\r\n  \r\n  // Stato per le azioni di gruppo\r\n  const [groupActionsPool, setGroupActionsPool] = useState([]);\r\n  // Indici per quando devono apparire le azioni di gruppo\r\n  const [groupActionPositions, setGroupActionPositions] = useState([]);\r\n  // Contatore per le azioni di gruppo mostrate\r\n  const [groupActionsShown, setGroupActionsShown] = useState(0);\r\n  \r\n  // ======== GIOCHI SPECIALI - STATO UNIFICATO ========\r\n  // Stato per tenere traccia di tutti i giochi speciali\r\n  const SPECIAL_GAMES = ['bouncer', 'pointFinger', 'infamata', 'truthOrDare', 'ilPezzoGrosso', 'cringeOrClassy', 'wouldYouRather', 'chatDetective', 'newRule', 'tuttoHaUnPrezzo', 'tuttiQuelliChe', 'penitenzeGruppo', 'penitenzaRandom', 'nonHoMai', 'chiEPiuProbabile', 'happyHour', 'oneVsOne'];\r\n  \r\n  // Numerazione dei giochi speciali per una manutenzione più semplice\r\n  const SPECIAL_GAME_TYPES = {\r\n    BOUNCER: 0,\r\n    POINT_FINGER: 1,\r\n    INFAMATA: 2, \r\n    TRUTH_OR_DARE: 3,\r\n    IL_PEZZO_GROSSO: 4,\r\n    CRINGE_OR_CLASSY: 5,\r\n    WOULD_YOU_RATHER: 6,\r\n    CHAT_DETECTIVE: 7,\r\n    NEW_RULE: 8,\r\n    TUTTO_HA_UN_PREZZO: 9,\r\n    TUTTI_QUELLI_CHE: 10,\r\n    PENITENZE_GRUPPO: 11,\r\n    PENITENZA_RANDOM: 12,\r\n    NON_HO_MAI: 13,\r\n    CHI_E_PIU_PROBABILE: 14,\r\n    HAPPY_HOUR: 15,\r\n    ONE_VS_ONE: 16\r\n  };\r\n\r\n  // Funzione che determina quali giochi speciali sono disponibili per ogni stanza\r\n  const getAvailableSpecialGames = (roomId) => {\r\n    switch(roomId) {\r\n      case 'coppie':\r\n        // Per la modalità \"coppie\" truth or dare, would you rather, chatDetective e newRule\r\n        return [\r\n            SPECIAL_GAME_TYPES.TRUTH_OR_DARE, \r\n            SPECIAL_GAME_TYPES.WOULD_YOU_RATHER, \r\n            SPECIAL_GAME_TYPES.CHAT_DETECTIVE, \r\n            SPECIAL_GAME_TYPES.NEW_RULE,\r\n            SPECIAL_GAME_TYPES.CHI_E_PIU_PROBABILE,\r\n            SPECIAL_GAME_TYPES.HAPPY_HOUR\r\n        ];\r\n      case 'redRoom':\r\n        // Per la stanza rossa tutti i giochi + il nuovo tuttoHaUnPrezzo e tuttiQuelliChe e penitenzaRandom\r\n        return [\r\n          SPECIAL_GAME_TYPES.BOUNCER,\r\n          SPECIAL_GAME_TYPES.POINT_FINGER,\r\n          SPECIAL_GAME_TYPES.INFAMATA,\r\n          SPECIAL_GAME_TYPES.TRUTH_OR_DARE,\r\n          SPECIAL_GAME_TYPES.IL_PEZZO_GROSSO,\r\n          SPECIAL_GAME_TYPES.CRINGE_OR_CLASSY,\r\n          SPECIAL_GAME_TYPES.WOULD_YOU_RATHER,\r\n          SPECIAL_GAME_TYPES.CHAT_DETECTIVE,\r\n          SPECIAL_GAME_TYPES.NEW_RULE,\r\n          SPECIAL_GAME_TYPES.TUTTO_HA_UN_PREZZO,\r\n          SPECIAL_GAME_TYPES.TUTTI_QUELLI_CHE,\r\n          SPECIAL_GAME_TYPES.PENITENZE_GRUPPO,\r\n          SPECIAL_GAME_TYPES.PENITENZA_RANDOM,\r\n          SPECIAL_GAME_TYPES.NON_HO_MAI,\r\n          SPECIAL_GAME_TYPES.CHI_E_PIU_PROBABILE,\r\n          SPECIAL_GAME_TYPES.HAPPY_HOUR\r\n        ];\r\n      case 'darkRoom':\r\n        // Per la dark room, non includere Point Finger, Cringe or Classy e Tutto Ha Un Prezzo\r\n        return [\r\n          SPECIAL_GAME_TYPES.BOUNCER,\r\n          SPECIAL_GAME_TYPES.INFAMATA,\r\n          SPECIAL_GAME_TYPES.TRUTH_OR_DARE,\r\n          SPECIAL_GAME_TYPES.IL_PEZZO_GROSSO,\r\n          SPECIAL_GAME_TYPES.WOULD_YOU_RATHER,\r\n          SPECIAL_GAME_TYPES.CHAT_DETECTIVE,\r\n          SPECIAL_GAME_TYPES.NEW_RULE,\r\n          SPECIAL_GAME_TYPES.TUTTI_QUELLI_CHE,\r\n          SPECIAL_GAME_TYPES.PENITENZE_GRUPPO,\r\n          SPECIAL_GAME_TYPES.PENITENZA_RANDOM,\r\n          SPECIAL_GAME_TYPES.NON_HO_MAI,\r\n          SPECIAL_GAME_TYPES.CHI_E_PIU_PROBABILE,\r\n          SPECIAL_GAME_TYPES.HAPPY_HOUR\r\n        ];\r\n      case 'party':\r\n        // Per la party room, aggiungiamo tuttoHaUnPrezzo ma escludiamo Il Pezzo Grosso e Chat Detective\r\n        return [\r\n          SPECIAL_GAME_TYPES.BOUNCER,\r\n          SPECIAL_GAME_TYPES.POINT_FINGER,\r\n          SPECIAL_GAME_TYPES.INFAMATA,\r\n          SPECIAL_GAME_TYPES.TRUTH_OR_DARE,\r\n          SPECIAL_GAME_TYPES.CRINGE_OR_CLASSY,\r\n          SPECIAL_GAME_TYPES.WOULD_YOU_RATHER,\r\n          SPECIAL_GAME_TYPES.NEW_RULE,\r\n          SPECIAL_GAME_TYPES.TUTTO_HA_UN_PREZZO,\r\n          SPECIAL_GAME_TYPES.TUTTI_QUELLI_CHE,\r\n          SPECIAL_GAME_TYPES.PENITENZE_GRUPPO,\r\n          SPECIAL_GAME_TYPES.PENITENZA_RANDOM,\r\n          SPECIAL_GAME_TYPES.NON_HO_MAI,\r\n          SPECIAL_GAME_TYPES.CHI_E_PIU_PROBABILE,\r\n          SPECIAL_GAME_TYPES.HAPPY_HOUR,\r\n          SPECIAL_GAME_TYPES.ONE_VS_ONE // Aggiungiamo il nuovo gioco speciale solo alla modalità Party\r\n        ];\r\n      case 'neonRoulette':\r\n      default:\r\n        // Per la Neon Roulette e come default, tutti i giochi\r\n        return [\r\n          SPECIAL_GAME_TYPES.BOUNCER,\r\n          SPECIAL_GAME_TYPES.POINT_FINGER,\r\n          SPECIAL_GAME_TYPES.INFAMATA,\r\n          SPECIAL_GAME_TYPES.TRUTH_OR_DARE,\r\n          SPECIAL_GAME_TYPES.IL_PEZZO_GROSSO,\r\n          SPECIAL_GAME_TYPES.CRINGE_OR_CLASSY,\r\n          SPECIAL_GAME_TYPES.WOULD_YOU_RATHER,\r\n          SPECIAL_GAME_TYPES.CHAT_DETECTIVE,\r\n          SPECIAL_GAME_TYPES.NEW_RULE,\r\n          SPECIAL_GAME_TYPES.TUTTO_HA_UN_PREZZO,\r\n          SPECIAL_GAME_TYPES.TUTTI_QUELLI_CHE,\r\n          SPECIAL_GAME_TYPES.PENITENZE_GRUPPO,\r\n          SPECIAL_GAME_TYPES.PENITENZA_RANDOM,\r\n          SPECIAL_GAME_TYPES.NON_HO_MAI,\r\n          SPECIAL_GAME_TYPES.CHI_E_PIU_PROBABILE,\r\n          SPECIAL_GAME_TYPES.HAPPY_HOUR,\r\n          SPECIAL_GAME_TYPES.ONE_VS_ONE // Incluso anche in Neon Roulette\r\n        ];\r\n    }\r\n  };\r\n  \r\n  // Stato per tracciare quali giochi sono stati usati\r\n  const [specialGamesUsed, setSpecialGamesUsed] = useState({\r\n    redRoom: { \r\n      bouncer: false, \r\n      pointFinger: false, \r\n      infamata: false, \r\n      truthOrDare: false, \r\n      ilPezzoGrosso: false, \r\n      cringeOrClassy: false, \r\n      wouldYouRather: false, \r\n      chatDetective: false, \r\n      newRule: false, \r\n      tuttoHaUnPrezzo: false, \r\n      tuttiQuelliChe: false, \r\n      penitenzeGruppo: false, \r\n      penitenzaRandom: false, \r\n      nonHoMai: false,\r\n      chiEPiuProbabile: false,\r\n      happyHour: false,\r\n      oneVsOne: false\r\n    },\r\n    darkRoom: { \r\n      bouncer: false, \r\n      pointFinger: false, \r\n      infamata: false, \r\n      truthOrDare: false, \r\n      ilPezzoGrosso: false, \r\n      cringeOrClassy: false, \r\n      wouldYouRather: false, \r\n      chatDetective: false, \r\n      newRule: false, \r\n      tuttoHaUnPrezzo: false, \r\n      tuttiQuelliChe: false, \r\n      penitenzeGruppo: false, \r\n      penitenzaRandom: false, \r\n      nonHoMai: false,\r\n      chiEPiuProbabile: false,\r\n      happyHour: false,\r\n      oneVsOne: false\r\n    },\r\n    coppie: { \r\n      bouncer: false, \r\n      pointFinger: false, \r\n      infamata: false, \r\n      truthOrDare: false, \r\n      ilPezzoGrosso: false, \r\n      cringeOrClassy: false, \r\n      wouldYouRather: false, \r\n      chatDetective: false, \r\n      newRule: false, \r\n      tuttoHaUnPrezzo: false, \r\n      tuttiQuelliChe: false, \r\n      penitenzeGruppo: false, \r\n      penitenzaRandom: false, \r\n      nonHoMai: false,\r\n      chiEPiuProbabile: false,\r\n      happyHour: false,\r\n      oneVsOne: false\r\n    },\r\n    party: { \r\n      bouncer: false, \r\n      pointFinger: false, \r\n      infamata: false, \r\n      truthOrDare: false, \r\n      ilPezzoGrosso: false, \r\n      cringeOrClassy: false, \r\n      wouldYouRather: false, \r\n      chatDetective: false, \r\n      newRule: false, \r\n      tuttoHaUnPrezzo: false, \r\n      tuttiQuelliChe: false, \r\n      penitenzeGruppo: false, \r\n      penitenzaRandom: false, \r\n      nonHoMai: false,\r\n      chiEPiuProbabile: false,\r\n      happyHour: false,\r\n      oneVsOne: false\r\n    },\r\n    neonRoulette: { \r\n      bouncer: false, \r\n      pointFinger: false, \r\n      infamata: false, \r\n      truthOrDare: false, \r\n      ilPezzoGrosso: false, \r\n      cringeOrClassy: false, \r\n      wouldYouRather: false, \r\n      chatDetective: false, \r\n      newRule: false, \r\n      tuttoHaUnPrezzo: false, \r\n      tuttiQuelliChe: false, \r\n      penitenzeGruppo: false, \r\n      penitenzaRandom: false, \r\n      nonHoMai: false,\r\n      chiEPiuProbabile: false,\r\n      happyHour: false,\r\n      oneVsOne: false\r\n    }\r\n  });\r\n  \r\n  // Stato per tracciare quando deve apparire ciascun gioco\r\n  const [specialGamesRound, setSpecialGamesRound] = useState({\r\n    redRoom: { \r\n      bouncer: 15, \r\n      pointFinger: 30, \r\n      infamata: 20, \r\n      truthOrDare: 25, \r\n      ilPezzoGrosso: 35, \r\n      cringeOrClassy: 40, \r\n      wouldYouRather: 10, \r\n      chatDetective: 45, \r\n      newRule: 5, \r\n      tuttoHaUnPrezzo: 18, \r\n      tuttiQuelliChe: 22, \r\n      penitenzeGruppo: 13, \r\n      penitenzaRandom: 28, \r\n      nonHoMai: 33,\r\n      chiEPiuProbabile: 24,\r\n      happyHour: 38,\r\n      oneVsOne: 42\r\n    },\r\n    darkRoom: { \r\n      bouncer: 15, \r\n      pointFinger: 30, \r\n      infamata: 20, \r\n      truthOrDare: 25, \r\n      ilPezzoGrosso: 35, \r\n      cringeOrClassy: 40, \r\n      wouldYouRather: 10, \r\n      chatDetective: 45, \r\n      newRule: 5, \r\n      tuttoHaUnPrezzo: 18, \r\n      tuttiQuelliChe: 22, \r\n      penitenzeGruppo: 13, \r\n      penitenzaRandom: 28, \r\n      nonHoMai: 33,\r\n      chiEPiuProbabile: 24,\r\n      happyHour: 38,\r\n      oneVsOne: 42\r\n    },\r\n    coppie: { \r\n      bouncer: 15, \r\n      pointFinger: 30, \r\n      infamata: 20, \r\n      truthOrDare: 25, \r\n      ilPezzoGrosso: 35, \r\n      cringeOrClassy: 40, \r\n      wouldYouRather: 10, \r\n      chatDetective: 45, \r\n      newRule: 5, \r\n      tuttoHaUnPrezzo: 18, \r\n      tuttiQuelliChe: 22, \r\n      penitenzeGruppo: 13, \r\n      penitenzaRandom: 28, \r\n      nonHoMai: 33,\r\n      chiEPiuProbabile: 24,\r\n      happyHour: 38,\r\n      oneVsOne: 42\r\n    },\r\n    party: { \r\n      bouncer: 15, \r\n      pointFinger: 30, \r\n      infamata: 20, \r\n      truthOrDare: 25, \r\n      ilPezzoGrosso: 35, \r\n      cringeOrClassy: 40, \r\n      wouldYouRather: 10, \r\n      chatDetective: 45, \r\n      newRule: 5, \r\n      tuttoHaUnPrezzo: 18, \r\n      tuttiQuelliChe: 22, \r\n      penitenzeGruppo: 13, \r\n      penitenzaRandom: 28, \r\n      nonHoMai: 33,\r\n      chiEPiuProbabile: 24,\r\n      happyHour: 38,\r\n      oneVsOne: 42\r\n    },\r\n    neonRoulette: { \r\n      bouncer: 15, \r\n      pointFinger: 30, \r\n      infamata: 20, \r\n      truthOrDare: 25, \r\n      ilPezzoGrosso: 35, \r\n      cringeOrClassy: 40, \r\n      wouldYouRather: 10, \r\n      chatDetective: 45, \r\n      newRule: 5, \r\n      tuttoHaUnPrezzo: 18, \r\n      tuttiQuelliChe: 22, \r\n      penitenzeGruppo: 13, \r\n      penitenzaRandom: 28, \r\n      nonHoMai: 33,\r\n      chiEPiuProbabile: 24,\r\n      happyHour: 38,\r\n      oneVsOne: 42\r\n    }\r\n  });\r\n  \r\n  // Stato per il gioco speciale attualmente in corso\r\n  const [activeSpecialGame, setActiveSpecialGame] = useState(null);\r\n  // Giocatore coinvolto nel gioco speciale (se presente)\r\n  const [specialGamePlayer, setSpecialGamePlayer] = useState(null);\r\n  \r\n  // NUOVO: Contatore per tracciare l'ultima azione speciale\r\n  const [lastSpecialGameRound, setLastSpecialGameRound] = useState({\r\n    redRoom: 0,\r\n    darkRoom: 0,\r\n    coppie: 0,\r\n    party: 0,\r\n    neonRoulette: 0\r\n  });\r\n  \r\n  // NUOVO: Lista dei debiti assegnati\r\n  const [debtList, setDebtList] = useState([]);\r\n  \r\n  // NUOVO: Costante per l'intervallo minimo tra giochi speciali\r\n  const MIN_ACTIONS_BETWEEN_SPECIAL_GAMES = 2;\r\n  \r\n  // Nuovi stati per il paywall\r\n  const [hasPlayedFreeGame, setHasPlayedFreeGame] = useState(false);\r\n  const [hasPaid, setHasPaid] = useState(false);\r\n  const [selectedPaymentOption, setSelectedPaymentOption] = useState(null);\r\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\r\n  \r\n  // Nuovi stati per il gioco Obbligo Verità Debito\r\n  const [truthDarePlayers, setTruthDarePlayers] = useState([]);\r\n  const [currentTruthDareChoice, setCurrentTruthDareChoice] = useState(null);\r\n  const [truthDareContent, setTruthDareContent] = useState(null);\r\n  const [truthDareState, setTruthDareState] = useState(null); // \"choosing\", \"executing\", \"completed\"\r\n  const [truthDareContentPool, setTruthDareContentPool] = useState({\r\n    truth: [],\r\n    dare: []\r\n  });\r\n  \r\n  // Nuovo stato per il gioco Cringe or Classy\r\n  const [cringeOrClassyState, setCringeOrClassyState] = useState(null); // \"voting\", \"result\"\r\n  const [cringeOrClassyResult, setCringeOrClassyResult] = useState(null);\r\n\r\n  // Nuovo stato per il gioco \"Preferiresti\"\r\n  const [wouldYouRatherContent, setWouldYouRatherContent] = useState(null);\r\n  \r\n  // Verifica lo stato del paywall quando il componente si monta\r\n  useEffect(() => {\r\n    // Recupera lo stato del pagamento da localStorage\r\n    const storedHasPaid = localStorage.getItem('hasPaid') === 'true';\r\n    const storedHasPlayedFreeGame = localStorage.getItem('hasPlayedFreeGame') === 'true';\r\n    const storedLanguage = localStorage.getItem('language');\r\n    \r\n    if (storedHasPaid) {\r\n      setHasPaid(true);\r\n    }\r\n    \r\n    if (storedHasPlayedFreeGame) {\r\n      setHasPlayedFreeGame(true);\r\n    }\r\n    \r\n    if (storedLanguage && translations[storedLanguage]) {\r\n      setLanguage(storedLanguage);\r\n    }\r\n  }, []);\r\n  \r\n  // Effetto per caricare la prima domanda quando lo stato è 'playing'\r\n  useEffect(() => {\r\n    if (gameState === 'playing' && selectedRoom) {\r\n      // Usa una flag per assicurarti che questo venga eseguito solo una volta\r\n      const firstLoadFlag = 'firstActionLoaded_' + selectedRoom.id;\r\n      if (!sessionStorage.getItem(firstLoadFlag)) {\r\n        setTimeout(() => {\r\n          updateCurrentAction();\r\n          sessionStorage.setItem(firstLoadFlag, 'true');\r\n        }, 100);\r\n      }\r\n    }\r\n  }, [gameState, selectedRoom]);\r\n  \r\n  // Funzione per cambiare la lingua dell'app\r\n  const changeLanguage = (newLanguage) => {\r\n    if (translations[newLanguage]) {\r\n      setLanguage(newLanguage);\r\n      localStorage.setItem('language', newLanguage);\r\n      \r\n      // Se si stava visualizzando una stanza, aggiorna la selezione\r\n      if (selectedRoom && currentRoomIndex >= 0) {\r\n        // Trova l'indice della stanza con lo stesso ID nella nuova lingua\r\n        const roomId = selectedRoom.id;\r\n        const newRooms = translations[newLanguage].rooms;\r\n        const newRoomIndex = newRooms.findIndex(room => room.id === roomId);\r\n        \r\n        if (newRoomIndex >= 0) {\r\n          setCurrentRoomIndex(newRoomIndex);\r\n          setSelectedRoom(newRooms[newRoomIndex]);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Funzione per aprire il selettore di lingua\r\n  const openLanguageSelector = () => {\r\n    setGameState('languageSelection');\r\n  };\r\n  \r\n  // Mostra la schermata di setup giocatori\r\n  const enterPlayerSetup = () => {\r\n    // Verifica se l'utente ha già giocato la partita gratuita e non ha pagato\r\n    if (hasPlayedFreeGame && !hasPaid) {\r\n      setGameState('paywall');\r\n    } else {\r\n      setGameState('playerSetup');\r\n    }\r\n  };\r\n  \r\n  // Aggiunge un nuovo input box per un giocatore\r\n  const addPlayerInput = () => {\r\n    if (inputPlayers.length < 15) {\r\n      const newId = inputPlayers.length > 0 \r\n        ? Math.max(...inputPlayers.map(p => p.id)) + 1 \r\n        : 1;\r\n      setInputPlayers([...inputPlayers, { id: newId, name: '' }]);\r\n    }\r\n  };\r\n  \r\n  // Aggiorna il nome di un giocatore negli input\r\n  const updatePlayerName = (id, name) => {\r\n    setInputPlayers(\r\n      inputPlayers.map(input => \r\n        input.id === id ? { ...input, name } : input\r\n      )\r\n    );\r\n  };\r\n  \r\n  // Rimuove un input di giocatore\r\n  const removePlayerInput = (id) => {\r\n    if (inputPlayers.length > 1) {\r\n      setInputPlayers(inputPlayers.filter(input => input.id !== id));\r\n    }\r\n  };\r\n  \r\n  // Avvia una nuova partita\r\n  const startGame = () => {\r\n    // Verifica che ci siano almeno 2 giocatori validi\r\n    const validPlayers = inputPlayers\r\n      .filter(input => input.name.trim() !== '')\r\n      .map(input => input.name.trim());\r\n    \r\n    if (validPlayers.length < 2) {\r\n      alert(t.notEnoughPlayersError);\r\n      return;\r\n    }\r\n    \r\n    setPlayers(validPlayers);\r\n    \r\n    // NUOVO: Inizializza i punteggi per tutti i giocatori a 0\r\n    const initialPenalties = {};\r\n    validPlayers.forEach(player => {\r\n      initialPenalties[player] = 0;\r\n    });\r\n    setPlayerPenalties(initialPenalties);\r\n    \r\n    setGameState('roomSelection');\r\n  };\r\n  \r\n  // Gestisce il tasto Enter negli input dei giocatori\r\n  const handleKeyPress = (e, id, index) => {\r\n    if (e.key === 'Enter') {\r\n      if (index === inputPlayers.length - 1) {\r\n        // Se siamo sull'ultimo input, aggiungiamo un nuovo campo\r\n        addPlayerInput();\r\n      } else {\r\n        // Altrimenti spostiamo il focus al campo successivo\r\n        const nextInput = document.getElementById(`player-input-${index + 1}`);\r\n        if (nextInput) nextInput.focus();\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Carica il file backupActions nella lingua corrente\r\nconst loadBackupActions = async () => {\r\n  try {\r\n    // Determina il nome del file in base alla lingua corrente\r\n    const backupActionsFileName = `backupActions_${language}.json`;\r\n    let backupActionsModule;\r\n    \r\n    // Prima tenta di caricare dalla cartella actions\r\n    try {\r\n      // Importa il file dalla cartella actions\r\n      backupActionsModule = await import(`./actions/${backupActionsFileName}`);\r\n      console.log(`Caricato con successo: ./actions/${backupActionsFileName}`);\r\n      return backupActionsModule.default;\r\n    } catch (error) {\r\n      console.warn(`Errore nel caricamento di ./actions/${backupActionsFileName}:`, error);\r\n      \r\n      // Se non riesce, prova con la lingua inglese come fallback\r\n      try {\r\n        backupActionsModule = await import('./actions/backupActions_en.json');\r\n        console.log('Fallback: Caricato backupActions_en.json');\r\n        return backupActionsModule.default;\r\n      } catch (enError) {\r\n        console.warn('Errore nel caricamento del fallback inglese:', enError);\r\n        \r\n        // Ultimo tentativo: italiano\r\n        try {\r\n          backupActionsModule = await import('./actions/backupActions_it.json');\r\n          console.log('Fallback: Caricato backupActions_it.json');\r\n          return backupActionsModule.default;\r\n        } catch (itError) {\r\n          console.error('Impossibile caricare qualsiasi file di backup:', itError);\r\n          return {}; // Restituisce un oggetto vuoto se tutti i tentativi falliscono\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Errore generale nel caricamento dei file backupActions:', error);\r\n    return {}; // Restituisce un oggetto vuoto in caso di errore generale\r\n  }\r\n};\r\n  \r\n  // Seleziona una stanza e prepara il gioco\r\n  const selectRoom = async (room) => {\r\n    setSelectedRoom(room);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Carica il file backupActions nella lingua corrente\r\n      const backupActions = await loadBackupActions();\r\n      \r\n      // Simulazione caricamento\r\n      for (let i = 0; i <= 100; i += 10) {\r\n        setLoadingProgress(i);\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n      }\r\n      \r\n      // Resetta il contatore delle azioni\r\n      setActionsCounter(0);\r\n      \r\n      // Resetta lo stato dei giochi speciali\r\n      setActiveSpecialGame(null);\r\n      setSpecialGamePlayer(null);\r\n      setCringeOrClassyState(null);\r\n      setCringeOrClassyResult(null);\r\n      setWouldYouRatherContent(null);\r\n      \r\n      // NUOVO: Resetta il contatore dell'ultima azione speciale\r\n      setLastSpecialGameRound(prev => ({\r\n        ...prev,\r\n        [room.id]: 0\r\n      }));\r\n      \r\n      // Distribuisci i giochi speciali in modo uniforme ma casuale\r\n      const gamePositions = distributeSpecialGames(MAX_ACTIONS_PER_GAME, room.id);\r\n      \r\n      // Resetta tutti gli stati dei giochi speciali\r\n      setSpecialGamesUsed(prev => ({\r\n        ...prev,\r\n        [room.id]: {\r\n          bouncer: false,\r\n          pointFinger: false,\r\n          infamata: false,\r\n          truthOrDare: false,\r\n          ilPezzoGrosso: false,\r\n          cringeOrClassy: false,\r\n          wouldYouRather: false,\r\n          chatDetective: false,\r\n          newRule: false,\r\n          tuttoHaUnPrezzo: false,\r\n          tuttiQuelliChe: false,\r\n          penitenzeGruppo: false,\r\n          penitenzaRandom: false,\r\n          nonHoMai: false,\r\n          chiEPiuProbabile: false,\r\n          happyHour: false,\r\n          oneVsOne: false\r\n        }\r\n      }));\r\n      \r\n      // Imposta i round per ogni gioco speciale\r\n      setSpecialGamesRound(prev => ({\r\n        ...prev,\r\n        [room.id]: {\r\n          bouncer: gamePositions.bouncer || 15,\r\n          pointFinger: gamePositions.pointFinger || 30,\r\n          infamata: gamePositions.infamata || 20,\r\n          truthOrDare: gamePositions.truthOrDare || 25,\r\n          ilPezzoGrosso: gamePositions.ilPezzoGrosso || 35,\r\n          cringeOrClassy: gamePositions.cringeOrClassy || 40,\r\n          wouldYouRather: gamePositions.wouldYouRather || 10,\r\n          chatDetective: gamePositions.chatDetective || 45,\r\n          newRule: gamePositions.newRule || 5,\r\n          tuttoHaUnPrezzo: gamePositions.tuttoHaUnPrezzo || 18,\r\n          tuttiQuelliChe: gamePositions.tuttiQuelliChe || 22,\r\n          penitenzeGruppo: gamePositions.penitenzeGruppo || 13,\r\n          penitenzaRandom: gamePositions.penitenzaRandom || 28,\r\n          nonHoMai: gamePositions.nonHoMai || 33,\r\n          chiEPiuProbabile: gamePositions.chiEPiuProbabile || 24,\r\n          happyHour: gamePositions.happyHour || 38,\r\n          oneVsOne: gamePositions.oneVsOne || 42\r\n        }\r\n      }));\r\n      \r\n      // Resetta la lista dei debiti quando si inizia una nuova stanza\r\n      if (room.id !== selectedRoom?.id) {\r\n        setDebtList([]);\r\n      }\r\n      \r\n      // Carica le azioni di gruppo dal backup\r\n      if (backupActions.groupActions && backupActions.groupActions.length > 0) {\r\n        // Mescola le azioni di gruppo e seleziona fino a 15 per questa partita\r\n        // (aumentato da 10 per garantire abbastanza azioni uniche)\r\n        const shuffledGroupActions = [...backupActions.groupActions]\r\n          .sort(() => Math.random() - 0.5)\r\n          .slice(0, 15);\r\n        \r\n        setGroupActionsPool(shuffledGroupActions);\r\n        \r\n        // Determina in quali posizioni dovrebbero apparire le azioni di gruppo\r\n        // Ora vogliamo 8 azioni di gruppo durante la partita\r\n        const positions = [];\r\n        \r\n        // Dividiamo la partita in segmenti per distribuire le azioni di gruppo\r\n        // Escludiamo le prime 2 azioni e le ultime 5 per non avere azioni di gruppo all'inizio o alla fine\r\n        const startPosition = 2;\r\n        const endPosition = MAX_ACTIONS_PER_GAME - 5;\r\n        const availableRange = endPosition - startPosition;\r\n        \r\n        // Calcoliamo quante azioni normali dovrebbero esserci tra ogni azione di gruppo\r\n        // Per avere 8 azioni di gruppo, avremo bisogno di 7 intervalli\r\n        const interval = Math.floor(availableRange / 8);\r\n        \r\n        // Garantiamo almeno 2 azioni normali tra ogni azione di gruppo\r\n        const minSpacing = 2;\r\n        \r\n        // Generiamo le 8 posizioni con un po' di randomicità ma mantenendo la distanza minima\r\n        for (let i = 0; i < 8; i++) {\r\n          // Base position nel suo segmento\r\n          const basePosition = startPosition + (i * interval);\r\n          \r\n          // Aggiungiamo un po' di randomicità ma manteniamo la distanza minima\r\n          // La randomicità è limitata per non sconfinare nel segmento successivo\r\n          const maxOffset = Math.max(0, Math.min(interval - minSpacing, 3));\r\n          const randomOffset = Math.floor(Math.random() * maxOffset);\r\n          \r\n          positions.push(basePosition + randomOffset);\r\n        }\r\n        \r\n        setGroupActionPositions(positions);\r\n        setGroupActionsShown(0);\r\n      }\r\n      \r\n      // Se è la modalità Neon Roulette, combina azioni da tutte le altre stanze\r\n      if (room.id === 'neonRoulette') {\r\n        // Preparazione degli array per le azioni da ciascuna stanza\r\n        let redRoomActions = [];\r\n        let darkRoomActions = [];\r\n        let coppieActions = [];\r\n        let partyActions = [];\r\n        let specialGameActions = [];\r\n        \r\n        // Raccogli azioni dal file backup per ogni stanza\r\n        if (backupActions.redRoom && backupActions.redRoom.length > 0) {\r\n          redRoomActions = [...backupActions.redRoom];\r\n        }\r\n        \r\n        if (backupActions.darkRoom && backupActions.darkRoom.length > 0) {\r\n          darkRoomActions = [...backupActions.darkRoom];\r\n        }\r\n        \r\n        if (backupActions.coppie && backupActions.coppie.length > 0) {\r\n          coppieActions = [...backupActions.coppie];\r\n        }\r\n        \r\n        if (backupActions.party && backupActions.party.length > 0) {\r\n          partyActions = [...backupActions.party];\r\n        }\r\n        \r\n        // MIGLIORAMENTO: Raccogliamo anche le azioni dai giochi speciali\r\n        if (backupActions.specialGames) {\r\n          // Raccogliamo tutte le azioni dei giochi speciali\r\n          Object.values(backupActions.specialGames).forEach(gameData => {\r\n            if (typeof gameData === 'object' && gameData.text) {\r\n              specialGameActions.push({ text: gameData.text });\r\n            }\r\n            \r\n            // Per i giochi con sottosezioni (come tuttoHaUnPrezzo o tuttiQuelliChe)\r\n            if (typeof gameData === 'object') {\r\n              if (gameData.redRoom && Array.isArray(gameData.redRoom)) {\r\n                specialGameActions = [...specialGameActions, ...gameData.redRoom.map(text => ({ text }))];\r\n              }\r\n              if (gameData.darkRoom && Array.isArray(gameData.darkRoom)) {\r\n                specialGameActions = [...specialGameActions, ...gameData.darkRoom.map(text => ({ text }))];\r\n              }\r\n              if (gameData.party && Array.isArray(gameData.party)) {\r\n                specialGameActions = [...specialGameActions, ...gameData.party.map(text => ({ text }))];\r\n              }\r\n              if (gameData.rules && Array.isArray(gameData.rules)) {\r\n                specialGameActions = [...specialGameActions, ...gameData.rules.map(text => ({ text }))];\r\n              }\r\n              if (gameData.actions && Array.isArray(gameData.actions)) {\r\n                specialGameActions = [...specialGameActions, ...gameData.actions.map(text => ({ text }))];\r\n              }\r\n            }\r\n          });\r\n        }\r\n        \r\n        // Se qualche categoria ha poche o nessuna azione, usa il fallback\r\n        // Nota: Il roomContent è ora sostituito con traduzioni\r\n        const roomContent = {\r\n          redRoom: { text: t.noActionAvailable },\r\n          darkRoom: { text: t.noActionAvailable },\r\n          coppie: { text: t.noActionAvailable },\r\n          party: { text: t.noActionAvailable }\r\n        };\r\n        \r\n        if (redRoomActions.length < 5 && roomContent.redRoom) {\r\n          redRoomActions = [...redRoomActions, ...roomContent.redRoom];\r\n        }\r\n        \r\n        if (darkRoomActions.length < 5 && roomContent.darkRoom) {\r\n          darkRoomActions = [...darkRoomActions, ...roomContent.darkRoom];\r\n        }\r\n        \r\n        if (coppieActions.length < 5 && roomContent.coppie) {\r\n          coppieActions = [...coppieActions, ...roomContent.coppie];\r\n        }\r\n        \r\n        if (partyActions.length < 5 && roomContent.party) {\r\n          partyActions = [...partyActions, ...roomContent.party];\r\n        }\r\n        \r\n        // Mescola ciascun gruppo di azioni separatamente\r\n        redRoomActions = redRoomActions.sort(() => Math.random() - 0.5);\r\n        darkRoomActions = darkRoomActions.sort(() => Math.random() - 0.5);\r\n        coppieActions = coppieActions.sort(() => Math.random() - 0.5);\r\n        partyActions = partyActions.sort(() => Math.random() - 0.5);\r\n        specialGameActions = specialGameActions.sort(() => Math.random() - 0.5);\r\n        \r\n        // Calcola quante azioni prendere da ciascuna categoria per un totale di circa 100\r\n        const maxPerCategory = 20; // 20 azioni per categoria per fare spazio ai giochi speciali\r\n        \r\n        // Prendi un numero bilanciato di azioni da ciascuna categoria\r\n        const selectedRedRoomActions = redRoomActions.slice(0, Math.min(maxPerCategory, redRoomActions.length));\r\n        const selectedDarkRoomActions = darkRoomActions.slice(0, Math.min(maxPerCategory, darkRoomActions.length));\r\n        const selectedCoppieActions = coppieActions.slice(0, Math.min(maxPerCategory, coppieActions.length));\r\n        const selectedPartyActions = partyActions.slice(0, Math.min(maxPerCategory, partyActions.length));\r\n        const selectedSpecialGameActions = specialGameActions.slice(0, Math.min(maxPerCategory, specialGameActions.length));\r\n        \r\n        // Combina tutte le azioni selezionate\r\n        const combinedActions = [\r\n          ...selectedRedRoomActions,\r\n          ...selectedDarkRoomActions,\r\n          ...selectedCoppieActions,\r\n          ...selectedPartyActions,\r\n          ...selectedSpecialGameActions\r\n        ];\r\n        \r\n        // Mescola le azioni combinate\r\n        const shuffledActions = combinedActions.sort(() => Math.random() - 0.5);\r\n        \r\n        console.log(t.logMessages.neonRouletteStats);\r\n        console.log(t.logMessages.redRoomStats.replace('{count}', selectedRedRoomActions.length));\r\n        console.log(t.logMessages.darkRoomStats.replace('{count}', selectedDarkRoomActions.length));\r\n        console.log(t.logMessages.coppieStats.replace('{count}', selectedCoppieActions.length));\r\n        console.log(t.logMessages.partyStats.replace('{count}', selectedPartyActions.length));\r\n        console.log(\"Special Games: \" + selectedSpecialGameActions.length + \" azioni\");\r\n        console.log(t.logMessages.totalStats.replace('{count}', shuffledActions.length));\r\n        \r\n        // Aggiorna il pool di azioni per la Neon Roulette\r\n        setRoomActionsPool(prev => ({\r\n          ...prev,\r\n          neonRoulette: shuffledActions\r\n        }));\r\n      } \r\n      // Altrimenti, carica le azioni normali della stanza\r\n      else {\r\n        // Ottieni azioni dal backup file\r\n        const backupActionsForRoom = backupActions[room.id] || [];\r\n        \r\n        if (backupActionsForRoom.length > 0) {\r\n          // Mescola e seleziona azioni casuali\r\n          const shuffledBackupActions = [...backupActionsForRoom]\r\n            .sort(() => Math.random() - 0.5)\r\n            .slice(0, Math.max(MAX_ACTIONS_PER_GAME * 2, 50));\r\n          \r\n          // Aggiorna le azioni disponibili\r\n          setRoomActionsPool(prev => ({\r\n            ...prev,\r\n            [room.id]: shuffledBackupActions\r\n          }));\r\n        }\r\n      }\r\n      \r\n      // Resetta l'indice delle azioni\r\n      setCurrentActionIndex(prev => ({\r\n        ...prev,\r\n        [room.id]: 0\r\n      }));\r\n      \r\n      // Resetta l'azione precedente\r\n      setPreviousAction(null);\r\n      \r\n      // Seleziona un giocatore casuale per iniziare\r\n      const randomPlayerIndex = Math.floor(Math.random() * players.length);\r\n      setCurrentPlayerIndex(randomPlayerIndex);\r\n      \r\n      // Vai alla schermata di gioco\r\n      setGameState('playing');\r\n      \r\n    } catch (error) {\r\n      console.error('Errore:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // NUOVO: Funzione per distribuire i giochi speciali nella partita\r\n  const distributeSpecialGames = (maxActions, roomId) => {\r\n    // Distanza minima voluta tra i giochi\r\n    const MIN_SPACING = 3; // Come richiesto\r\n    \r\n    // Otteniamo i giochi disponibili per questa stanza\r\n    const availableGameTypes = getAvailableSpecialGames(roomId);\r\n    \r\n    // Convertiamo i tipi numerici nei nomi dei giochi\r\n    const availableGames = availableGameTypes.map(gameType => SPECIAL_GAMES[gameType]);\r\n    \r\n    // Assicuriamoci che nella modalità Neon Roulette vengano inclusi tutti i giochi speciali\r\n    let shuffledGames = [];\r\n    if (roomId === 'neonRoulette') {\r\n      // Per Neon Roulette, includiamo TUTTI i giochi speciali\r\n      shuffledGames = [...SPECIAL_GAMES].sort(() => Math.random() - 0.5);\r\n    } else {\r\n      // Per le altre stanze, utilizziamo solo i giochi disponibili\r\n      shuffledGames = [...availableGames].sort(() => Math.random() - 0.5);\r\n    }\r\n    \r\n    // Range disponibile per la distribuzione dei giochi\r\n    const minPosition = 5; // Iniziamo dopo le prime azioni\r\n    const maxPosition = maxActions - 5; // Finiamo prima della fine\r\n    const availableRange = maxPosition - minPosition;\r\n    \r\n    // Verifica se abbiamo abbastanza spazio per tutti i giochi con la distanza minima\r\n    const minRequiredSpace = shuffledGames.length * (1 + MIN_SPACING) - MIN_SPACING;\r\n    if (minRequiredSpace > availableRange) {\r\n      console.warn(`Attenzione: non c'è abbastanza spazio per distribuire tutti i giochi con la distanza minima richiesta.`);\r\n    }\r\n    \r\n    // Calcola la dimensione ottimale dei segmenti (garantendo la distanza minima se possibile)\r\n    const segmentSize = Math.max(MIN_SPACING + 1, Math.floor(availableRange / shuffledGames.length));\r\n    \r\n    // Crea le posizioni con un po' di randomicità ma mantieni la distanza minima\r\n    const positions = {};\r\n    \r\n    shuffledGames.forEach((game, index) => {\r\n      // Base position nel suo segmento\r\n      const segmentStart = minPosition + (index * segmentSize);\r\n      // Il segmento finisce prima dell'inizio del prossimo segmento\r\n      const segmentEnd = Math.min(maxPosition, segmentStart + segmentSize - 1);\r\n      \r\n      // Se è il primo gioco, non c'è un gioco precedente\r\n      if (index === 0) {\r\n        // Posiziona il primo gioco in una posizione casuale all'interno del suo segmento\r\n        positions[game] = segmentStart + Math.floor(Math.random() * (segmentEnd - segmentStart + 1));\r\n      } else {\r\n        // Per i giochi successivi, verifica la distanza dal gioco precedente\r\n        const prevGame = shuffledGames[index - 1];\r\n        const prevPosition = positions[prevGame];\r\n        \r\n        // La posizione minima valida è prevPosition + MIN_SPACING\r\n        const minValidPosition = prevPosition + MIN_SPACING;\r\n        \r\n        // Se la posizione minima valida è oltre la fine del segmento, usa quella\r\n        if (minValidPosition > segmentEnd) {\r\n          positions[game] = minValidPosition;\r\n        } else {\r\n          // Altrimenti, scegli una posizione casuale nel range valido\r\n          positions[game] = minValidPosition + Math.floor(Math.random() * (segmentEnd - minValidPosition + 1));\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Per i giochi non disponibili in questa stanza, impostiamo una posizione\r\n    // molto alta in modo che non vengano mai attivati\r\n    SPECIAL_GAMES.forEach(game => {\r\n      if (!positions[game]) {\r\n        positions[game] = maxActions * 2; // Posizione irraggiungibile\r\n      }\r\n    });\r\n    \r\n    return positions;\r\n  };\r\n  \r\n  // Funzione per continuare dopo un'azione speciale\r\n  const nextTurnAfterSpecialGame = () => {\r\n    if (!selectedRoom) return;\r\n    const roomId = selectedRoom.id;\r\n    \r\n    // Se è in corso il gioco Obbligo Verità Debito\r\n    if (activeSpecialGame === \"truthOrDare\") {\r\n      // Rimuovi il primo giocatore dalla lista (quello che ha appena giocato)\r\n      if (truthDarePlayers.length > 0) {\r\n        const updatedPlayers = [...truthDarePlayers];\r\n        updatedPlayers.shift();\r\n        setTruthDarePlayers(updatedPlayers);\r\n        \r\n        // Se ci sono ancora giocatori da processare\r\n        if (updatedPlayers.length > 0) {\r\n          const nextPlayerIndex = updatedPlayers[0];\r\n          setSpecialGamePlayer(players[nextPlayerIndex]);\r\n          setCurrentTruthDareChoice(null);\r\n          setTruthDareContent(null);\r\n          setTruthDareState(\"choosing\");\r\n          setCurrentAction({ \r\n            text: t.truthDareNextPlayerIntro.replace('{player}', players[nextPlayerIndex])\r\n          });\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Se tutti i giocatori hanno giocato, termina il gioco speciale\r\n      setTruthDareState(\"completed\");\r\n    }\r\n    \r\n    // Aggiorna il contatore dell'ultima azione speciale\r\n    setLastSpecialGameRound(prev => ({\r\n      ...prev,\r\n      [roomId]: actionsCounter\r\n    }));\r\n    \r\n    // Resetta gli stati del gioco speciale\r\n    setActiveSpecialGame(null);\r\n    setSpecialGamePlayer(null);\r\n    setTruthDarePlayers([]);\r\n    setCurrentTruthDareChoice(null);\r\n    setTruthDareContent(null);\r\n    setTruthDareState(null);\r\n    setCringeOrClassyState(null);\r\n    setCringeOrClassyResult(null);\r\n    setWouldYouRatherContent(null);\r\n    \r\n    // Prosegui con il turno normale\r\n    nextTurn(true); // true indica che stiamo proseguendo dopo un'azione speciale\r\n  };\r\n  \r\n  // Nuova funzione per gestire la scelta di Obbligo/Verità/Debito\r\n  const handleTruthDareChoice = (choice) => {\r\n    setCurrentTruthDareChoice(choice);\r\n    \r\n    if (choice === \"truth\" || choice === \"dare\") {\r\n      // Seleziona un contenuto casuale dal pool appropriato\r\n      const pool = truthDareContentPool[choice];\r\n      if (pool && pool.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * pool.length);\r\n        const content = pool[randomIndex];\r\n        setTruthDareContent(content);\r\n      } else {\r\n        // Fallback in caso di pool vuoto\r\n        setTruthDareContent(choice === \"truth\" \r\n          ? \"Rispondi a una domanda personale che ti verrà fatta dal gruppo\"\r\n          : \"Esegui un'azione che ti verrà assegnata dal gruppo\");\r\n      }\r\n    } else {\r\n      // Per \"debt\" non mostriamo contenuto\r\n      setTruthDareContent(null);\r\n      \r\n      // Opzionale: aggiungi il debito alla lista dei debiti\r\n      const newDebt = {\r\n        player: specialGamePlayer,\r\n        status: 'active',\r\n        description: t.debts.debtDescription\r\n      };\r\n      setDebtList([...debtList, newDebt]);\r\n    }\r\n    \r\n    // Cambia lo stato del gioco\r\n    setTruthDareState(\"executing\");\r\n  };\r\n  \r\n  // NUOVO: Funzione helper per gestire i giochi speciali\r\n  const handleSpecialGame = async (gameType) => {\r\n    if (!selectedRoom) return;\r\n    const roomId = selectedRoom.id;\r\n    \r\n    // Carica le azioni dal file corretto\r\n    const backupActions = await loadBackupActions();\r\n    \r\n    // Verifica che esista la sezione specialGames nel backupActions\r\n    if (!backupActions.specialGames || !backupActions.specialGames[gameType]) {\r\n      console.error(t.logMessages.missingSpecialGame.replace('{type}', gameType));\r\n      // Continua con il prossimo turno normale in caso di errore\r\n      nextTurn();\r\n      return;\r\n    }\r\n    \r\n    // Ottieni il testo del gioco dal backup\r\n    let actionText = backupActions.specialGames[gameType].text;\r\n    \r\n    // Gestisci i vari tipi di gioco\r\n    switch (gameType) {\r\n      case \"bouncer\":\r\n        // Scegli un giocatore diverso da quello corrente\r\n        let specialPlayerIndex;\r\n        do {\r\n          specialPlayerIndex = Math.floor(Math.random() * players.length);\r\n        } while (specialPlayerIndex === currentPlayerIndex);\r\n        \r\n        setSpecialGamePlayer(players[specialPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore\r\n        actionText = actionText.replace(/{player}/g, players[specialPlayerIndex]);\r\n        break;\r\n        \r\n      case \"pointFinger\":\r\n      case \"infamata\":\r\n      case \"ilPezzoGrosso\":\r\n      case \"cringeOrClassy\":\r\n      case \"chatDetective\":\r\n      case \"nonHoMai\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Imposta direttamente il risultato casuale senza fase di votazione\r\n        if (gameType === \"cringeOrClassy\") {\r\n          const isClassy = Math.random() > 0.5;\r\n          setCringeOrClassyResult(isClassy ? 'classy' : 'cringe');\r\n          setCringeOrClassyState(\"result\"); // Passa direttamente allo stato result\r\n        }\r\n        break;\r\n      \r\n      case \"truthOrDare\":\r\n        // Crea una lista di tutti gli indici dei giocatori da processare\r\n        const playerIndices = Array.from({ length: players.length }, (_, i) => i);\r\n        \r\n        // Imposta il giocatore corrente come primo e poi mescola il resto\r\n        const currentFirst = [currentPlayerIndex];\r\n        const remainingPlayers = playerIndices.filter(idx => idx !== currentPlayerIndex);\r\n        const shuffledRemaining = remainingPlayers.sort(() => Math.random() - 0.5);\r\n        \r\n        // Combina per avere il giocatore attuale per primo e poi tutti gli altri\r\n        setTruthDarePlayers([...currentFirst, ...shuffledRemaining]);\r\n        \r\n        // Imposta lo stato iniziale del gioco\r\n        setTruthDareState(\"choosing\");\r\n        setCurrentTruthDareChoice(null);\r\n        setTruthDareContent(null);\r\n        \r\n        // Carica il pool di contenuti per verità e obblighi specifici per la stanza\r\n        let truthPool = [];\r\n        let darePool = [];\r\n\r\n        if (backupActions.truthDareGame) {\r\n          // Prima cerca contenuti specifici per la stanza\r\n          if (backupActions.truthDareGame.truth && backupActions.truthDareGame.truth[roomId]) {\r\n            truthPool = [...backupActions.truthDareGame.truth[roomId]];\r\n          } \r\n          // Fallback sul pool generico\r\n          else if (backupActions.truthDareGame.truth) {\r\n            truthPool = [...backupActions.truthDareGame.truth];\r\n          }\r\n          \r\n          if (backupActions.truthDareGame.dare && backupActions.truthDareGame.dare[roomId]) {\r\n            darePool = [...backupActions.truthDareGame.dare[roomId]];\r\n          } \r\n          // Fallback sul pool generico\r\n          else if (backupActions.truthDareGame.dare) {\r\n            darePool = [...backupActions.truthDareGame.dare];\r\n          }\r\n          \r\n          // Per Neon Roulette, mescola contenuti da tutte le stanze\r\n          if (roomId === 'neonRoulette') {\r\n            truthPool = [];\r\n            darePool = [];\r\n            \r\n            if (backupActions.truthDareGame.truth) {\r\n              if (backupActions.truthDareGame.truth.party) truthPool.push(...backupActions.truthDareGame.truth.party);\r\n              if (backupActions.truthDareGame.truth.redRoom) truthPool.push(...backupActions.truthDareGame.truth.redRoom);\r\n              if (backupActions.truthDareGame.truth.darkRoom) truthPool.push(...backupActions.truthDareGame.truth.darkRoom);\r\n              if (backupActions.truthDareGame.truth.coppie) truthPool.push(...backupActions.truthDareGame.truth.coppie);\r\n            }\r\n            \r\n            if (backupActions.truthDareGame.dare) {\r\n              if (backupActions.truthDareGame.dare.party) darePool.push(...backupActions.truthDareGame.dare.party);\r\n              if (backupActions.truthDareGame.dare.redRoom) darePool.push(...backupActions.truthDareGame.dare.redRoom);\r\n              if (backupActions.truthDareGame.dare.darkRoom) darePool.push(...backupActions.truthDareGame.dare.darkRoom);\r\n              if (backupActions.truthDareGame.dare.coppie) darePool.push(...backupActions.truthDareGame.dare.coppie);\r\n            }\r\n            \r\n            // Se non ci sono pool specifici, usa quelli generici\r\n            if (truthPool.length === 0 && backupActions.truthDareGame.truth) {\r\n              truthPool = [...backupActions.truthDareGame.truth];\r\n            }\r\n            if (darePool.length === 0 && backupActions.truthDareGame.dare) {\r\n              darePool = [...backupActions.truthDareGame.dare];\r\n            }\r\n          }\r\n          \r\n          // Mescola i pool\r\n          setTruthDareContentPool({\r\n            truth: truthPool.sort(() => Math.random() - 0.5),\r\n            dare: darePool.sort(() => Math.random() - 0.5)\r\n          });\r\n        }\r\n        \r\n        // Il giocatore corrente sarà il primo a giocare\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = t.truthDareIntro.replace('{player}', players[currentPlayerIndex]);\r\n        break;\r\n        \r\n      case \"wouldYouRather\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Seleziona una domanda tematizzata in base alla stanza corrente\r\n        let wouldYouRatherQuestions = [];\r\n        \r\n        // Cerca prima le domande specifiche per la stanza\r\n        if (backupActions.wouldYouRather && backupActions.wouldYouRather[roomId] && \r\n            backupActions.wouldYouRather[roomId].length > 0) {\r\n          wouldYouRatherQuestions = backupActions.wouldYouRather[roomId];\r\n        } \r\n        // Se non ci sono domande specifiche per la stanza o siamo in Neon Roulette, usa il pool generico\r\n        else if (roomId === 'neonRoulette') {\r\n          // Per Neon Roulette, raccogliamo domande da tutte le stanze\r\n          const allQuestions = [];\r\n          if (backupActions.wouldYouRather) {\r\n            if (backupActions.wouldYouRather.party) allQuestions.push(...backupActions.wouldYouRather.party);\r\n            if (backupActions.wouldYouRather.redRoom) allQuestions.push(...backupActions.wouldYouRather.redRoom);\r\n            if (backupActions.wouldYouRather.darkRoom) allQuestions.push(...backupActions.wouldYouRather.darkRoom);\r\n            if (backupActions.wouldYouRather.coppie) allQuestions.push(...backupActions.wouldYouRather.coppie);\r\n          }\r\n          wouldYouRatherQuestions = allQuestions.length > 0 ? allQuestions : (backupActions.wouldYouRather || []);\r\n        }\r\n        // Fallback al pool generico se non ci sono domande specifiche\r\n        else if (backupActions.wouldYouRather && backupActions.wouldYouRather.length > 0) {\r\n          wouldYouRatherQuestions = backupActions.wouldYouRather;\r\n        }\r\n        \r\n        // Se abbiamo domande, seleziona una casualmente\r\n        if (wouldYouRatherQuestions.length > 0) {\r\n          const randomIndex = Math.floor(Math.random() * wouldYouRatherQuestions.length);\r\n          const question = wouldYouRatherQuestions[randomIndex].text;\r\n          \r\n          // Imposta la domanda per uso futuro\r\n          setWouldYouRatherContent(question);\r\n          \r\n          // Aggiungi la domanda al testo dell'azione CON UN A CAPO\r\n          actionText += \"\\n\\n\" + question;\r\n        }\r\n        break;\r\n        \r\n      case \"newRule\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Seleziona una regola casuale, se disponibile nel backup\r\n        if (backupActions.specialGames[gameType].rules && backupActions.specialGames[gameType].rules.length > 0) {\r\n          const rules = backupActions.specialGames[gameType].rules;\r\n          const randomRuleIndex = Math.floor(Math.random() * rules.length);\r\n          const selectedRule = rules[randomRuleIndex];\r\n          \r\n          // Sostituisci [regola] con la regola selezionata\r\n          actionText = actionText.replace(/\\[regola\\]/g, selectedRule);\r\n        } else {\r\n          // Fallback se non ci sono regole disponibili\r\n          actionText = actionText.replace(/\\[regola\\]/g, \"fare qualcosa di specifico\");\r\n        }\r\n        break;\r\n        \r\n      case \"tuttoHaUnPrezzo\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Selezioniamo una sfida appropriata in base alla stanza\r\n        if (backupActions.specialGames && backupActions.specialGames.tuttoHaUnPrezzo) {\r\n          let challenges = [];\r\n          \r\n          if (roomId === 'redRoom' && backupActions.specialGames.tuttoHaUnPrezzo.redRoom) {\r\n            challenges = backupActions.specialGames.tuttoHaUnPrezzo.redRoom;\r\n          } else if (roomId === 'party' && backupActions.specialGames.tuttoHaUnPrezzo.party) {\r\n            challenges = backupActions.specialGames.tuttoHaUnPrezzo.party;\r\n          } else if (roomId === 'neonRoulette') {\r\n            // Per Neon Roulette, usa una combinazione di sfide da tutte le stanze disponibili\r\n            const allChallenges = [];\r\n            if (backupActions.specialGames.tuttoHaUnPrezzo.redRoom) \r\n              allChallenges.push(...backupActions.specialGames.tuttoHaUnPrezzo.redRoom);\r\n            if (backupActions.specialGames.tuttoHaUnPrezzo.party) \r\n              allChallenges.push(...backupActions.specialGames.tuttoHaUnPrezzo.party);\r\n            \r\n            challenges = allChallenges;\r\n          }\r\n          \r\n          if (challenges && challenges.length > 0) {\r\n            // Seleziona una sfida casuale\r\n            const randomIndex = Math.floor(Math.random() * challenges.length);\r\n            const challenge = challenges[randomIndex];\r\n            \r\n            // Aggiungi la sfida al testo dell'azione\r\n            actionText += \"\\n\\n\" + challenge;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case \"tuttiQuelliChe\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Selezioniamo una sfida appropriata in base alla stanza\r\n        if (backupActions.specialGames && backupActions.specialGames.tuttiQuelliChe) {\r\n          let challenges = [];\r\n          \r\n          if (roomId === 'redRoom' && backupActions.specialGames.tuttiQuelliChe.redRoom) {\r\n            challenges = backupActions.specialGames.tuttiQuelliChe.redRoom;\r\n          } else if (roomId === 'darkRoom' && backupActions.specialGames.tuttiQuelliChe.darkRoom) {\r\n            challenges = backupActions.specialGames.tuttiQuelliChe.darkRoom;\r\n          } else if (roomId === 'party' && backupActions.specialGames.tuttiQuelliChe.party) {\r\n            challenges = backupActions.specialGames.tuttiQuelliChe.party;\r\n          } else if (roomId === 'neonRoulette') {\r\n            // Per Neon Roulette, usa una combinazione di sfide da tutte le stanze disponibili\r\n            const allChallenges = [];\r\n            if (backupActions.specialGames.tuttiQuelliChe.redRoom) \r\n              allChallenges.push(...backupActions.specialGames.tuttiQuelliChe.redRoom);\r\n            if (backupActions.specialGames.tuttiQuelliChe.darkRoom) \r\n              allChallenges.push(...backupActions.specialGames.tuttiQuelliChe.darkRoom);\r\n            if (backupActions.specialGames.tuttiQuelliChe.party)\r\n              allChallenges.push(...backupActions.specialGames.tuttiQuelliChe.party);\r\n            \r\n            challenges = allChallenges;\r\n          }\r\n          \r\n          if (challenges && challenges.length > 0) {\r\n            // Seleziona una sfida casuale\r\n            const randomIndex = Math.floor(Math.random() * challenges.length);\r\n            const challenge = challenges[randomIndex];\r\n            \r\n            // Aggiungi la sfida al testo dell'azione\r\n            actionText += \"\\n\\n\" + challenge;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case \"penitenzeGruppo\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Selezioniamo una sfida appropriata in base alla stanza\r\n        if (backupActions.specialGames && backupActions.specialGames.penitenzeGruppo) {\r\n          let challenges = [];\r\n          \r\n          if (roomId === 'redRoom' && backupActions.specialGames.penitenzeGruppo.redRoom) {\r\n            challenges = backupActions.specialGames.penitenzeGruppo.redRoom;\r\n          } else if (roomId === 'darkRoom' && backupActions.specialGames.penitenzeGruppo.darkRoom) {\r\n            challenges = backupActions.specialGames.penitenzeGruppo.darkRoom;\r\n          } else if (roomId === 'party' && backupActions.specialGames.penitenzeGruppo.party) {\r\n            challenges = backupActions.specialGames.penitenzeGruppo.party;\r\n          } else if (roomId === 'neonRoulette') {\r\n            // Per Neon Roulette, usa una combinazione di sfide da tutte le stanze disponibili\r\n            const allChallenges = [];\r\n            if (backupActions.specialGames.penitenzeGruppo.redRoom) \r\n              allChallenges.push(...backupActions.specialGames.penitenzeGruppo.redRoom);\r\n            if (backupActions.specialGames.penitenzeGruppo.darkRoom) \r\n              allChallenges.push(...backupActions.specialGames.penitenzeGruppo.darkRoom);\r\n            if (backupActions.specialGames.penitenzeGruppo.party)\r\n              allChallenges.push(...backupActions.specialGames.penitenzeGruppo.party);\r\n            \r\n            challenges = allChallenges;\r\n          }\r\n          \r\n          if (challenges && challenges.length > 0) {\r\n            // Seleziona una sfida casuale\r\n            const randomIndex = Math.floor(Math.random() * challenges.length);\r\n            const challenge = challenges[randomIndex];\r\n            \r\n            // Aggiungi la sfida al testo dell'azione\r\n            actionText += \"\\n\\n\" + challenge;\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case \"penitenzaRandom\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Selezioniamo una sfida appropriata in base alla stanza\r\n        if (backupActions.specialGames && backupActions.specialGames.penitenzaRandom) {\r\n          let challenges = [];\r\n          \r\n          if (roomId === 'redRoom' && backupActions.specialGames.penitenzaRandom.redRoom) {\r\n            challenges = backupActions.specialGames.penitenzaRandom.redRoom;\r\n          } else if (roomId === 'darkRoom' && backupActions.specialGames.penitenzaRandom.darkRoom) {\r\n            challenges = backupActions.specialGames.penitenzaRandom.darkRoom;\r\n          } else if (roomId === 'party' && backupActions.specialGames.penitenzaRandom.party) {\r\n            challenges = backupActions.specialGames.penitenzaRandom.party;\r\n          } else if (roomId === 'neonRoulette') {\r\n            // Per Neon Roulette, usa una combinazione di sfide da tutte le stanze disponibili\r\n            const allChallenges = [];\r\n            if (backupActions.specialGames.penitenzaRandom.redRoom) \r\n              allChallenges.push(...backupActions.specialGames.penitenzaRandom.redRoom);\r\n            if (backupActions.specialGames.penitenzaRandom.darkRoom) \r\n              allChallenges.push(...backupActions.specialGames.penitenzaRandom.darkRoom);\r\n            if (backupActions.specialGames.penitenzaRandom.party)\r\n              allChallenges.push(...backupActions.specialGames.penitenzaRandom.party);\r\n            \r\n            challenges = allChallenges;\r\n          }\r\n          \r\n          if (challenges && challenges.length > 0) {\r\n            // Seleziona una sfida casuale\r\n            const randomIndex = Math.floor(Math.random() * challenges.length);\r\n            const challenge = challenges[randomIndex];\r\n            \r\n            // Aggiungi la sfida al testo dell'azione\r\n            actionText += \"\\n\\n\" + challenge;\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case \"chiEPiuProbabile\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Seleziona una domanda tematizzata in base alla stanza corrente\r\n        let chiEPiuProbabileQuestions = [];\r\n\r\n        // Cerca prima le domande specifiche per la stanza\r\n        if (backupActions.specialGames && backupActions.specialGames.chiEPiuProbabile) {\r\n          if (backupActions.specialGames.chiEPiuProbabile[roomId] && \r\n              backupActions.specialGames.chiEPiuProbabile[roomId].length > 0) {\r\n            chiEPiuProbabileQuestions = backupActions.specialGames.chiEPiuProbabile[roomId];\r\n          } \r\n          // Per Neon Roulette, raccogliamo domande da tutte le stanze\r\n          else if (roomId === 'neonRoulette') {\r\n            const allQuestions = [];\r\n            if (backupActions.specialGames.chiEPiuProbabile.party) \r\n              allQuestions.push(...backupActions.specialGames.chiEPiuProbabile.party);\r\n            if (backupActions.specialGames.chiEPiuProbabile.redRoom) \r\n              allQuestions.push(...backupActions.specialGames.chiEPiuProbabile.redRoom);\r\n            if (backupActions.specialGames.chiEPiuProbabile.darkRoom) \r\n              allQuestions.push(...backupActions.specialGames.chiEPiuProbabile.darkRoom);\r\n            if (backupActions.specialGames.chiEPiuProbabile.coppie) \r\n              allQuestions.push(...backupActions.specialGames.chiEPiuProbabile.coppie);\r\n            \r\n            chiEPiuProbabileQuestions = allQuestions;\r\n          }\r\n          // Fallback alle actions generiche se non ci sono domande specifiche\r\n          else if (backupActions.specialGames.chiEPiuProbabile.actions && \r\n                   backupActions.specialGames.chiEPiuProbabile.actions.length > 0) {\r\n            chiEPiuProbabileQuestions = backupActions.specialGames.chiEPiuProbabile.actions;\r\n          }\r\n        }\r\n\r\n        // Se abbiamo domande, seleziona una casualmente\r\n        if (chiEPiuProbabileQuestions.length > 0) {\r\n          const randomIndex = Math.floor(Math.random() * chiEPiuProbabileQuestions.length);\r\n          const question = chiEPiuProbabileQuestions[randomIndex];\r\n          \r\n          // Aggiungi la domanda all'azione con un a capo\r\n          actionText += \"\\n\\n\" + question;\r\n        }\r\n        break;\r\n\r\n      case \"happyHour\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Genera un numero casuale di penalità tra 1 e 3\r\n        const penaltyCount = Math.floor(Math.random() * 3) + 1;\r\n        \r\n        // Sostituisci {count} con il numero di penalità\r\n        actionText = actionText.replace(/{count}/g, penaltyCount);\r\n        \r\n        // Applica le penalità a tutti i giocatori\r\n        const updatedPenalties = {...playerPenalties};\r\n        players.forEach(player => {\r\n          updatedPenalties[player] = (updatedPenalties[player] || 0) + penaltyCount;\r\n        });\r\n        setPlayerPenalties(updatedPenalties);\r\n        break;\r\n        \r\n      case \"oneVsOne\":\r\n        // Il giocatore corrente sarà il protagonista\r\n        setSpecialGamePlayer(players[currentPlayerIndex]);\r\n        \r\n        // Sostituisci {player} con il nome del giocatore corrente\r\n        actionText = actionText.replace(/{player}/g, players[currentPlayerIndex]);\r\n        \r\n        // Seleziona un altro giocatore casuale per la sfida\r\n        let opponentIndex;\r\n        do {\r\n          opponentIndex = Math.floor(Math.random() * players.length);\r\n        } while (opponentIndex === currentPlayerIndex);\r\n        \r\n        // Sostituisci {opponent} con il nome dell'avversario\r\n        actionText = actionText.replace(/{opponent}/g, players[opponentIndex]);\r\n        break;\r\n    }\r\n    \r\n    // Imposta il gioco speciale attivo\r\n    setActiveSpecialGame(gameType);\r\n    \r\n    // Marca il gioco come usato\r\n    setSpecialGamesUsed(prev => ({\r\n      ...prev,\r\n      [roomId]: {\r\n        ...prev[roomId],\r\n        [gameType]: true\r\n      }\r\n    }));\r\n    \r\n    // Imposta l'azione corrente\r\n    setCurrentAction({ text: actionText });\r\n    \r\n    // Aggiorna il contatore dell'ultima azione speciale\r\n    setLastSpecialGameRound(prev => ({\r\n      ...prev,\r\n      [roomId]: actionsCounter\r\n    }));\r\n  };\r\n  \r\n  // Funzione dedicata per aggiornare l'azione corrente\r\n  const updateCurrentAction = async () => {\r\n    if (!selectedRoom) return;\r\n    \r\n    const roomId = selectedRoom.id;\r\n    \r\n    // Carica le azioni dal file di backup\r\n    const backupActions = await loadBackupActions();\r\n\r\n    // Verifica se è il momento di mostrare un'azione di gruppo\r\n    if (groupActionsPool.length > 0 && \r\n        groupActionPositions.includes(actionsCounter) && \r\n        groupActionsShown < 8) {  // Modificato da 2 a 8\r\n      \r\n      // Seleziona un'azione di gruppo casuale\r\n      const randomIndex = Math.floor(Math.random() * groupActionsPool.length);\r\n      const groupAction = groupActionsPool[randomIndex];\r\n      \r\n      // Rimuovi questa azione dal pool per evitare duplicati\r\n      const updatedPool = [...groupActionsPool];\r\n      updatedPool.splice(randomIndex, 1);\r\n      setGroupActionsPool(updatedPool);\r\n      \r\n      // Imposta l'azione di gruppo come azione corrente\r\n      setCurrentAction({ text: groupAction.text });\r\n      \r\n      // Incrementa il contatore di azioni di gruppo mostrate\r\n      setGroupActionsShown(prev => prev + 1);\r\n      \r\n      // Incrementa il contatore delle azioni\r\n      setActionsCounter(prev => prev + 1);\r\n      \r\n      return;\r\n    }\r\n    \r\n    // Verifica se ci sono abbastanza azioni dall'ultima azione speciale\r\n    const actionsSinceLastSpecial = actionsCounter - lastSpecialGameRound[roomId];\r\n    const canShowSpecialGame = actionsSinceLastSpecial >= MIN_ACTIONS_BETWEEN_SPECIAL_GAMES;\r\n    \r\n    // Controlla se è il momento di mostrare un gioco speciale\r\n    if (canShowSpecialGame && actionsCounter < MAX_ACTIONS_PER_GAME - 1) {\r\n      // Otteniamo i giochi disponibili per questa stanza\r\n      const availableGameTypes = getAvailableSpecialGames(roomId);\r\n      \r\n      // Convertiamo i tipi numerici nei nomi dei giochi\r\n      const availableGames = availableGameTypes.map(gameType => SPECIAL_GAMES[gameType]);\r\n      \r\n      // Per Neon Roulette, assicuriamoci che tutti i giochi siano considerati\r\n      const gamesToCheck = roomId === 'neonRoulette' ? SPECIAL_GAMES : availableGames;\r\n      \r\n      // Trova il gioco non ancora usato con la posizione più vicina alla posizione attuale\r\n      let nextGameToShow = null;\r\n      let nextGamePosition = Infinity;\r\n      \r\n      for (const gameType of gamesToCheck) {\r\n        const gamePosition = specialGamesRound[roomId][gameType];\r\n        \r\n        // Verifica se il gioco non è ancora stato usato e se è il momento giusto\r\n        if (!specialGamesUsed[roomId][gameType] && actionsCounter >= gamePosition && gamePosition < nextGamePosition) {\r\n          nextGameToShow = gameType;\r\n          nextGamePosition = gamePosition;\r\n        }\r\n      }\r\n      \r\n      // Se abbiamo trovato un gioco da mostrare, mostralo\r\n      if (nextGameToShow) {\r\n        handleSpecialGame(nextGameToShow);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    const currentPool = roomActionsPool[roomId];\r\n    let index = currentActionIndex[roomId];\r\n    \r\n    // Se non ci sono azioni nel pool, usa quelle predefinite\r\n    if (!currentPool || currentPool.length === 0) {\r\n      console.log(t.logMessages.noActionsInPool);\r\n      \r\n      // Per Neon Roulette, raccogliamo azioni dal fallback di tutte le stanze in modo bilanciato\r\n      if (roomId === 'neonRoulette') {\r\n        // Crea un pool di fallback per ogni stanza\r\n        const fallbackTexts = [\r\n          { text: t.noActionAvailable },\r\n          { text: t.noActionAvailable },\r\n          { text: t.noActionAvailable }\r\n        ];\r\n        \r\n        if (fallbackTexts.length > 0) {\r\n          const randomIndex = Math.floor(Math.random() * fallbackTexts.length);\r\n          setCurrentAction({ text: fallbackTexts[randomIndex].text });\r\n        } else {\r\n          setCurrentAction({ text: t.noActionAvailable });\r\n        }\r\n      } \r\n      // Per altre stanze, usa il fallback normale\r\n      else {\r\n        setCurrentAction({ text: t.noActionAvailable });\r\n      }\r\n      \r\n      // Incrementa il contatore delle azioni (anche per il fallback)\r\n      setActionsCounter(prev => prev + 1);\r\n      \r\n      return;\r\n    }\r\n    \r\n    // Se abbiamo esaurito le azioni, ricomincia\r\n    let adjustedIndex = index % currentPool.length;\r\n    \r\n    // Verifica se è la stessa dell'azione precedente ed evita duplicati\r\n    if (previousAction !== null) {\r\n      // Prova fino a 5 volte a trovare un'azione diversa (per evitare loop infiniti)\r\n      let attempts = 0;\r\n      let tempAction = currentPool[adjustedIndex].text;\r\n      \r\n      while (tempAction === previousAction && attempts < 5 && currentPool.length > 1) {\r\n        // Incrementa l'indice e prova con un'altra azione\r\n        index = (index + 1) % currentPool.length;\r\n        adjustedIndex = index;\r\n        tempAction = currentPool[adjustedIndex].text;\r\n        attempts++;\r\n      }\r\n      \r\n      // Aggiorna l'indice se è stato cambiato\r\n      if (adjustedIndex !== currentActionIndex[roomId]) {\r\n        setCurrentActionIndex(prev => ({\r\n          ...prev,\r\n          [roomId]: adjustedIndex\r\n        }));\r\n      }\r\n    }\r\n    \r\n    // Ottieni l'azione\r\n    let actionText = currentPool[adjustedIndex].text;\r\n    \r\n    // Gestisci il segnaposto playerB\r\nif (actionText.includes(\"{playerB}\")) {\r\n  // Ottieni il nome del giocatore corrente\r\n  const currentPlayer = players[currentPlayerIndex];\r\n  \r\n  // Crea una lista di tutti gli altri giocatori (escluso quello corrente)\r\n  let otherPlayers = players.filter(player => player !== currentPlayer);\r\n  \r\n  if (otherPlayers.length > 0) {\r\n    // Seleziona un giocatore casuale tra gli altri\r\n    const randomPlayerIndex = Math.floor(Math.random() * otherPlayers.length);\r\n    const randomPlayerName = otherPlayers[randomPlayerIndex];\r\n    \r\n    // Sostituisci il segnaposto con il nome del giocatore scelto\r\n    actionText = actionText.replace(/{playerB}/g, randomPlayerName);\r\n  } else {\r\n    // Fallback se non ci sono altri giocatori\r\n    actionText = actionText.replace(/{playerB}/g, \"qualcun altro\");\r\n  }\r\n}\r\n    \r\n    // Controlla prima se la frase contiene un punto interrogativo\r\n    if (actionText.includes(\"?\")) {\r\n      // Espressione regolare per catturare domande con penalità alla fine\r\n      // Questa è più flessibile e dovrebbe catturare varie forme\r\n      const questionPenaltyRegex = /\\?.*?(\\d+)\\s*penal(i|i)t(à|a)/i;\r\n      const match = actionText.match(questionPenaltyRegex);\r\n      \r\n      if (match) {\r\n        const penaltyCount = match[1];\r\n        \r\n        // Scegli una formulazione casuale\r\n        const randomQuestionAlt = t.penaltyAlternatives.questions[\r\n          Math.floor(Math.random() * t.penaltyAlternatives.questions.length)\r\n        ].replace('{count}', penaltyCount);\r\n        \r\n        // Sostituisci tutto ciò che viene dopo ? fino a \"penalità\" con la nuova formulazione\r\n        actionText = actionText.replace(/\\?(.*?)(\\d+)\\s*penal(i|i)t(à|a)/i, randomQuestionAlt);\r\n      }\r\n    }\r\n    // Se non è una domanda, controlla se termina con \"oppure X penalità\"\r\n    else {\r\n      const penaltyRegex = /\\s(oppure|o saranno|o)\\s*(\\d+)\\s*penal(i|i)t(à|a)$/i;\r\n      const match = actionText.match(penaltyRegex);\r\n      \r\n      if (match) {\r\n        const penaltyCount = match[2]; // Il secondo gruppo è il numero\r\n        \r\n        // Scegli una formulazione casuale\r\n        const randomAlt = t.penaltyAlternatives.statements[\r\n          Math.floor(Math.random() * t.penaltyAlternatives.statements.length)\r\n        ].replace('{count}', penaltyCount);\r\n        \r\n        // Sostituisci \"oppure X penalità\" con la nuova formulazione\r\n        actionText = actionText.replace(penaltyRegex, ` ${randomAlt}`);\r\n      }\r\n    }\r\n    \r\n    // Salva l'azione corrente per confrontarla la prossima volta\r\n    setPreviousAction(currentPool[adjustedIndex].text);\r\n    \r\n    // Imposta l'azione corrente\r\n    setCurrentAction({ text: actionText });\r\n    \r\n    // Incrementa il contatore delle azioni\r\n    setActionsCounter(prev => prev + 1);\r\n  };\r\n  \r\n  // NUOVO: Funzione per gestire il pulsante \"Fatto\"\r\n  const handleDone = () => {\r\n    // Passa al turno successivo senza aggiungere penalità\r\n    nextTurn();\r\n  };\r\n  \r\n  // NUOVO: Funzione per gestire il pulsante \"Paga\"\r\n  const handlePay = () => {\r\n    // Aggiungi una penalità al giocatore corrente\r\n    const currentPlayer = players[currentPlayerIndex];\r\n    setPlayerPenalties(prev => ({\r\n      ...prev,\r\n      [currentPlayer]: (prev[currentPlayer] || 0) + 1\r\n    }));\r\n    \r\n    // Passa al turno successivo\r\n    nextTurn();\r\n  };\r\n  \r\n  // Passa al turno successivo\r\n  const nextTurn = (afterSpecialAction = false) => {\r\n    const roomId = selectedRoom.id;\r\n    \r\n    // Verifica se il numero massimo di azioni è stato raggiunto\r\n    if (actionsCounter >= MAX_ACTIONS_PER_GAME - 1) {\r\n      // Segna che l'utente ha giocato la partita gratuita\r\n      setHasPlayedFreeGame(true);\r\n      localStorage.setItem('hasPlayedFreeGame', 'true');\r\n      \r\n      // NUOVO: Vai alla schermata della leaderboard invece che al game over\r\n      setGameState('leaderboard');\r\n      return;\r\n    }\r\n    \r\n    // Incrementa l'indice per la prossima volta, ma solo se non siamo in una fase speciale\r\n    if (!activeSpecialGame || afterSpecialAction) {\r\n      setCurrentActionIndex(prev => ({\r\n        ...prev,\r\n        [roomId]: prev[roomId] + 1\r\n      }));\r\n    }\r\n    \r\n    // Se c'è solo un giocatore, non cambia\r\n    if (players.length <= 1) {\r\n      setTimeout(() => {\r\n        updateCurrentAction();\r\n      }, 50);\r\n      return;\r\n    }\r\n    \r\n    // Se non siamo in un turno speciale o stiamo procedendo dopo un'azione speciale,\r\n    // seleziona un nuovo giocatore casuale\r\n    if (!activeSpecialGame || afterSpecialAction) {\r\n      // Seleziona un giocatore casuale diverso da quello attuale\r\n      let nextPlayerIndex;\r\n      do {\r\n        nextPlayerIndex = Math.floor(Math.random() * players.length);\r\n      } while (nextPlayerIndex === currentPlayerIndex);\r\n      \r\n      setCurrentPlayerIndex(nextPlayerIndex);\r\n    }\r\n    \r\n    // Piccolo timeout per assicurarsi che l'indice sia aggiornato prima di chiamare updateCurrentAction\r\n    setTimeout(() => {\r\n      updateCurrentAction();\r\n    }, 50);\r\n  };\r\n  \r\n  // NUOVO: Funzione per terminare il gioco dopo aver visualizzato la leaderboard\r\n  const endGame = () => {\r\n    // Vai alla schermata di game over\r\n    setGameState('gameOver');\r\n  };\r\n  \r\n  // Navigazione tra le schermate\r\n  const goBack = () => {\r\n    switch (gameState) {\r\n      case 'playerSetup':\r\n        setGameState('welcome');\r\n        break;\r\n      case 'roomSelection':\r\n        setGameState('playerSetup');\r\n        break;\r\n      case 'playing':\r\n        setGameState('roomSelection');\r\n        break;\r\n      case 'leaderboard': // NUOVO: Gestisci il ritorno dalla leaderboard\r\n        setGameState('gameOver');\r\n        break;\r\n      case 'gameOver':\r\n        // Se l'utente ha già giocato e non ha pagato, mostra il paywall\r\n        if (hasPlayedFreeGame && !hasPaid) {\r\n          setGameState('paywall');\r\n        } else {\r\n          setGameState('roomSelection');\r\n        }\r\n        break;\r\n      case 'paywall':\r\n        setGameState('welcome');\r\n        break;\r\n      case 'languageSelection':\r\n        setGameState('welcome');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  \r\n  // Resetta il gioco\r\n  const resetGame = () => {\r\n    setGameState('welcome');\r\n    setPlayers([]);\r\n    setInputPlayers([{ id: 1, name: '' }]);\r\n    setCurrentPlayerIndex(0);\r\n    setCurrentAction(null);\r\n    setSelectedRoom(null);\r\n    setPreviousAction(null);\r\n    setActionsCounter(0);\r\n    \r\n    // NUOVO: Resetta il contatore delle penalità\r\n    setPlayerPenalties({});\r\n    \r\n    // Resetta gli stati dei giochi speciali\r\n    setActiveSpecialGame(null);\r\n    setSpecialGamePlayer(null);\r\n    setWouldYouRatherContent(null);\r\n    \r\n    // Resetta tutti gli stati di giochi usati e round\r\n    const resetUsedGames = {};\r\n    const resetGameRounds = {};\r\n    \r\n    // Resetta per ogni stanza e ogni tipo di gioco\r\n    t.rooms.forEach(room => {\r\n      resetUsedGames[room.id] = SPECIAL_GAMES.reduce((acc, game) => {\r\n        acc[game] = false;\r\n        return acc;\r\n      }, {});\r\n      \r\n      resetGameRounds[room.id] = SPECIAL_GAMES.reduce((acc, game, index) => {\r\n        // Valori di default se non abbiamo posizioni specifiche\r\n        const defaultPositions = {\r\n          bouncer: 15,\r\n          pointFinger: 30,\r\n          infamata: 20,\r\n          truthOrDare: 25,\r\n          ilPezzoGrosso: 35,\r\n          cringeOrClassy: 40,\r\n          wouldYouRather: 10,\r\n          chatDetective: 45,\r\n          newRule: 5,\r\n          tuttoHaUnPrezzo: 18,\r\n          tuttiQuelliChe: 22,\r\n          penitenzeGruppo: 13,\r\n          penitenzaRandom: 28,\r\n          nonHoMai: 33,\r\n          chiEPiuProbabile: 24,\r\n          happyHour: 38,\r\n          oneVsOne: 42\r\n        };\r\n        acc[game] = defaultPositions[game] || 10 + (index * 10);\r\n        return acc;\r\n      }, {});\r\n    });\r\n    \r\n    setSpecialGamesUsed(resetUsedGames);\r\n    setSpecialGamesRound(resetGameRounds);\r\n    \r\n    // Resetta la lista dei debiti\r\n    setDebtList([]);\r\n    \r\n    // NUOVO: Resetta il contatore dell'ultima azione speciale\r\n    setLastSpecialGameRound({\r\n      redRoom: 0,\r\n      darkRoom: 0,\r\n      coppie: 0,\r\n      party: 0,\r\n      neonRoulette: 0\r\n    });\r\n    \r\n    // Resetta gli stati del gioco Obbligo Verità Debito\r\n    setTruthDarePlayers([]);\r\n    setCurrentTruthDareChoice(null);\r\n    setTruthDareContent(null);\r\n    setTruthDareState(null);\r\n    \r\n    // Resetta gli stati del gioco Cringe or Classy\r\n    setCringeOrClassyState(null);\r\n    setCringeOrClassyResult(null);\r\n    \r\n    // Resetta le azioni di gruppo\r\n    setGroupActionsPool([]);\r\n    setGroupActionPositions([]);\r\n    setGroupActionsShown(0);\r\n  };\r\n  \r\n  // Seleziona un'opzione di pagamento\r\n  const selectPaymentOption = (option) => {\r\n    setSelectedPaymentOption(option);\r\n  };\r\n  \r\n  // Processa il pagamento\r\n  const processPayment = () => {\r\n    if (!selectedPaymentOption) return;\r\n    \r\n    setIsProcessingPayment(true);\r\n    \r\n    // Simulazione del processo di pagamento\r\n    setTimeout(() => {\r\n      // Imposta hasPaid a true e salva in localStorage\r\n      setHasPaid(true);\r\n      localStorage.setItem('hasPaid', 'true');\r\n      \r\n      setIsProcessingPayment(false);\r\n      setSelectedPaymentOption(null);\r\n      \r\n      // Vai alla schermata di setup giocatori\r\n      setGameState('playerSetup');\r\n    }, 2000);\r\n  };\r\n  \r\n  // Reimposta lo stato di gioco per test\r\n  const resetPaywallState = () => {\r\n    localStorage.removeItem('hasPaid');\r\n    localStorage.removeItem('hasPlayedFreeGame');\r\n    setHasPaid(false);\r\n    setHasPlayedFreeGame(false);\r\n    resetGame();\r\n  };\r\n  \r\n  // Funzione helper per ottenere il messaggio appropriato per il gioco speciale corrente\r\n  const getSpecialGameMessage = () => {\r\n    if (!activeSpecialGame || !specialGamePlayer) return null;\r\n    \r\n    // Messaggi per ciascun tipo di gioco\r\n    if (activeSpecialGame === \"truthOrDare\") {\r\n      if (truthDareState === \"choosing\") {\r\n        return t.specialGames.truthOrDare.choosing.replace('{player}', specialGamePlayer);\r\n      } else {\r\n        const choiceKey = currentTruthDareChoice || 'truth';\r\n        return t.specialGames.truthOrDare[choiceKey].replace('{player}', specialGamePlayer);\r\n      }\r\n    }\r\n    \r\n    // Per gli altri giochi\r\n    return t.specialGames[activeSpecialGame]?.replace('{player}', specialGamePlayer) || null;\r\n  };\r\n\r\n  // NUOVO: Ottieni la leaderboard ordinata per numero di penalità\r\n  const getLeaderboard = () => {\r\n    return Object.entries(playerPenalties)\r\n      .sort(([, penaltiesA], [, penaltiesB]) => penaltiesB - penaltiesA)\r\n      .map(([player, penalties]) => ({ player, penalties }));\r\n  };\r\n\r\n  // Export everything that will be needed by the UI component\r\n  return {\r\n    // Constants\r\n    MAX_ACTIONS_PER_GAME,\r\n    MIN_ACTIONS_BETWEEN_SPECIAL_GAMES,\r\n    \r\n    // State\r\n    language,\r\n    t,\r\n    gameState,\r\n    players,\r\n    inputPlayers,\r\n    currentPlayerIndex,\r\n    currentAction,\r\n    selectedRoom,\r\n    isLoading,\r\n    loadingProgress,\r\n    currentRoomIndex,\r\n    activeSpecialGame,\r\n    specialGamePlayer,\r\n    debtList,\r\n    hasPlayedFreeGame,\r\n    hasPaid,\r\n    selectedPaymentOption,\r\n    isProcessingPayment,\r\n    truthDarePlayers,\r\n    currentTruthDareChoice,\r\n    truthDareContent,\r\n    truthDareState,\r\n    cringeOrClassyState,\r\n    cringeOrClassyResult,\r\n    playerPenalties, // NUOVO: Espone il contatore delle penalità\r\n    wouldYouRatherContent, // NUOVO: Contenuto del gioco \"preferiresti\"\r\n    \r\n    // Functions\r\n    changeLanguage,\r\n    openLanguageSelector,\r\n    enterPlayerSetup,\r\n    addPlayerInput,\r\n    updatePlayerName,\r\n    removePlayerInput,\r\n    startGame,\r\n    handleKeyPress,\r\n    selectRoom,\r\n    nextTurn,\r\n    nextTurnAfterSpecialGame,\r\n    handleTruthDareChoice,\r\n    goBack,\r\n    resetGame,\r\n    selectPaymentOption,\r\n    processPayment,\r\n    resetPaywallState,\r\n    getSpecialGameMessage,\r\n    handleDone, // NUOVO: Funzione per il pulsante \"Fatto\"\r\n    handlePay, // NUOVO: Funzione per il pulsante \"Paga\"\r\n    getLeaderboard, // NUOVO: Funzione per ottenere la leaderboard\r\n    endGame, // NUOVO: Funzione per terminare il gioco dopo la leaderboard\r\n    \r\n    // Additional state setters that need to be exposed\r\n    setCurrentRoomIndex,\r\n    setGameState\r\n  };\r\n};\r\n\r\nexport default useGameLogic;","// GameUI.js - Componente per la parte visuale del gioco\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\n// Importa l'immagine del guanto che punta\r\nimport pointingGlove from './assets/pointing-glove.png';\r\n\r\n/**\r\n * Componente per la UI del gioco\r\n * @param {Object} props - Props passate dal componente principale\r\n */\r\nconst GameUI = (props) => {\r\n  const {\r\n    // Riferimento alle traduzioni\r\n    t,\r\n    language,\r\n    \r\n    // Stati del gioco\r\n    gameState,\r\n    players,\r\n    inputPlayers,\r\n    currentPlayerIndex,\r\n    currentAction,\r\n    selectedRoom,\r\n    isLoading,\r\n    currentRoomIndex,\r\n    \r\n    // Stati per giochi speciali\r\n    activeSpecialGame,\r\n    specialGamePlayer,\r\n    debtList,\r\n    truthDarePlayers,\r\n    currentTruthDareChoice,\r\n    truthDareContent,\r\n    truthDareState,\r\n    \r\n    // NUOVO: Contenuto del gioco \"preferiresti\"\r\n    wouldYouRatherContent,\r\n    \r\n    // Stati per paywall\r\n    hasPlayedFreeGame,\r\n    hasPaid,\r\n    selectedPaymentOption,\r\n    isProcessingPayment,\r\n    \r\n    // NUOVO: Sistema di punteggio\r\n    playerPenalties,\r\n    \r\n    // Funzioni\r\n    changeLanguage,\r\n    openLanguageSelector,\r\n    enterPlayerSetup,\r\n    addPlayerInput,\r\n    updatePlayerName,\r\n    removePlayerInput,\r\n    startGame,\r\n    handleKeyPress,\r\n    selectRoom,\r\n    nextTurn,\r\n    nextTurnAfterSpecialGame,\r\n    handleTruthDareChoice,\r\n    goBack,\r\n    resetPaywallState,\r\n    getSpecialGameMessage,\r\n    \r\n    // NUOVO: Funzioni per i nuovi pulsanti\r\n    handleDone,\r\n    handlePay,\r\n    getLeaderboard,\r\n    endGame\r\n  } = props;\r\n\r\n  // Rendering condizionale in base allo stato del gioco\r\n  return (\r\n    <div className=\"app-container\">\r\n      {/* Welcome Screen */}\r\n      {gameState === 'welcome' && (\r\n        <div className=\"screen welcome-screen\" style={{ \r\n          backgroundColor: '#000000', \r\n          color: '#FFFFFF',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          height: '100vh',\r\n          padding: '20px'\r\n        }}>\r\n          <div style={{\r\n            textAlign: 'center',\r\n            maxWidth: '340px'\r\n          }}>\r\n            <h1 style={{ \r\n              fontSize: '36px', \r\n              marginBottom: '20px',\r\n              fontWeight: 'bold'\r\n            }}>{t.appName}</h1>\r\n            <p style={{ \r\n              fontSize: '18px', \r\n              marginBottom: '40px',\r\n              color: '#CCCCCC',\r\n              lineHeight: '1.5'\r\n            }}>{t.appDescription}</p>\r\n            \r\n            <button \r\n              onClick={enterPlayerSetup}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: '#3498db',\r\n                color: '#FFFFFF',\r\n                border: 'none',\r\n                borderRadius: '10px',\r\n                padding: '16px',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: 'pointer',\r\n                marginBottom: '15px'\r\n              }}\r\n            >\r\n              {t.startButton}\r\n            </button>\r\n            \r\n            <button \r\n              onClick={openLanguageSelector}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: 'transparent',\r\n                color: '#FFFFFF',\r\n                border: '1px solid #3498db',\r\n                borderRadius: '10px',\r\n                padding: '16px',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              {language === 'it' ? '🇮🇹 Italiano' : \r\n               language === 'en' ? '🇬🇧 English' : \r\n               language === 'fr' ? '🇫🇷 Français' : \r\n               '🇩🇪 Deutsch'} - {language === 'it' ? 'Cambia lingua' : \r\n                                 language === 'en' ? 'Change language' : \r\n                                 language === 'fr' ? 'Changer de langue' : \r\n                                 'Sprache ändern'}\r\n            </button>\r\n            \r\n            {/* Pulsante nascosto per reset (solo per testing) */}\r\n            <div style={{ marginTop: '20px', opacity: 0.5 }}>\r\n              <button\r\n                onClick={resetPaywallState}\r\n                style={{\r\n                  background: 'none',\r\n                  border: '1px solid #555',\r\n                  color: '#888',\r\n                  padding: '8px 16px',\r\n                  fontSize: '12px',\r\n                  borderRadius: '5px',\r\n                  cursor: 'pointer'\r\n                }}\r\n              >\r\n                {t.resetButton}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Language Selection Screen */}\r\n      {gameState === 'languageSelection' && (\r\n        <div className=\"screen language-selection-screen\" style={{ \r\n          backgroundColor: '#000000', \r\n          color: '#FFFFFF',\r\n          padding: '20px 0 0 0',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '100vh'\r\n        }}>\r\n          <div style={{ \r\n            display: 'grid',\r\n            gridTemplateColumns: '50px 1fr 50px',\r\n            alignItems: 'center',\r\n            padding: '15px 0',\r\n            marginBottom: '20px'\r\n          }}>\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <button \r\n                onClick={goBack}\r\n                style={{\r\n                  background: 'none',\r\n                  border: 'none',\r\n                  color: '#FFFFFF',\r\n                  fontSize: '24px',\r\n                  cursor: 'pointer',\r\n                  padding: '5px'\r\n                }}\r\n              >\r\n                ←\r\n              </button>\r\n            </div>\r\n            \r\n            <h1 style={{ \r\n              margin: 0, \r\n              textAlign: 'center',\r\n              fontWeight: 'normal',\r\n              fontSize: '28px',\r\n              letterSpacing: '1px'\r\n            }}>\r\n              {language === 'it' ? 'LINGUA' : \r\n               language === 'en' ? 'LANGUAGE' : \r\n               language === 'fr' ? 'LANGUE' : \r\n               'SPRACHE'}\r\n            </h1>\r\n            \r\n            <div></div>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            flex: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            padding: '0 20px',\r\n            marginBottom: '20px',\r\n            overflowY: 'auto'\r\n          }}>\r\n            <div style={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              gap: '15px',\r\n              marginTop: '20px'\r\n            }}>\r\n              <button \r\n                onClick={() => changeLanguage('it')}\r\n                style={{\r\n                  backgroundColor: language === 'it' ? '#3498db' : '#2A2A2A',\r\n                  border: 'none',\r\n                  borderRadius: '10px',\r\n                  padding: '20px',\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                  gap: '15px',\r\n                  cursor: 'pointer'\r\n                }}\r\n              >\r\n                <span style={{ fontSize: '24px' }}>🇮🇹</span>\r\n                <div style={{\r\n                  textAlign: 'left',\r\n                  flex: 1\r\n                }}>\r\n                  <h3 style={{\r\n                    fontSize: '18px',\r\n                    color: '#FFFFFF',\r\n                    margin: 0,\r\n                    marginBottom: '5px'\r\n                  }}>\r\n                    Italiano\r\n                  </h3>\r\n                  <p style={{\r\n                    fontSize: '14px',\r\n                    color: '#AAAAAA',\r\n                    margin: 0\r\n                  }}>\r\n                    Gioca in Italiano\r\n                  </p>\r\n                </div>\r\n                {language === 'it' && (\r\n                  <span style={{ fontSize: '24px', color: '#FFFFFF' }}>✓</span>\r\n                )}\r\n              </button>\r\n              \r\n              <button \r\n                onClick={() => changeLanguage('en')}\r\n                style={{\r\n                  backgroundColor: language === 'en' ? '#3498db' : '#2A2A2A',\r\n                  border: 'none',\r\n                  borderRadius: '10px',\r\n                  padding: '20px',\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                  gap: '15px',\r\n                  cursor: 'pointer'\r\n                }}\r\n              >\r\n                <span style={{ fontSize: '24px' }}>🇬🇧</span>\r\n                <div style={{\r\n                  textAlign: 'left',\r\n                  flex: 1\r\n                }}>\r\n                  <h3 style={{\r\n                    fontSize: '18px',\r\n                    color: '#FFFFFF',\r\n                    margin: 0,\r\n                    marginBottom: '5px'\r\n                  }}>\r\n                    English\r\n                  </h3>\r\n                  <p style={{\r\n                    fontSize: '14px',\r\n                    color: '#AAAAAA',\r\n                    margin: 0\r\n                  }}>\r\n                    Play in English\r\n                  </p>\r\n                </div>\r\n                {language === 'en' && (\r\n                  <span style={{ fontSize: '24px', color: '#FFFFFF' }}>✓</span>\r\n                )}\r\n              </button>\r\n\r\n              {/* Aggiungiamo l'opzione per il francese */}\r\n              <button \r\n                onClick={() => changeLanguage('fr')}\r\n                style={{\r\n                  backgroundColor: language === 'fr' ? '#3498db' : '#2A2A2A',\r\n                  border: 'none',\r\n                  borderRadius: '10px',\r\n                  padding: '20px',\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                  gap: '15px',\r\n                  cursor: 'pointer'\r\n                }}\r\n              >\r\n                <span style={{ fontSize: '24px' }}>🇫🇷</span>\r\n                <div style={{\r\n                  textAlign: 'left',\r\n                  flex: 1\r\n                }}>\r\n                  <h3 style={{\r\n                    fontSize: '18px',\r\n                    color: '#FFFFFF',\r\n                    margin: 0,\r\n                    marginBottom: '5px'\r\n                  }}>\r\n                    Français\r\n                  </h3>\r\n                  <p style={{\r\n                    fontSize: '14px',\r\n                    color: '#AAAAAA',\r\n                    margin: 0\r\n                  }}>\r\n                    Jouer en Français\r\n                  </p>\r\n                </div>\r\n                {language === 'fr' && (\r\n                  <span style={{ fontSize: '24px', color: '#FFFFFF' }}>✓</span>\r\n                )}\r\n              </button>\r\n\r\n              {/* Aggiungiamo l'opzione per il tedesco */}\r\n              <button \r\n                onClick={() => changeLanguage('de')}\r\n                style={{\r\n                  backgroundColor: language === 'de' ? '#3498db' : '#2A2A2A',\r\n                  border: 'none',\r\n                  borderRadius: '10px',\r\n                  padding: '20px',\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                  gap: '15px',\r\n                  cursor: 'pointer'\r\n                }}\r\n              >\r\n                <span style={{ fontSize: '24px' }}>🇩🇪</span>\r\n                <div style={{\r\n                  textAlign: 'left',\r\n                  flex: 1\r\n                }}>\r\n                  <h3 style={{\r\n                    fontSize: '18px',\r\n                    color: '#FFFFFF',\r\n                    margin: 0,\r\n                    marginBottom: '5px'\r\n                  }}>\r\n                    Deutsch\r\n                  </h3>\r\n                  <p style={{\r\n                    fontSize: '14px',\r\n                    color: '#AAAAAA',\r\n                    margin: 0\r\n                  }}>\r\n                    Auf Deutsch spielen\r\n                  </p>\r\n                </div>\r\n                {language === 'de' && (\r\n                  <span style={{ fontSize: '24px', color: '#FFFFFF' }}>✓</span>\r\n                )}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            padding: '0',\r\n            position: 'fixed',\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: 'transparent',\r\n            zIndex: 10\r\n          }}>\r\n            <button \r\n              onClick={goBack}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: '#3498db',\r\n                color: '#FFFFFF',\r\n                border: 'none',\r\n                borderRadius: '0',\r\n                padding: '16px',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              {language === 'it' ? 'CONFERMA' : \r\n               language === 'en' ? 'CONFIRM' : \r\n               language === 'fr' ? 'CONFIRMER' : \r\n               'BESTÄTIGEN'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Player Setup Screen */}\r\n      {gameState === 'playerSetup' && (\r\n        <div className=\"screen player-setup-screen\" style={{ \r\n          backgroundColor: '#000000', \r\n          color: '#FFFFFF',\r\n          padding: '0',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '100vh'\r\n        }}>\r\n          <div style={{ \r\n            display: 'grid',\r\n            gridTemplateColumns: '50px 1fr 50px',\r\n            alignItems: 'center',\r\n            padding: '15px 0',\r\n            marginBottom: '20px'\r\n          }}>\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <button \r\n                onClick={goBack}\r\n                style={{\r\n                  background: 'none',\r\n                  border: 'none',\r\n                  color: '#FFFFFF',\r\n                  fontSize: '24px',\r\n                  cursor: 'pointer',\r\n                  padding: '5px'\r\n                }}\r\n              >\r\n                ←\r\n              </button>\r\n            </div>\r\n            \r\n            <h1 style={{ \r\n              margin: 0, \r\n              textAlign: 'center',\r\n              fontWeight: 'normal',\r\n              fontSize: '28px',\r\n              letterSpacing: '1px'\r\n            }}>\r\n              {t.playersScreenTitle}\r\n            </h1>\r\n            \r\n            <div></div> {/* Colonna vuota a destra per equilibrio */}\r\n          </div>\r\n          \r\n          <div style={{ \r\n            flex: 1,\r\n            padding: '0',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            overflow: 'auto',\r\n            marginBottom: '80px'\r\n          }}>\r\n            {inputPlayers.map((input, index) => (\r\n              <div key={input.id} style={{ \r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                gap: '10px',\r\n                width: '100%',\r\n                maxWidth: '340px',\r\n                marginBottom: '16px',\r\n                padding: '0 20px'\r\n              }}>\r\n                <input\r\n                  id={`player-input-${index}`}\r\n                  type=\"text\"\r\n                  value={input.name}\r\n                  onChange={(e) => updatePlayerName(input.id, e.target.value)}\r\n                  onKeyPress={(e) => handleKeyPress(e, input.id, index)}\r\n                  placeholder={t.playerInputPlaceholder}\r\n                  style={{\r\n                    flex: 1,\r\n                    backgroundColor: '#1A1A1A',\r\n                    color: '#FFFFFF',\r\n                    border: 'none',\r\n                    borderRadius: '10px',\r\n                    padding: '16px 20px',\r\n                    fontSize: '16px',\r\n                  }}\r\n                />\r\n                <button \r\n                  onClick={() => removePlayerInput(input.id)}\r\n                  disabled={inputPlayers.length <= 1}\r\n                  style={{\r\n                    background: 'none',\r\n                    border: 'none',\r\n                    color: '#808080',\r\n                    fontSize: '24px',\r\n                    cursor: 'pointer',\r\n                    padding: '10px',\r\n                    opacity: inputPlayers.length <= 1 ? 0.5 : 1\r\n                  }}\r\n                >\r\n                  🗑️\r\n                </button>\r\n              </div>\r\n            ))}\r\n            \r\n            <button \r\n              onClick={addPlayerInput}\r\n              disabled={inputPlayers.length >= 15}\r\n              style={{\r\n                margin: '5px 0 20px 0',\r\n                backgroundColor: 'transparent',\r\n                color: '#FFFFFF',\r\n                border: '1px dashed #808080',\r\n                borderRadius: '10px',\r\n                padding: '15px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                gap: '10px',\r\n                cursor: 'pointer',\r\n                fontSize: '16px',\r\n                width: '340px'\r\n              }}\r\n            >\r\n              <span style={{ fontSize: '20px' }}>⊕</span> {t.addPlayerLabel}\r\n            </button>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            position: 'fixed',\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: 'transparent'\r\n          }}>\r\n            <button \r\n              onClick={startGame}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: '#3498db',\r\n                color: '#FFFFFF',\r\n                border: 'none',\r\n                borderRadius: '0',\r\n                padding: '16px',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: 'pointer',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                gap: '10px'\r\n              }}\r\n            >\r\n              <span style={{ fontSize: '20px' }}>▶</span> {t.startGameButton}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Room Selection Screen */}\r\n      {gameState === 'roomSelection' && (\r\n        <div className=\"screen room-selection-screen\" style={{ \r\n          backgroundColor: '#000000', \r\n          color: '#FFFFFF',\r\n          padding: '0',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '100vh',\r\n          overflowY: 'auto'\r\n        }}>\r\n          <div style={{ \r\n            display: 'grid',\r\n            gridTemplateColumns: '50px 1fr 50px',\r\n            alignItems: 'center',\r\n            padding: '15px 0',\r\n            marginBottom: '10px'\r\n          }}>\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <button \r\n                onClick={goBack}\r\n                style={{\r\n                  background: 'none',\r\n                  border: 'none',\r\n                  color: '#FFFFFF',\r\n                  fontSize: '24px',\r\n                  cursor: 'pointer',\r\n                  padding: '5px'\r\n                }}\r\n              >\r\n                ←\r\n              </button>\r\n            </div>\r\n            \r\n            <h1 style={{ \r\n              margin: 0, \r\n              textAlign: 'center',\r\n              fontWeight: 'normal',\r\n              fontSize: '28px',\r\n              letterSpacing: '1px'\r\n            }}>\r\n              {t.roomsScreenTitle}\r\n            </h1>\r\n            \r\n            <div></div>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            flex: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            padding: '0 20px',\r\n            minHeight: '450px',\r\n            marginBottom: '20px'\r\n          }}>\r\n            <div style={{\r\n              width: '300px',\r\n              height: 'auto',\r\n              minHeight: '300px',\r\n              maxHeight: '70vh',\r\n              backgroundColor: t.rooms[currentRoomIndex].color,\r\n              borderRadius: '15px',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              padding: '30px',\r\n              marginBottom: '15px'\r\n            }}>\r\n              <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                <h2 style={{\r\n                  fontSize: '36px',\r\n                  fontWeight: 'bold',\r\n                  textAlign: 'center',\r\n                  color: t.rooms[currentRoomIndex].color === '#1F2937' || \r\n                        t.rooms[currentRoomIndex].color === '#DC2626' || \r\n                        t.rooms[currentRoomIndex].color === '#D946EF' ? '#FFFFFF' : '#000000'\r\n                }}>\r\n                  {t.rooms[currentRoomIndex].name}\r\n                </h2>\r\n              </div>\r\n              \r\n              <div style={{ marginBottom: '20px' }}>\r\n                <button \r\n                  onClick={() => selectRoom(t.rooms[currentRoomIndex])}\r\n                  style={{\r\n                    backgroundColor: '#FFFFFF',\r\n                    color: '#000000',\r\n                    border: 'none',\r\n                    borderRadius: '10px',\r\n                    padding: '14px 40px',\r\n                    fontSize: '16px',\r\n                    fontWeight: 'bold',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                >\r\n                  {t.enterButton}\r\n                </button>\r\n              </div>\r\n              \r\n              <div style={{ minHeight: '40px', display: 'flex', alignItems: 'center' }}>\r\n                <p style={{\r\n                  fontSize: '16px',\r\n                  textAlign: 'center',\r\n                  color: t.rooms[currentRoomIndex].color === '#1F2937' ? '#9CA3AF' :\r\n                        t.rooms[currentRoomIndex].color === '#DC2626' ? 'rgba(255,255,255,0.8)' :\r\n                        t.rooms[currentRoomIndex].color === '#D946EF' ? '#f5d0fe' : \r\n                        'rgba(0,0,0,0.7)'\r\n                }}>\r\n                  {t.rooms[currentRoomIndex].description}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div style={{ \r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: '20px',\r\n              marginBottom: '20px'\r\n            }}>\r\n              <button \r\n                onClick={() => {\r\n                  // Retrieve the setCurrentRoomIndex function from props\r\n                  const newIndex = currentRoomIndex === 0 ? t.rooms.length - 1 : currentRoomIndex - 1;\r\n                  props.setCurrentRoomIndex(newIndex);\r\n                }}\r\n                style={{\r\n                  background: 'none',\r\n                  border: 'none',\r\n                  color: '#AAAAAA',\r\n                  fontSize: '36px',\r\n                  cursor: 'pointer',\r\n                  padding: '10px'\r\n                }}\r\n              >\r\n                ‹\r\n              </button>\r\n              \r\n              <div style={{ \r\n                display: 'flex',\r\n                gap: '8px'\r\n              }}>\r\n                {t.rooms.map((_, index) => (\r\n                  <div \r\n                    key={index}\r\n                    onClick={() => props.setCurrentRoomIndex(index)}\r\n                    style={{\r\n                      width: '10px',\r\n                      height: '10px',\r\n                      borderRadius: '50%',\r\n                      backgroundColor: index === currentRoomIndex ? '#FFFFFF' : '#555555',\r\n                      cursor: 'pointer'\r\n                    }}\r\n                  ></div>\r\n                ))}\r\n              </div>\r\n              \r\n              <button \r\n                onClick={() => {\r\n                  // Retrieve the setCurrentRoomIndex function from props\r\n                  const newIndex = currentRoomIndex === t.rooms.length - 1 ? 0 : currentRoomIndex + 1;\r\n                  props.setCurrentRoomIndex(newIndex);\r\n                }}\r\n                style={{\r\n                  background: 'none',\r\n                  border: 'none',\r\n                  color: '#AAAAAA',\r\n                  fontSize: '36px',\r\n                  cursor: 'pointer',\r\n                  padding: '10px'\r\n                }}\r\n              >\r\n                ›\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Playing Screen */}\r\n      {gameState === 'playing' && selectedRoom && (\r\n        <div className=\"screen playing-screen\" style={{ \r\n          backgroundColor: '#000000', \r\n          color: '#FFFFFF',\r\n          padding: '20px 0 0 0',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '100vh'\r\n        }}>\r\n          <div style={{ \r\n            display: 'grid',\r\n            gridTemplateColumns: '50px 1fr 50px',\r\n            alignItems: 'center',\r\n            padding: '15px 0',\r\n            marginBottom: '20px'\r\n          }}>\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <button \r\n                onClick={goBack}\r\n                style={{\r\n                  background: 'none',\r\n                  border: 'none',\r\n                  color: '#FFFFFF',\r\n                  fontSize: '24px',\r\n                  cursor: 'pointer',\r\n                  padding: '5px'\r\n                }}\r\n              >\r\n                ←\r\n              </button>\r\n            </div>\r\n            \r\n            <h1 style={{ \r\n              margin: 0, \r\n              textAlign: 'center',\r\n              fontWeight: 'normal',\r\n              fontSize: '28px',\r\n              letterSpacing: '1px'\r\n            }}>\r\n              {selectedRoom.name.toUpperCase()}\r\n            </h1>\r\n            \r\n            <div></div> {/* Colonna vuota a destra per equilibrio */}\r\n          </div>\r\n          \r\n          <div style={{ \r\n            flex: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            padding: '0 20px',\r\n            marginBottom: '80px'\r\n          }}>\r\n            <h2 style={{\r\n              fontSize: '26px',\r\n              fontWeight: 'bold',\r\n              textAlign: 'center',\r\n              margin: '10px 0 30px 0'\r\n            }}>\r\n              {activeSpecialGame ? t.specialGamesTitles[activeSpecialGame] : players[currentPlayerIndex]}\r\n            </h2>\r\n            \r\n            <div style={{\r\n              backgroundColor: '#1A1A1A',\r\n              borderRadius: '15px',\r\n              padding: '30px 20px',\r\n              marginBottom: '30px',\r\n              minHeight: '180px',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              justifyContent: 'center',\r\n              alignItems: 'center'\r\n            }}>\r\n              {currentAction && (\r\n                <p style={{\r\n                  fontSize: '20px',\r\n                  lineHeight: '1.4',\r\n                  textAlign: 'center',\r\n                  whiteSpace: 'pre-wrap'\r\n                }}>\r\n                  {currentAction.text}\r\n                </p>\r\n              )}\r\n              \r\n              {/* Messaggio unificato per i giochi speciali attivi */}\r\n              {activeSpecialGame && activeSpecialGame !== \"wouldYouRather\" && (\r\n                <p style={{ \r\n                  marginTop: '15px', \r\n                  fontSize: '16px', \r\n                  color: '#AAAAAA',\r\n                  textAlign: 'center'\r\n                }}>\r\n                  {getSpecialGameMessage()}\r\n                </p>\r\n              )}\r\n              \r\n              {/* Pulsanti per la scelta Obbligo/Verità/Debito */}\r\n              {activeSpecialGame === \"truthOrDare\" && truthDareState === \"choosing\" && (\r\n                <div style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  alignItems: 'center',\r\n                  gap: '15px',\r\n                  marginTop: '20px'\r\n                }}>\r\n                  <p style={{ fontSize: '16px', color: '#AAAAAA' }}>\r\n                    {t.truthDareOptions.selectOption}\r\n                  </p>\r\n                  <div style={{\r\n                    display: 'flex',\r\n                    gap: '10px',\r\n                    justifyContent: 'center'\r\n                  }}>\r\n                    <button\r\n                      onClick={() => handleTruthDareChoice(\"truth\")}\r\n                      style={{\r\n                        backgroundColor: '#E74C3C',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        padding: '12px 20px',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                      }}\r\n                    >\r\n                      {t.truthDareOptions.truth}\r\n                    </button>\r\n                    <button\r\n                      onClick={() => handleTruthDareChoice(\"dare\")}\r\n                      style={{\r\n                        backgroundColor: '#3498DB',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        padding: '12px 20px',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                      }}\r\n                    >\r\n                      {t.truthDareOptions.dare}\r\n                    </button>\r\n                    <button\r\n                      onClick={() => handleTruthDareChoice(\"debt\")}\r\n                      style={{\r\n                        backgroundColor: '#2ECC71',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '8px',\r\n                        padding: '12px 20px',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold',\r\n                        cursor: 'pointer'\r\n                      }}\r\n                    >\r\n                      {t.truthDareOptions.debt}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Mostra il contenuto della scelta */}\r\n              {activeSpecialGame === \"truthOrDare\" && truthDareState === \"executing\" && (\r\n                <div style={{\r\n                  marginTop: '20px',\r\n                  padding: '15px',\r\n                  backgroundColor: currentTruthDareChoice === \"truth\" ? '#E74C3C20' :\r\n                                currentTruthDareChoice === \"dare\" ? '#3498DB20' :\r\n                                '#2ECC7120',\r\n                  borderRadius: '10px',\r\n                  textAlign: 'center'\r\n                }}>\r\n                  <h3 style={{\r\n                    marginBottom: '10px',\r\n                    color: currentTruthDareChoice === \"truth\" ? '#E74C3C' :\r\n                        currentTruthDareChoice === \"dare\" ? '#3498DB' :\r\n                        '#2ECC71'\r\n                  }}>\r\n                    {currentTruthDareChoice === \"truth\" ? t.truthDareOptions.truth :\r\n                    currentTruthDareChoice === \"dare\" ? t.truthDareOptions.dare :\r\n                    t.truthDareOptions.debt}\r\n                  </h3>\r\n                  \r\n                  {truthDareContent && (\r\n                    <p style={{ fontSize: '18px' }}>\r\n                      {truthDareContent}\r\n                    </p>\r\n                  )}\r\n                  \r\n                  {currentTruthDareChoice === \"debt\" && (\r\n                    <p style={{ fontSize: '16px', color: '#AAAAAA', marginTop: '10px' }}>\r\n                      {t.truthDareOptions.debtExplanation}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            padding: '0',\r\n            position: 'fixed',\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: 'transparent',\r\n            zIndex: 10\r\n          }}>\r\n            {/* NUOVO: Sostituiamo il pulsante NEXT con due nuovi pulsanti */}\r\n            {activeSpecialGame === \"truthOrDare\" && truthDareState === \"choosing\" ? (\r\n              // Manteniamo il pulsante originale durante la scelta Truth/Dare/Debt\r\n              <button \r\n                style={{\r\n                  width: '100%',\r\n                  backgroundColor: '#AAAAAA',\r\n                  color: '#FFFFFF',\r\n                  border: 'none',\r\n                  borderRadius: '0',\r\n                  padding: '16px',\r\n                  fontSize: '18px',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'not-allowed',\r\n                  opacity: 0.5\r\n                }}\r\n              >\r\n                {t.truthDareOptions.chooseOption}\r\n              </button>\r\n            ) : (\r\n              // Nuovi pulsanti \"Fatto\" e \"Paga\"\r\n              <div style={{\r\n                display: 'flex',\r\n                width: '100%'\r\n              }}>\r\n                <button \r\n                  onClick={() => {\r\n                    if (activeSpecialGame) {\r\n                      nextTurnAfterSpecialGame();\r\n                    } else {\r\n                      handleDone();\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    flex: 1,\r\n                    backgroundColor: '#2ECC71',\r\n                    color: '#FFFFFF',\r\n                    border: 'none',\r\n                    borderRadius: '0',\r\n                    padding: '16px',\r\n                    fontSize: '18px',\r\n                    fontWeight: 'bold',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                >\r\n                  {t.doneButton}\r\n                </button>\r\n                <button \r\n                  onClick={() => {\r\n                    if (activeSpecialGame) {\r\n                      nextTurnAfterSpecialGame();\r\n                    } else {\r\n                      handlePay();\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    flex: 1,\r\n                    backgroundColor: '#E74C3C',\r\n                    color: '#FFFFFF',\r\n                    border: 'none',\r\n                    borderRadius: '0',\r\n                    padding: '16px',\r\n                    fontSize: '18px',\r\n                    fontWeight: 'bold',\r\n                    cursor: 'pointer'\r\n                  }}\r\n                >\r\n                  {t.payButton}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* NUOVO: Leaderboard Screen */}\r\n      {gameState === 'leaderboard' && (\r\n        <div className=\"screen leaderboard-screen\" style={{ \r\n          backgroundColor: '#000000', \r\n          color: '#FFFFFF',\r\n          padding: '20px 0 0 0',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '100vh'\r\n        }}>\r\n          <div style={{ \r\n            display: 'grid',\r\n            gridTemplateColumns: '50px 1fr 50px',\r\n            alignItems: 'center',\r\n            padding: '15px 0',\r\n            marginBottom: '20px'\r\n          }}>\r\n            <div></div>\r\n            \r\n            <h1 style={{ \r\n              margin: 0, \r\n              textAlign: 'center',\r\n              fontWeight: 'bold',\r\n              fontSize: '28px',\r\n              letterSpacing: '1px'\r\n            }}>\r\n              {t.leaderboardTitle}\r\n            </h1>\r\n            \r\n            <div></div>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            flex: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            padding: '0 20px',\r\n            marginBottom: '80px'\r\n          }}>\r\n            <p style={{\r\n              fontSize: '16px',\r\n              textAlign: 'center',\r\n              color: '#AAAAAA',\r\n              marginBottom: '30px'\r\n            }}>\r\n              {t.leaderboardSubtitle}\r\n            </p>\r\n            \r\n            <div style={{\r\n              backgroundColor: '#1A1A1A',\r\n              borderRadius: '15px',\r\n              padding: '20px',\r\n              marginBottom: '20px'\r\n            }}>\r\n              {getLeaderboard().map((item, index) => (\r\n                <div key={index} style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center',\r\n                  padding: '15px 10px',\r\n                  borderBottom: index < getLeaderboard().length - 1 ? '1px solid #333' : 'none'\r\n                }}>\r\n                  <div style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '15px'\r\n                  }}>\r\n                    <div style={{\r\n                      width: '30px',\r\n                      height: '30px',\r\n                      borderRadius: '50%',\r\n                      backgroundColor: index === 0 ? '#FFD700' : index === 1 ? '#C0C0C0' : index === 2 ? '#CD7F32' : '#555',\r\n                      display: 'flex',\r\n                      justifyContent: 'center',\r\n                      alignItems: 'center',\r\n                      fontWeight: 'bold',\r\n                      fontSize: '16px'\r\n                    }}>\r\n                      {index + 1}\r\n                    </div>\r\n                    <div style={{\r\n                      fontSize: '18px',\r\n                      fontWeight: index < 3 ? 'bold' : 'normal'\r\n                    }}>\r\n                      {item.player}\r\n                    </div>\r\n                  </div>\r\n                  <div style={{\r\n                    fontSize: '22px',\r\n                    fontWeight: 'bold',\r\n                    color: index === 0 ? '#FFD700' : index === 1 ? '#C0C0C0' : index === 2 ? '#CD7F32' : '#FFFFFF'\r\n                  }}>\r\n                    {item.penalties} <span style={{ fontSize: '14px', fontWeight: 'normal', opacity: 0.7 }}>{t.penaltiesLabel}</span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            \r\n            <div style={{\r\n              marginTop: '20px',\r\n              textAlign: 'center'\r\n            }}>\r\n              <p style={{\r\n                fontSize: '16px',\r\n                color: '#AAAAAA',\r\n                marginBottom: '10px'\r\n              }}>\r\n                {t.actionsCompletedMessage.replace('{count}', props.MAX_ACTIONS_PER_GAME)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            padding: '0',\r\n            position: 'fixed',\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: 'transparent',\r\n            zIndex: 10\r\n          }}>\r\n            <button \r\n              onClick={endGame}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: '#3498db',\r\n                color: '#FFFFFF',\r\n                border: 'none',\r\n                borderRadius: '0',\r\n                padding: '16px',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              {t.continueButton}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Game Over Screen */}\r\n      {gameState === 'gameOver' && (\r\n        <div \r\n          className=\"screen game-over-screen\" \r\n          onClick={() => {\r\n            // Se l'utente ha già giocato la partita gratuita e non ha pagato, mostra il paywall\r\n            if (hasPlayedFreeGame && !hasPaid) {\r\n              goBack(); // Utilizza la funzione goBack passata dalle props\r\n            } else {\r\n              goBack(); // Utilizza la funzione goBack passata dalle props\r\n            }\r\n          }}\r\n          style={{\r\n            backgroundColor: '#000000',\r\n            color: '#FFFFFF',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            height: '100vh',\r\n            padding: '20px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          <div style={{\r\n            textAlign: 'center',\r\n            maxWidth: '340px'\r\n          }}>\r\n            <h1 style={{ \r\n              fontSize: '36px', \r\n              marginBottom: '30px',\r\n              fontWeight: 'bold'\r\n            }}>\r\n              {t.gameOverMessage}\r\n            </h1>\r\n            \r\n            <p style={{ \r\n              fontSize: '18px', \r\n              marginBottom: '50px',\r\n              color: '#CCCCCC',\r\n              lineHeight: '1.5'\r\n            }}>\r\n              {t.actionsCompletedMessage.replace('{count}', props.MAX_ACTIONS_PER_GAME)}\r\n            </p>\r\n            \r\n            <div style={{ \r\n              width: '120px',\r\n              height: '120px',\r\n              margin: '0 auto 40px',\r\n              animation: 'float 2s infinite ease-in-out'\r\n            }}>\r\n              <img \r\n                src={pointingGlove} \r\n                alt=\"Guanto che punta\" \r\n                style={{\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  objectFit: 'contain',\r\n                  filter: 'brightness(0) invert(1)'\r\n                }}\r\n              />\r\n            </div>\r\n            \r\n            <p style={{ \r\n              fontSize: '16px', \r\n              color: '#3498db'\r\n            }}>\r\n              {t.tapToContinueMessage.replace(\r\n                '{action}', \r\n                hasPlayedFreeGame && !hasPaid \r\n                  ? t.unlockMoreGamesMessage \r\n                  : t.returnToRoomsMessage\r\n              )}\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Add CSS animation for the floating effect */}\r\n          <style jsx=\"true\">{`\r\n            @keyframes float {\r\n              0% { transform: translateY(0px); }\r\n              50% { transform: translateY(-10px); }\r\n              100% { transform: translateY(0px); }\r\n            }\r\n          `}</style>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Paywall Screen */}\r\n      {gameState === 'paywall' && (\r\n        <div className=\"screen paywall-screen\" style={{ \r\n          backgroundColor: '#000000', \r\n          color: '#FFFFFF',\r\n          padding: '20px 0 0 0',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '100vh'\r\n        }}>\r\n          <div style={{ \r\n            display: 'grid',\r\n            gridTemplateColumns: '50px 1fr 50px',\r\n            alignItems: 'center',\r\n            padding: '15px 0',\r\n            marginBottom: '20px'\r\n          }}>\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <button \r\n                onClick={goBack}\r\n                style={{\r\n                  background: 'none',\r\n                  border: 'none',\r\n                  color: '#FFFFFF',\r\n                  fontSize: '24px',\r\n                  cursor: 'pointer',\r\n                  padding: '5px'\r\n                }}\r\n              >\r\n                ←\r\n              </button>\r\n            </div>\r\n            \r\n            <h1 style={{ \r\n              margin: 0, \r\n              textAlign: 'center',\r\n              fontWeight: 'normal',\r\n              fontSize: '28px',\r\n              letterSpacing: '1px'\r\n            }}>\r\n              {t.unlockGameTitle}\r\n            </h1>\r\n            \r\n            <div></div> {/* Colonna vuota a destra per equilibrio */}\r\n          </div>\r\n          \r\n          <div style={{ \r\n            flex: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            padding: '0 20px'\r\n          }}>\r\n            <div style={{\r\n              backgroundColor: '#1A1A1A',\r\n              borderRadius: '15px',\r\n              padding: '25px 20px',\r\n              marginBottom: '30px',\r\n              textAlign: 'center'\r\n            }}>\r\n              <h2 style={{\r\n                fontSize: '24px',\r\n                fontWeight: 'bold',\r\n                marginBottom: '15px'\r\n              }}>\r\n                {t.freeGameEndedTitle}\r\n              </h2>\r\n              <p style={{\r\n                fontSize: '16px',\r\n                color: '#CCCCCC',\r\n                lineHeight: '1.5',\r\n                marginBottom: '20px'\r\n              }}>\r\n                {t.freeGameEndedMessage}\r\n              </p>\r\n              \r\n              <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                gap: '15px',\r\n                marginTop: '25px'\r\n              }}>\r\n                {t.paymentOptions.map(option => (\r\n                  <div \r\n                    key={option.id}\r\n                    onClick={() => props.selectPaymentOption(option)}\r\n                    style={{\r\n                      backgroundColor: selectedPaymentOption?.id === option.id ? '#3498db20' : '#2A2A2A',\r\n                      border: selectedPaymentOption?.id === option.id ? '2px solid #3498db' : '2px solid transparent',\r\n                      borderRadius: '10px',\r\n                      padding: '20px',\r\n                      display: 'flex',\r\n                      flexDirection: 'column',\r\n                      cursor: 'pointer',\r\n                      transition: 'all 0.2s'\r\n                    }}\r\n                  >\r\n                    <div style={{\r\n                      display: 'flex',\r\n                      justifyContent: 'space-between',\r\n                      alignItems: 'center',\r\n                      marginBottom: '10px'\r\n                    }}>\r\n                      <h3 style={{\r\n                        fontSize: '18px',\r\n                        fontWeight: 'bold'\r\n                      }}>\r\n                        {option.name}\r\n                      </h3>\r\n                      <div style={{\r\n                        fontSize: '20px',\r\n                        fontWeight: 'bold',\r\n                        color: '#3498db'\r\n                      }}>\r\n                        €{option.price}\r\n                      </div>\r\n                    </div>\r\n                    <p style={{\r\n                      fontSize: '14px',\r\n                      color: '#AAAAAA',\r\n                      textAlign: 'left'\r\n                    }}>\r\n                      {option.description}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{ \r\n            padding: '0',\r\n            position: 'fixed',\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: 'transparent',\r\n            zIndex: 10\r\n          }}>\r\n            <button \r\n              onClick={props.processPayment}\r\n              disabled={!selectedPaymentOption || isProcessingPayment}\r\n              style={{\r\n                width: '100%',\r\n                backgroundColor: selectedPaymentOption ? '#3498db' : '#555555',\r\n                color: '#FFFFFF',\r\n                border: 'none',\r\n                borderRadius: '0',\r\n                padding: '16px',\r\n                fontSize: '18px',\r\n                fontWeight: 'bold',\r\n                cursor: selectedPaymentOption ? 'pointer' : 'not-allowed',\r\n                opacity: isProcessingPayment ? 0.7 : 1,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                gap: '10px'\r\n              }}\r\n            >\r\n              {isProcessingPayment ? t.processingPayment : t.purchaseButton}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Interfaccia per i debiti */}\r\n      {gameState === 'playing' && debtList.length > 0 && (\r\n        <div style={{\r\n          position: 'fixed',\r\n          bottom: '70px',\r\n          right: '20px',\r\n          zIndex: 100\r\n        }}>\r\n          <button\r\n            onClick={() => alert(`${t.debts.activeDebtsTitle}\\n${debtList.filter(d => d.status === 'active').map(d => `- ${d.player}: ${d.description}`).join('\\n')}`)}\r\n            style={{\r\n              backgroundColor: '#EAB308',\r\n              color: 'black',\r\n              border: 'none',\r\n              borderRadius: '50%',\r\n              width: '40px',\r\n              height: '40px',\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              fontSize: '20px',\r\n              boxShadow: '0 2px 10px rgba(0,0,0,0.2)',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            {t.debts.buttonLabel}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Loading Screen */}\r\n      {isLoading && (\r\n        <div style={{\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          zIndex: 1000\r\n        }}>\r\n          <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            color: '#FFFFFF'\r\n          }}>\r\n            <div style={{\r\n              width: '40px',\r\n              height: '40px',\r\n              borderRadius: '50%',\r\n              border: '3px solid rgba(255,255,255,0.3)',\r\n              borderTopColor: '#FFFFFF',\r\n              animation: 'spin 1s ease-in-out infinite',\r\n              marginBottom: '15px'\r\n            }}></div>\r\n            <p style={{\r\n              fontSize: '16px'\r\n            }}>{t.loadingMessage}</p>\r\n            \r\n            <style jsx=\"true\">{`\r\n              @keyframes spin {\r\n                to { transform: rotate(360deg); }\r\n              }\r\n            `}</style>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameUI;","// DrinkingGameApp.js - Componente principale che collega la logica con l'interfaccia utente\nimport React from 'react';\nimport './App.css';\nimport useGameLogic from './useGameLogic';\nimport GameUI from './GameUI';\n\n/**\n * Componente principale dell'applicazione\n * Collega la logica di gioco (useGameLogic) con l'interfaccia utente (GameUI)\n */\nconst DrinkingGameApp = () => {\n  // Utilizziamo il custom hook per ottenere tutta la logica e lo stato del gioco\n  const gameLogic = useGameLogic();\n  \n  // Passiamo tutti i valori e le funzioni al componente UI\n  return <GameUI {...gameLogic} />;\n};\n\nexport default DrinkingGameApp;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\nimport DrinkingGameApp from './DrinkingGameApp';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <DrinkingGameApp />\n  </React.StrictMode>\n);","module.exports = __webpack_public_path__ + \"static/media/pointing-glove.f00b599b.png\";"],"sourceRoot":""}